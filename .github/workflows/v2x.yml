# See https://octokit.github.io/rest.js/v17#repos-create-dispatch-event on how to trigger repository_dispatch events.
#
# An example using curl:
# curl \
#  -H "Accept: application/vnd.github.everest-preview+json" \
#  -H "Authorization: token <user-token>" \
#  --request POST \
#  --data "{\"event_type\": \"v2x\"}" \
#  https://api.github.com/repos/pentaho/hv-uikit-react/dispatches

name: v2.x Nightly
on:
  # disable v2.x cron since no daily changes come in
  #  schedule:
  #    - cron: "0 3 * * *" # daily at 03:00
  repository_dispatch:
    types: [v2x]
  workflow_dispatch:

# flow:
# +------------------------------------+          +-------------------+
# |Static-Checks (Licenses, Lint, Jest)|          |Build-Documentation|
# +----------+-------------------------+          +---------+---------+
#            |                                              |
#            |                   +-----------+--------------+
#            |                   |           |              |
#            |             +-----v----+ +----v-----+ +------v----------------+
#            |             |A11Y-Tests| |Applitools| |Robot (chrome, firefox)|
#            |             +-----+----+ +----+-----+ +------+----------------+
#            |                   |           |              |
#            +-------------------+-----+-----+--------------+
#                                      |
#                   +----------+       |        +-------+
#                   |Notify End|<------+------->|Release|
#                   +----------+                +-------+

env:
  RELEASE_COMMIT_MESSAGE: "chore(release): publish"
  RUN_URL: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}

jobs:
  Static-Checks:
    name: Licenses, Lint, Jest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: "v2.x"

      - uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Install
        run: npm ci

      - name: Bootstrap
        run: npm run bootstrap

      - name: License Check
        run: npm run license-check

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run test

  Build-Storybook:
    name: Build Storybook
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Install
        run: |
          npm ci

      - name: Bootstrap
        run: npm run bootstrap

      - name: Build Storybook
        run: npm run build-documentation

      - name: Archive Storybook
        uses: actions/upload-artifact@v2
        with:
          name: storybook
          path: ${{ github.workspace }}/dist

      - name: Clean Folders
        if: always()
        run: |

  A11Y-Tests:
    name: Accessibility Tests
    needs: [Build-Storybook]
    runs-on: ubuntu-latest

    services:
      storybook:
        image: nginx
        ports:
          - 9001:80
        volumes:
          - ${{ github.workspace }}/dist:/usr/share/nginx/html
        options: >-
          --name storybook

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Fetch Storybook
        uses: actions/download-artifact@v2
        with:
          name: storybook
          path: ${{ github.workspace }}/dist

      - name: Restart nginx
        uses: docker://docker
        with:
          args: docker restart storybook

      - name: Install automation/pa11y
        run: |
          cd ${{ github.workspace }}/automation/pa11y
          npm ci

      - name: Test A11Y
        run: |
          cd ${{ github.workspace }}/automation/pa11y
          STORYBOOK_URL=http://localhost:9001 npm run pa11y-ci

      - name: Clean Folders
        if: always()
        run: rm -rf ${{ github.workspace }}/dist

  Applitools:
    name: Applitools Storybook Visual Testing
    needs: [Build-Storybook]
    runs-on: ubuntu-latest

    services:
      storybook:
        image: nginx
        ports:
          - 9001:80
        volumes:
          - ${{ github.workspace }}/dist:/usr/share/nginx/html
        options: >-
          --name storybook

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Fetch Storybook
        uses: actions/download-artifact@v2
        with:
          name: storybook
          path: ${{ github.workspace }}/dist

      - name: Restart nginx
        uses: docker://docker
        with:
          args: docker restart storybook

      - name: Install automation/Applitools
        run: |
          cd ${{ github.workspace }}/automation/applitools
          npm ci

      - name: Run Applitools Storybook Visual Testing
        env:
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
        run: |
          cd ${{ github.workspace }}/automation/applitools
          npx eyes-storybook -u http://localhost:9001 > applitools-logs.txt

      - name: Archive Logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: applitools-logs
          path: ${{ github.workspace }}/automation/applitools/applitools-logs.txt

      - name: Clean Folders
        if: always()
        run: rm -rf ${{ github.workspace }}/dist

  Robot:
    name: Test Robot
    needs: [Build-Storybook]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        browser: [firefox, chrome]
    container:
      image: joaoeg/docker-robot-framework:0.1
      options: --shm-size=6g -u 1001
      env:
        BROWSER: ${{ matrix.browser }}
        ROBOT_TESTS_DIR: ./automation/robot/storybook/core
        ROBOT_REPORTS_DIR: ./reports
        ROBOT_THREADS: 4
        ROBOT_OPTIONS: "--variable STORYBOOK_URL:http://storybook --variable BROWSER:${{ matrix.browser }} --exclude bug-${{ matrix.browser }} --exclude bug-${{ matrix.browser }}-webdriver --exclude issue --exclude issue-${{ matrix.browser }} --exclude bug-infrastructure --exclude bug-infrastructure-${{ matrix.browser }}"

    services:
      storybook:
        image: nginx
        volumes:
          - ${{ github.workspace }}/dist:/usr/share/nginx/html
        options: >-
          --name storybook

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch Storybook
        uses: actions/download-artifact@v2
        with:
          name: storybook
          path: ${{ github.workspace }}/dist

      - name: Restart nginx
        uses: docker://docker
        with:
          args: docker restart storybook

      - name: Run Robot
        run: ./.github/robot-docker/run-tests-in-virtual-screen-with-rerun.sh

      - name: Save Reports
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ matrix.browser }}-reports
          path: ${{ github.workspace }}/reports

      - name: Clean Folders
        if: always()
        run: |
          rm -rf ${{ github.workspace }}/dist
          rm -rf ${{ github.workspace }}/reports

  Notify-End-Internal:
    name: Notify End Internal
    needs: [Static-Checks, A11Y-Tests, Applitools, Robot]
    if: failure()
    runs-on: ubuntu-latest

    steps:
      - uses: technote-space/workflow-conclusion-action@v1
      - name: generate conclusion color
        id: conclusion_color
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            if("${{ env.WORKFLOW_CONCLUSION }}" === "success") core.exportVariable("COLOR", "#63A621")
            else if("${{ env.WORKFLOW_CONCLUSION }}" === "failure") core.exportVariable("COLOR", "#C62828")
            else if("${{ env.WORKFLOW_CONCLUSION }}" === "neutral") core.exportVariable("COLOR", "#BCBCBC")
            else if("${{ env.WORKFLOW_CONCLUSION }}" === "cancelled") core.exportVariable("COLOR", "#FFD00A")
            else if("${{ env.WORKFLOW_CONCLUSION }}" === "timed_out") core.exportVariable("COLOR", "#FFD00A")

      - name: Notify Fail
        uses: hbfernandes/slack-action@1.0
        env:
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
          CONCLUSION: ${{ env.WORKFLOW_CONCLUSION }}
        with:
          args: |
            {
              "channel": "ui-kit-internal",
              "attachments": [
                {
                  "mrkdwn_in": ["text"],
                  "color": "${{env.COLOR}}",
                  "title": "${{ github.workflow }} finished: ${{ env.CONCLUSION }}",
                  "title_link": "${{ env.RUN_URL }}"
                }
              ]
            }

  Release:
    if: github.event_name == 'schedule' && !contains(github.event.head_commit.message, '${ RELEASE_COMMIT_MESSAGE }')
    needs: [Static-Checks, A11Y-Tests, Applitools, Robot]
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Release
        # repo scope personal token is required to generate a dispatch event
        run: |
          curl -X POST \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -H 'Authorization: token ${{ secrets.BUILD_TOKEN }}' \
            -d '{"event_type": "v2-release"}'
