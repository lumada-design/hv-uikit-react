# See https://octokit.github.io/rest.js/v17#repos-create-dispatch-event on how to trigger repository_dispatch events.
#
# An example using curl:
# curl \
#  -H "Accept: application/vnd.github.everest-preview+json" \
#  -H "Authorization: token <user-token>" \
#  --request POST \
#  --data "{\"event_type\": \"v1x\"}" \
#  https://api.github.com/repos/pentaho/hv-uikit-react/dispatches

name: v1.x Nightly
on:
  schedule:
    - cron: "0 1 * * *" # daily at 01:00
  repository_dispatch:
    types: [v1x]

# ref is not needed across checkouts because master is the default branch

# flow:
# Notify Start
# License-Checks | Lint | Test-Jest | Build-Documentation | Build-Automation-Storybook
# Robot_pa11y | Robot (chrome | ie | firefox)
# Notify End
# Release

env:
  RESOLVE_REGISTRY: https://repo.orl.eng.hitachivantara.com/artifactory/api/npm/npm/
  RELEASE_COMMIT_MESSAGE: "chore(release): publish"

jobs:
  Notify-Start:
    name: Notify Start
    runs-on: [self-hosted, Linux]
    steps:
      - name: Notify
        uses: hbfernandes/slack-action@1.0
        env:
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
        with:
          args: |
            {
              "channel": "ui-kit-eng-ci",
              "attachments": [
                {
                  "mrkdwn_in": ["text"],
                  "title": "Workflow ${{ github.workflow }} (${{github.ref}}) build started",
                  "text": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                  "footer": "by ${{github.actor}}"
                }
              ]
            }

  Static-Checks:
    name: Licenses, Lint, Jest
    runs-on: [self-hosted, Linux]
    needs: [Notify-Start]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: "v1.x"

      - uses: actions/setup-node@v1
        with:
          node-version: "12"

      - name: Install
        run: |
          npm config set @hv:registry ${RESOLVE_REGISTRY}
          npm ci

      - name: Bootstrap
        run: npm run bootstrap

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run test

  Build-Documentation:
    name: Build Documentation
    needs: [Notify-Start]
    runs-on: [self-hosted, Linux]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: "v1.x"

      - uses: actions/setup-node@v1
        with:
          node-version: "12"

      - name: Install
        run: |
          npm config set @hv:registry ${RESOLVE_REGISTRY}
          npm ci

      - name: Bootstrap
        run: npm run bootstrap

      - name: Generate Automation Storybook
        run: npm run automation:package

      - name: Archive Automation Storybook
        uses: actions/upload-artifact@v1
        with:
          name: automation-storybook
          path: automation/storybook/dist

  Robot:
    name: Test Robot
    needs: [Build-Documentation]
    runs-on: [self-hosted, Linux]
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox]
    container:
      image: ppodgorsek/robot-framework:latest
      options: --shm-size=6g --cpus 4 -u 2501
      env:
        BROWSER: ${{ matrix.browser }}
        ROBOT_TESTS_DIR: ./automation/robot/storybook/core
        ROBOT_REPORTS_DIR: ./reports
        ROBOT_THREADS: 4
        ROBOT_OPTIONS: "--variable STORYBOOK_URL:http://storybook --variable BROWSER:${{ matrix.browser }} --exclude pa11y --exclude bug-${{ matrix.browser }} --exclude bug-${{ matrix.browser }}-webdriver --exclude issue --exclude issue-${{ matrix.browser }} --exclude bug-infrastructure --exclude bug-infrastructure-${{ matrix.browser }}"

    services:
      storybook:
        image: nginx
        volumes:
          - ${{ github.workspace }}/dist:/usr/share/nginx/html
        options: >-
          --name storybook

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: "v1.x"

      - name: Fetch Storybook
        uses: actions/download-artifact@v1
        with:
          name: automation-storybook
          path: ${{ github.workspace }}/dist

      - name: Restart nginx
        uses: docker://docker
        with:
          args: docker restart storybook

      - name: Run Robot
        run: ./.github/robot-docker/run-tests-in-virtual-screen-with-rerun.sh

      - name: Save Reports
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: ${{ matrix.browser }}-reports
          path: reports

      - name: Clean Reports
        run: rm -rf reports

  Notify-End:
    name: Notify End
    needs: [Static-Checks, Build-Documentation, Robot]
    if: always()
    runs-on: [self-hosted, Linux]

    steps:
      - uses: technote-space/workflow-conclusion-action@v1
      - name: generate conclusion color
        id: conclusion_color
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            if("${{ env.WORKFLOW_CONCLUSION }}" === "success") core.exportVariable("COLOR", "#63A621")
            else if("${{ env.WORKFLOW_CONCLUSION }}" === "failure") core.exportVariable("COLOR", "#C62828")
            else if("${{ env.WORKFLOW_CONCLUSION }}" === "neutral") core.exportVariable("COLOR", "#BCBCBC")
            else if("${{ env.WORKFLOW_CONCLUSION }}" === "cancelled") core.exportVariable("COLOR", "#FFD00A")
            else if("${{ env.WORKFLOW_CONCLUSION }}" === "timed_out") core.exportVariable("COLOR", "#FFD00A")

      - name: Notify
        uses: hbfernandes/slack-action@1.0
        env:
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
          CONCLUSION: ${{ env.WORKFLOW_CONCLUSION }}
        with:
          args: |
            {
              "channel": "ui-kit-eng-ci",
              "attachments": [
                {
                  "mrkdwn_in": ["text"],
                  "color": "${{env.COLOR}}",
                  "title": "${{ github.workflow }} (${{github.ref}}) build finished - ${{ env.CONCLUSION }}",
                  "text": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
                }
              ]
            }

  Release:
    if: github.event_name == 'schedule' && !contains(github.event.head_commit.message, '${ RELEASE_COMMIT_MESSAGE }')
    needs: [Static-Checks, Build-Documentation, Robot]
    runs-on: [self-hosted, Linux]
    steps:
      - name: Trigger Release
        uses: actions/github-script@0.8.0
        with:
          # repo scope token is required to generate a dispatch event
          github-token: ${{ secrets.BUILD_TOKEN }}
          script: |
            await github.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'v1-release'
            })
