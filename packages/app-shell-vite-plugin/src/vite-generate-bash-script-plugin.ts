import fs from "node:fs";
import path from "node:path";
import type { PluginOption, ResolvedConfig } from "vite";

import SHARED_DEPENDENCIES from "./shared-dependencies.js";
import { getExtraDependenciesString } from "./vite-importmap-plugin.js";

export default function generateBashScript(
  externalImportMap: boolean,
  inlineConfig: boolean,
): PluginOption {
  let config: ResolvedConfig;
  let targetDir: string | undefined;

  return {
    name: "vite-plugin-generate-bash-script",
    apply: "build",

    configResolved(resolvedConfig) {
      config = resolvedConfig;
      targetDir = path.resolve(resolvedConfig.root, "scripts");

      if (!targetDir) {
        throw new Error(
          "Please set outputPath, so we can know where to place the bash script file",
        );
      }

      // create the targetDir if it does not exist
      if (!fs.existsSync(targetDir)) {
        fs.mkdirSync(targetDir, { recursive: true });
      }
    },
    closeBundle() {
      if (config.command === "serve") {
        return;
      }

      const script = `#!/bin/bash
set -e
set -o pipefail

# This script is generated by @hitachivantara/app-shell-vite-plugin.
# Do not edit this file directly.

# This script will read the app-shell.config.json file and generate the importmap.

${
  externalImportMap
    ? "# The script will generate the importmap.js file."
    : "# The importmap will be inlined in the index.html file, by replacing the %%APPSHELL_IMPORTMAP%% placeholder."
}
${
  inlineConfig
    ? "# The config file will be inlined in the index.html file, by replacing the %%APPSHELL_CONFIG%% placeholder."
    : "# The config will be saved as app-shell.config.json."
}

# Check if the index.html file exists in the current directory, otherwise exit:
if [ ! -f index.html ]; then
  echo "index.html file not found. Are you running this script in the correct directory?" >&2
  exit 1
fi

CONFIG_FILE=\${1:-app-shell.config.json}

# Check if the config file exists, otherwise exit:
if [ ! -f "\${CONFIG_FILE}" ]; then
  echo "Config file not found: \${CONFIG_FILE}" >&2
  exit 1
fi

SCRIPT_DIR="$(cd "$(dirname "\${BASH_SOURCE[0]}")" && pwd)"
INDEX_HTML_ORIGINAL="\${SCRIPT_DIR}/index.html.original"

# If the index.html doesn't contain any %%APPSHELL_*%% placeholders, copy the index.html.original at the script location:
if ! grep -q "%%APPSHELL_" index.html; then
  if [ -f "\${INDEX_HTML_ORIGINAL}" ]; then
    cp "\${INDEX_HTML_ORIGINAL}" index.html
  fi
else
  # Backup the index.html file to index.html.original, in the current script folder:
  cp index.html "\${INDEX_HTML_ORIGINAL}"
fi

# Reading the app-shell.config.json file:
CONFIG=$(cat "\${CONFIG_FILE}")

# Getting the title from the config "name" property:
TITLE=$(echo "\${CONFIG}" | jq -r '.name')
if [ -z "\${TITLE}" ] || [ "\${TITLE}" = "null" ] || [ "\${TITLE}" = "undefined" ]; then
  TITLE="Hitachi Vantara"
fi

# Replacing the title placeholder in the index.html file:
sed -i.bak "s/%%APPSHELL_TITLE%%/\${TITLE//\\//\\\\/}/g" index.html && rm index.html.bak

# Getting the baseUrl from the config "baseUrl" property:
SELF_BASEURL=$(echo "\${CONFIG}" | jq -r '.baseUrl')
if [ -z "\${SELF_BASEURL}" ] || [ "\${SELF_BASEURL}" = "null" ] || [ "\${SELF_BASEURL}" = "undefined" ]; then
  SELF_BASEURL="/"
fi

# Replace the base placeholder in the index.html file:
sed -i.bak "s/%%APPSHELL_BASE%%/\${SELF_BASEURL//\\//\\\\/}/g" index.html && rm index.html.bak

# Generating the importmap:
# for each app, we add a mapping from the app id to the app url
IMPORTMAP="{\\"imports\\":{${SHARED_DEPENDENCIES.map(
        ({ moduleId, bundle }) =>
          `\\"${moduleId}\\":\\"./bundles/${bundle}\\",`,
      ).join("")}"
while IFS= read -r line; do
  id=$(echo "$line" | jq -r '.key')
  baseUrl=$(echo "$line" | jq -r '.value')
  IMPORTMAP="\${IMPORTMAP}\\"\${id}/\\":\\"\${baseUrl}\\","
done < <(echo "\${CONFIG}" | jq -c '.apps | to_entries[]')
IMPORTMAP="\${IMPORTMAP%?},  ${getExtraDependenciesString()} }}"

${
  externalImportMap
    ? `# Generating the importmap.js file:
echo "const im = document.createElement('script'); im.type = 'importmap'; im.textContent = \\\`\${IMPORTMAP}\\\`; document.currentScript.after(im);" >importmap.js`
    : `# Inlining the importmap in the index.html file:
sed -i.bak "s/%%APPSHELL_IMPORTMAP%%/\${IMPORTMAP//\\//\\\\/}/g" index.html && rm index.html.bak`
}

${
  inlineConfig
    ? `# Inlining the config in the index.html file:
CONFIG=$(echo "\${CONFIG}" | tr -d '\\n')
sed -i.bak "s/%%APPSHELL_CONFIG%%/\${CONFIG//\\//\\\\/}/g" index.html && rm index.html.bak

# Removing the config file, just in case:
rm -f app-shell.config.json`
    : `if [ "\${CONFIG_FILE}" != "app-shell.config.json" ]; then
  echo "\${CONFIG}" >app-shell.config.json
fi`
}
`;

      fs.writeFileSync(path.join(targetDir!, "app-shell.sh"), script, {
        encoding: "utf-8",
      });
    },
  };
}
