// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ToggleButton should render correctly 1`] = `
Array [
  <WithStyles(ToggleButton)
    aria-label="Favorite"
    defaultSelected={true}
    notSelectedIcon={<Favorite />}
    selectedIcon={<FavoriteSelected />}
  >
    <ToggleButton
      aria-label="Favorite"
      classes={Object {}}
      defaultSelected={true}
      notSelectedIcon={<Favorite />}
      selectedIcon={<FavoriteSelected />}
    >
      <WithStyles(HvButton)
        aria-label="Favorite"
        aria-pressed={true}
        classes={Object {}}
        icon={true}
        onClick={[Function]}
      >
        <HvButton
          aria-label="Favorite"
          aria-pressed={true}
          classes={
            Object {
              "focusVisible": "HvButton-focusVisible",
              "ghost": "HvButton-ghost",
              "ghostDisabled": "HvButton-ghostDisabled",
              "ghostSVG": "HvButton-ghostSVG",
              "icon": "HvButton-icon",
              "iconSVG": "HvButton-iconSVG",
              "primary": "HvButton-primary",
              "primaryDisabled": "HvButton-primaryDisabled",
              "primarySVG": "HvButton-primarySVG",
              "root": "HvButton-root",
              "secondary": "HvButton-secondary",
              "secondaryDisabled": "HvButton-secondaryDisabled",
              "secondarySVG": "HvButton-secondarySVG",
              "semantic": "HvButton-semantic",
              "semanticDisabled": "HvButton-semanticDisabled",
              "semanticSVG": "HvButton-semanticSVG",
              "startIcon": "HvButton-startIcon",
            }
          }
          icon={true}
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Favorite"
            aria-pressed={true}
            className="HvButton-icon HvButton-ghostSVG"
            classes={
              Object {
                "containedPrimary": "HvButton-primary",
                "disabled": "HvButton-ghostDisabled",
                "outlinedPrimary": "HvButton-secondary",
                "root": "HvButton-root",
                "startIcon": "HvButton-startIcon",
                "textPrimary": "HvButton-ghost",
              }
            }
            color="primary"
            disableRipple={true}
            focusVisibleClassName="HvButton-focusVisible"
            onClick={[Function]}
            variant="text"
          >
            <ForwardRef(Button)
              aria-label="Favorite"
              aria-pressed={true}
              className="HvButton-icon HvButton-ghostSVG"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled HvButton-ghostDisabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root HvButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon HvButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disableRipple={true}
              focusVisibleClassName="HvButton-focusVisible"
              onClick={[Function]}
              variant="text"
            >
              <WithStyles(ForwardRef(ButtonBase))
                aria-label="Favorite"
                aria-pressed={true}
                className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                component="button"
                disableRipple={true}
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  aria-label="Favorite"
                  aria-pressed={true}
                  className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disableRipple={true}
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    aria-label="Favorite"
                    aria-pressed={true}
                    className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      <FavoriteSelected>
                        <HvIconBase
                          iconSize="S"
                          name="FavoriteSelected"
                        >
                          <div
                            className="HvIconBase-root HvIconBase-s"
                            name="FavoriteSelected"
                          >
                            <svg
                              focusable={false}
                              height={16}
                              viewBox="0 0 16 16"
                              width={16}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                className="color0"
                                d="M7.96825 12.24129l4.375 2.625-.875-5.25 3.5-3.5-4.624-.639-2.376-4.611-2.37 4.611-4.63.639 3.5 3.5-.87 5.25z"
                                fill="#414141"
                              />
                              <path
                                className="color0"
                                d="M2.96825 15.86629l.998-6.03421-3.998-4.0102 5.32639-.73736L7.96925-.13371l2.67857 5.21823 5.32043.73836-3.997 4.0092 1.003 6.03321-5.005-3.01213zm5.001-4.1734l3.67063 2.21211-.73313-4.4152 2.94742-2.9564L10 6 7.96925 2.04155 5.94147 6l-3.86012.53436 2.94643 2.95541-.72917 4.41423z"
                                fill="#414141"
                              />
                            </svg>
                          </div>
                        </HvIconBase>
                      </FavoriteSelected>
                    </span>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </HvButton>
      </WithStyles(HvButton)>
    </ToggleButton>
  </WithStyles(ToggleButton)>,
  <WithStyles(ToggleButton)
    aria-label="Backwards"
    notSelectedIcon={<BackwardsEmpty />}
    selectedIcon={<BackwardsSelected />}
  >
    <ToggleButton
      aria-label="Backwards"
      classes={Object {}}
      notSelectedIcon={<BackwardsEmpty />}
      selectedIcon={<BackwardsSelected />}
    >
      <WithStyles(HvButton)
        aria-label="Backwards"
        aria-pressed={false}
        classes={Object {}}
        icon={true}
        onClick={[Function]}
      >
        <HvButton
          aria-label="Backwards"
          aria-pressed={false}
          classes={
            Object {
              "focusVisible": "HvButton-focusVisible",
              "ghost": "HvButton-ghost",
              "ghostDisabled": "HvButton-ghostDisabled",
              "ghostSVG": "HvButton-ghostSVG",
              "icon": "HvButton-icon",
              "iconSVG": "HvButton-iconSVG",
              "primary": "HvButton-primary",
              "primaryDisabled": "HvButton-primaryDisabled",
              "primarySVG": "HvButton-primarySVG",
              "root": "HvButton-root",
              "secondary": "HvButton-secondary",
              "secondaryDisabled": "HvButton-secondaryDisabled",
              "secondarySVG": "HvButton-secondarySVG",
              "semantic": "HvButton-semantic",
              "semanticDisabled": "HvButton-semanticDisabled",
              "semanticSVG": "HvButton-semanticSVG",
              "startIcon": "HvButton-startIcon",
            }
          }
          icon={true}
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Backwards"
            aria-pressed={false}
            className="HvButton-icon HvButton-ghostSVG"
            classes={
              Object {
                "containedPrimary": "HvButton-primary",
                "disabled": "HvButton-ghostDisabled",
                "outlinedPrimary": "HvButton-secondary",
                "root": "HvButton-root",
                "startIcon": "HvButton-startIcon",
                "textPrimary": "HvButton-ghost",
              }
            }
            color="primary"
            disableRipple={true}
            focusVisibleClassName="HvButton-focusVisible"
            onClick={[Function]}
            variant="text"
          >
            <ForwardRef(Button)
              aria-label="Backwards"
              aria-pressed={false}
              className="HvButton-icon HvButton-ghostSVG"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled HvButton-ghostDisabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root HvButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon HvButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disableRipple={true}
              focusVisibleClassName="HvButton-focusVisible"
              onClick={[Function]}
              variant="text"
            >
              <WithStyles(ForwardRef(ButtonBase))
                aria-label="Backwards"
                aria-pressed={false}
                className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                component="button"
                disableRipple={true}
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  aria-label="Backwards"
                  aria-pressed={false}
                  className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disableRipple={true}
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    aria-label="Backwards"
                    aria-pressed={false}
                    className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      <BackwardsEmpty>
                        <HvIconBase
                          iconSize="S"
                          name="BackwardsEmpty"
                        >
                          <div
                            className="HvIconBase-root HvIconBase-s"
                            name="BackwardsEmpty"
                          >
                            <svg
                              focusable={false}
                              height={16}
                              viewBox="0 0 16 16"
                              width={16}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                className="color0"
                                d="M11 2.414v11.172L5.414 8 11 2.414M12 0L4 8l8 8z"
                                fill="#414141"
                              />
                              <path
                                className="color0"
                                d="M11 2.414v11.172L5.414 8 11 2.414M12 0L4 8l8 8z"
                                fill="#414141"
                              />
                            </svg>
                          </div>
                        </HvIconBase>
                      </BackwardsEmpty>
                    </span>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </HvButton>
      </WithStyles(HvButton)>
    </ToggleButton>
  </WithStyles(ToggleButton)>,
  <WithStyles(ToggleButton)
    aria-label="Up"
    notSelectedIcon={<UpEmpty />}
    selectedIcon={<UpSelected />}
  >
    <ToggleButton
      aria-label="Up"
      classes={Object {}}
      notSelectedIcon={<UpEmpty />}
      selectedIcon={<UpSelected />}
    >
      <WithStyles(HvButton)
        aria-label="Up"
        aria-pressed={false}
        classes={Object {}}
        icon={true}
        onClick={[Function]}
      >
        <HvButton
          aria-label="Up"
          aria-pressed={false}
          classes={
            Object {
              "focusVisible": "HvButton-focusVisible",
              "ghost": "HvButton-ghost",
              "ghostDisabled": "HvButton-ghostDisabled",
              "ghostSVG": "HvButton-ghostSVG",
              "icon": "HvButton-icon",
              "iconSVG": "HvButton-iconSVG",
              "primary": "HvButton-primary",
              "primaryDisabled": "HvButton-primaryDisabled",
              "primarySVG": "HvButton-primarySVG",
              "root": "HvButton-root",
              "secondary": "HvButton-secondary",
              "secondaryDisabled": "HvButton-secondaryDisabled",
              "secondarySVG": "HvButton-secondarySVG",
              "semantic": "HvButton-semantic",
              "semanticDisabled": "HvButton-semanticDisabled",
              "semanticSVG": "HvButton-semanticSVG",
              "startIcon": "HvButton-startIcon",
            }
          }
          icon={true}
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Up"
            aria-pressed={false}
            className="HvButton-icon HvButton-ghostSVG"
            classes={
              Object {
                "containedPrimary": "HvButton-primary",
                "disabled": "HvButton-ghostDisabled",
                "outlinedPrimary": "HvButton-secondary",
                "root": "HvButton-root",
                "startIcon": "HvButton-startIcon",
                "textPrimary": "HvButton-ghost",
              }
            }
            color="primary"
            disableRipple={true}
            focusVisibleClassName="HvButton-focusVisible"
            onClick={[Function]}
            variant="text"
          >
            <ForwardRef(Button)
              aria-label="Up"
              aria-pressed={false}
              className="HvButton-icon HvButton-ghostSVG"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled HvButton-ghostDisabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root HvButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon HvButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disableRipple={true}
              focusVisibleClassName="HvButton-focusVisible"
              onClick={[Function]}
              variant="text"
            >
              <WithStyles(ForwardRef(ButtonBase))
                aria-label="Up"
                aria-pressed={false}
                className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                component="button"
                disableRipple={true}
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  aria-label="Up"
                  aria-pressed={false}
                  className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disableRipple={true}
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    aria-label="Up"
                    aria-pressed={false}
                    className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      <UpEmpty>
                        <HvIconBase
                          iconSize="S"
                          name="UpEmpty"
                        >
                          <div
                            className="HvIconBase-root HvIconBase-s"
                            name="UpEmpty"
                          >
                            <svg
                              focusable={false}
                              height={16}
                              viewBox="0 0 16 16"
                              width={16}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                className="color0"
                                d="M2.414 11h11.172L8 5.414 2.414 11M0 12l8-8 8 8z"
                                fill="#414141"
                              />
                            </svg>
                          </div>
                        </HvIconBase>
                      </UpEmpty>
                    </span>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </HvButton>
      </WithStyles(HvButton)>
    </ToggleButton>
  </WithStyles(ToggleButton)>,
  <WithStyles(ToggleButton)
    aria-label="Down"
    disabled={true}
    notSelectedIcon={<DownEmpty />}
    selectedIcon={<DownSelected />}
  >
    <ToggleButton
      aria-label="Down"
      classes={Object {}}
      disabled={true}
      notSelectedIcon={<DownEmpty />}
      selectedIcon={<DownSelected />}
    >
      <WithStyles(HvButton)
        aria-label="Down"
        aria-pressed={false}
        classes={Object {}}
        disabled={true}
        icon={true}
        onClick={[Function]}
      >
        <HvButton
          aria-label="Down"
          aria-pressed={false}
          classes={
            Object {
              "focusVisible": "HvButton-focusVisible",
              "ghost": "HvButton-ghost",
              "ghostDisabled": "HvButton-ghostDisabled",
              "ghostSVG": "HvButton-ghostSVG",
              "icon": "HvButton-icon",
              "iconSVG": "HvButton-iconSVG",
              "primary": "HvButton-primary",
              "primaryDisabled": "HvButton-primaryDisabled",
              "primarySVG": "HvButton-primarySVG",
              "root": "HvButton-root",
              "secondary": "HvButton-secondary",
              "secondaryDisabled": "HvButton-secondaryDisabled",
              "secondarySVG": "HvButton-secondarySVG",
              "semantic": "HvButton-semantic",
              "semanticDisabled": "HvButton-semanticDisabled",
              "semanticSVG": "HvButton-semanticSVG",
              "startIcon": "HvButton-startIcon",
            }
          }
          disabled={true}
          icon={true}
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Down"
            aria-pressed={false}
            className="HvButton-icon HvButton-ghostSVG"
            classes={
              Object {
                "containedPrimary": "HvButton-primary",
                "disabled": "HvButton-ghostDisabled",
                "outlinedPrimary": "HvButton-secondary",
                "root": "HvButton-root",
                "startIcon": "HvButton-startIcon",
                "textPrimary": "HvButton-ghost",
              }
            }
            color="primary"
            disableRipple={true}
            disabled={true}
            focusVisibleClassName="HvButton-focusVisible"
            onClick={[Function]}
            variant="text"
          >
            <ForwardRef(Button)
              aria-label="Down"
              aria-pressed={false}
              className="HvButton-icon HvButton-ghostSVG"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled HvButton-ghostDisabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root HvButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon HvButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disableRipple={true}
              disabled={true}
              focusVisibleClassName="HvButton-focusVisible"
              onClick={[Function]}
              variant="text"
            >
              <WithStyles(ForwardRef(ButtonBase))
                aria-label="Down"
                aria-pressed={false}
                className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                component="button"
                disableRipple={true}
                disabled={true}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  aria-label="Down"
                  aria-pressed={false}
                  className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disableRipple={true}
                  disabled={true}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    aria-label="Down"
                    aria-pressed={false}
                    className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled Mui-disabled"
                    disabled={true}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={-1}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      <DownEmpty>
                        <HvIconBase
                          iconSize="S"
                          name="DownEmpty"
                        >
                          <div
                            className="HvIconBase-root HvIconBase-s"
                            name="DownEmpty"
                          >
                            <svg
                              focusable={false}
                              height={16}
                              viewBox="0 0 16 16"
                              width={16}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                className="color0"
                                d="M13.586 5H2.414L8 10.586 13.586 5M16 4l-8 8-8-8z"
                                fill="#414141"
                              />
                            </svg>
                          </div>
                        </HvIconBase>
                      </DownEmpty>
                    </span>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </HvButton>
      </WithStyles(HvButton)>
    </ToggleButton>
  </WithStyles(ToggleButton)>,
  <WithStyles(ToggleButton)
    aria-label="Forward"
    notSelectedIcon={<ForwardsEmpty />}
    selectedIcon={<ForwardsSelected />}
  >
    <ToggleButton
      aria-label="Forward"
      classes={Object {}}
      notSelectedIcon={<ForwardsEmpty />}
      selectedIcon={<ForwardsSelected />}
    >
      <WithStyles(HvButton)
        aria-label="Forward"
        aria-pressed={false}
        classes={Object {}}
        icon={true}
        onClick={[Function]}
      >
        <HvButton
          aria-label="Forward"
          aria-pressed={false}
          classes={
            Object {
              "focusVisible": "HvButton-focusVisible",
              "ghost": "HvButton-ghost",
              "ghostDisabled": "HvButton-ghostDisabled",
              "ghostSVG": "HvButton-ghostSVG",
              "icon": "HvButton-icon",
              "iconSVG": "HvButton-iconSVG",
              "primary": "HvButton-primary",
              "primaryDisabled": "HvButton-primaryDisabled",
              "primarySVG": "HvButton-primarySVG",
              "root": "HvButton-root",
              "secondary": "HvButton-secondary",
              "secondaryDisabled": "HvButton-secondaryDisabled",
              "secondarySVG": "HvButton-secondarySVG",
              "semantic": "HvButton-semantic",
              "semanticDisabled": "HvButton-semanticDisabled",
              "semanticSVG": "HvButton-semanticSVG",
              "startIcon": "HvButton-startIcon",
            }
          }
          icon={true}
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Forward"
            aria-pressed={false}
            className="HvButton-icon HvButton-ghostSVG"
            classes={
              Object {
                "containedPrimary": "HvButton-primary",
                "disabled": "HvButton-ghostDisabled",
                "outlinedPrimary": "HvButton-secondary",
                "root": "HvButton-root",
                "startIcon": "HvButton-startIcon",
                "textPrimary": "HvButton-ghost",
              }
            }
            color="primary"
            disableRipple={true}
            focusVisibleClassName="HvButton-focusVisible"
            onClick={[Function]}
            variant="text"
          >
            <ForwardRef(Button)
              aria-label="Forward"
              aria-pressed={false}
              className="HvButton-icon HvButton-ghostSVG"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled HvButton-ghostDisabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root HvButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon HvButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disableRipple={true}
              focusVisibleClassName="HvButton-focusVisible"
              onClick={[Function]}
              variant="text"
            >
              <WithStyles(ForwardRef(ButtonBase))
                aria-label="Forward"
                aria-pressed={false}
                className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                component="button"
                disableRipple={true}
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  aria-label="Forward"
                  aria-pressed={false}
                  className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disableRipple={true}
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    aria-label="Forward"
                    aria-pressed={false}
                    className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      <ForwardsEmpty>
                        <HvIconBase
                          iconSize="S"
                          name="ForwardsEmpty"
                        >
                          <div
                            className="HvIconBase-root HvIconBase-s"
                            name="ForwardsEmpty"
                          >
                            <svg
                              focusable={false}
                              height={16}
                              viewBox="0 0 16 16"
                              width={16}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                className="color0"
                                d="M5 2.414v11.172L10.586 8 5 2.414M4 0l8 8-8 8z"
                                fill="#414141"
                              />
                            </svg>
                          </div>
                        </HvIconBase>
                      </ForwardsEmpty>
                    </span>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </HvButton>
      </WithStyles(HvButton)>
    </ToggleButton>
  </WithStyles(ToggleButton)>,
  <WithStyles(ToggleButton)
    aria-label="Like"
    notSelectedIcon={<Like />}
    selectedIcon={<LikeSelected />}
  >
    <ToggleButton
      aria-label="Like"
      classes={Object {}}
      notSelectedIcon={<Like />}
      selectedIcon={<LikeSelected />}
    >
      <WithStyles(HvButton)
        aria-label="Like"
        aria-pressed={false}
        classes={Object {}}
        icon={true}
        onClick={[Function]}
      >
        <HvButton
          aria-label="Like"
          aria-pressed={false}
          classes={
            Object {
              "focusVisible": "HvButton-focusVisible",
              "ghost": "HvButton-ghost",
              "ghostDisabled": "HvButton-ghostDisabled",
              "ghostSVG": "HvButton-ghostSVG",
              "icon": "HvButton-icon",
              "iconSVG": "HvButton-iconSVG",
              "primary": "HvButton-primary",
              "primaryDisabled": "HvButton-primaryDisabled",
              "primarySVG": "HvButton-primarySVG",
              "root": "HvButton-root",
              "secondary": "HvButton-secondary",
              "secondaryDisabled": "HvButton-secondaryDisabled",
              "secondarySVG": "HvButton-secondarySVG",
              "semantic": "HvButton-semantic",
              "semanticDisabled": "HvButton-semanticDisabled",
              "semanticSVG": "HvButton-semanticSVG",
              "startIcon": "HvButton-startIcon",
            }
          }
          icon={true}
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Like"
            aria-pressed={false}
            className="HvButton-icon HvButton-ghostSVG"
            classes={
              Object {
                "containedPrimary": "HvButton-primary",
                "disabled": "HvButton-ghostDisabled",
                "outlinedPrimary": "HvButton-secondary",
                "root": "HvButton-root",
                "startIcon": "HvButton-startIcon",
                "textPrimary": "HvButton-ghost",
              }
            }
            color="primary"
            disableRipple={true}
            focusVisibleClassName="HvButton-focusVisible"
            onClick={[Function]}
            variant="text"
          >
            <ForwardRef(Button)
              aria-label="Like"
              aria-pressed={false}
              className="HvButton-icon HvButton-ghostSVG"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled HvButton-ghostDisabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root HvButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon HvButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disableRipple={true}
              focusVisibleClassName="HvButton-focusVisible"
              onClick={[Function]}
              variant="text"
            >
              <WithStyles(ForwardRef(ButtonBase))
                aria-label="Like"
                aria-pressed={false}
                className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                component="button"
                disableRipple={true}
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  aria-label="Like"
                  aria-pressed={false}
                  className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disableRipple={true}
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    aria-label="Like"
                    aria-pressed={false}
                    className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      <Like>
                        <HvIconBase
                          iconSize="S"
                          name="Like"
                        >
                          <div
                            className="HvIconBase-root HvIconBase-s"
                            name="Like"
                          >
                            <svg
                              focusable={false}
                              height={16}
                              viewBox="0 0 16 16"
                              width={16}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                className="color0"
                                d="M13.69343 5.0065h-3.663l-.049-2.372c0-2.408-2.588-2.641-3.591-2.641-.241 0-.391.013-.391.013v3.755a3.128 3.128 0 01-2 2.912v-.667h-4v10h4v-.373a5.48109 5.48109 0 001.976.373h5.8c3 0 3.254-2.227 3.254-2.227l.97-6.215a2.49 2.49 0 00-2.306-2.558zm-10.694 10h-2v-8h2zm11.039-1.381v.031a1.549 1.549 0 01-.345.676 2.43 2.43 0 01-1.921.674h-5.8a4.97388 4.97388 0 01-1.3-.184 1.56 1.56 0 01-.573-.285.268.268 0 01-.1-.231v-6.55a5.5399 5.5399 0 001.032-.5 3.963 3.963 0 001.968-3.495v-2.736a3.70009 3.70009 0 011.141.292 1.3 1.3 0 01.841 1.317v.02l.05 2.373.02.979h4.587a1.96111 1.96111 0 01.744.27 1.357 1.357 0 01.617 1.217z"
                                fill="#414141"
                              />
                            </svg>
                          </div>
                        </HvIconBase>
                      </Like>
                    </span>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </HvButton>
      </WithStyles(HvButton)>
    </ToggleButton>
  </WithStyles(ToggleButton)>,
  <WithStyles(ToggleButton)
    aria-label="Dislike"
    notSelectedIcon={<Dislike />}
    selectedIcon={<DislikeSelected />}
  >
    <ToggleButton
      aria-label="Dislike"
      classes={Object {}}
      notSelectedIcon={<Dislike />}
      selectedIcon={<DislikeSelected />}
    >
      <WithStyles(HvButton)
        aria-label="Dislike"
        aria-pressed={false}
        classes={Object {}}
        icon={true}
        onClick={[Function]}
      >
        <HvButton
          aria-label="Dislike"
          aria-pressed={false}
          classes={
            Object {
              "focusVisible": "HvButton-focusVisible",
              "ghost": "HvButton-ghost",
              "ghostDisabled": "HvButton-ghostDisabled",
              "ghostSVG": "HvButton-ghostSVG",
              "icon": "HvButton-icon",
              "iconSVG": "HvButton-iconSVG",
              "primary": "HvButton-primary",
              "primaryDisabled": "HvButton-primaryDisabled",
              "primarySVG": "HvButton-primarySVG",
              "root": "HvButton-root",
              "secondary": "HvButton-secondary",
              "secondaryDisabled": "HvButton-secondaryDisabled",
              "secondarySVG": "HvButton-secondarySVG",
              "semantic": "HvButton-semantic",
              "semanticDisabled": "HvButton-semanticDisabled",
              "semanticSVG": "HvButton-semanticSVG",
              "startIcon": "HvButton-startIcon",
            }
          }
          icon={true}
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Dislike"
            aria-pressed={false}
            className="HvButton-icon HvButton-ghostSVG"
            classes={
              Object {
                "containedPrimary": "HvButton-primary",
                "disabled": "HvButton-ghostDisabled",
                "outlinedPrimary": "HvButton-secondary",
                "root": "HvButton-root",
                "startIcon": "HvButton-startIcon",
                "textPrimary": "HvButton-ghost",
              }
            }
            color="primary"
            disableRipple={true}
            focusVisibleClassName="HvButton-focusVisible"
            onClick={[Function]}
            variant="text"
          >
            <ForwardRef(Button)
              aria-label="Dislike"
              aria-pressed={false}
              className="HvButton-icon HvButton-ghostSVG"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled HvButton-ghostDisabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root HvButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon HvButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disableRipple={true}
              focusVisibleClassName="HvButton-focusVisible"
              onClick={[Function]}
              variant="text"
            >
              <WithStyles(ForwardRef(ButtonBase))
                aria-label="Dislike"
                aria-pressed={false}
                className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                component="button"
                disableRipple={true}
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  aria-label="Dislike"
                  aria-pressed={false}
                  className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disableRipple={true}
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    aria-label="Dislike"
                    aria-pressed={false}
                    className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      <Dislike>
                        <HvIconBase
                          iconSize="S"
                          name="Dislike"
                        >
                          <div
                            className="HvIconBase-root HvIconBase-s"
                            name="Dislike"
                          >
                            <svg
                              focusable={false}
                              height={16}
                              viewBox="0 0 16 16"
                              width={16}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                className="color0"
                                d="M.00057 8.435l.973-6.215s.258-2.227 3.254-2.227h5.8a5.481 5.481 0 011.973.373v-.373h4v10h-4v-.667a3.128 3.128 0 00-2 2.912v3.755s-.15.014-.391.014c-1 0-3.591-.234-3.591-2.642l-.049-2.372h-3.663a2.49 2.49 0 01-2.306-2.558zm13 .558h2v-8h-2zm-12-.486a1.355 1.355 0 00.616 1.216 1.96111 1.96111 0 00.744.27h4.587l.02.979.05 2.373v.02a1.3 1.3 0 00.841 1.317 3.70009 3.70009 0 001.142.292v-2.736a3.963 3.963 0 011.968-3.491 5.54112 5.54112 0 011.032-.504v-6.55a.268.268 0 00-.1-.227 1.56 1.56 0 00-.573-.285 4.9742 4.9742 0 00-1.303-.188h-5.8a2.43 2.43 0 00-1.916.674 1.549 1.549 0 00-.345.676v.031z"
                                fill="#414141"
                              />
                            </svg>
                          </div>
                        </HvIconBase>
                      </Dislike>
                    </span>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </HvButton>
      </WithStyles(HvButton)>
    </ToggleButton>
  </WithStyles(ToggleButton)>,
  <WithStyles(ToggleButton)
    aria-label="Light"
    notSelectedIcon={<LightOff />}
    selectedIcon={<LightOn />}
  >
    <ToggleButton
      aria-label="Light"
      classes={Object {}}
      notSelectedIcon={<LightOff />}
      selectedIcon={<LightOn />}
    >
      <WithStyles(HvButton)
        aria-label="Light"
        aria-pressed={false}
        classes={Object {}}
        icon={true}
        onClick={[Function]}
      >
        <HvButton
          aria-label="Light"
          aria-pressed={false}
          classes={
            Object {
              "focusVisible": "HvButton-focusVisible",
              "ghost": "HvButton-ghost",
              "ghostDisabled": "HvButton-ghostDisabled",
              "ghostSVG": "HvButton-ghostSVG",
              "icon": "HvButton-icon",
              "iconSVG": "HvButton-iconSVG",
              "primary": "HvButton-primary",
              "primaryDisabled": "HvButton-primaryDisabled",
              "primarySVG": "HvButton-primarySVG",
              "root": "HvButton-root",
              "secondary": "HvButton-secondary",
              "secondaryDisabled": "HvButton-secondaryDisabled",
              "secondarySVG": "HvButton-secondarySVG",
              "semantic": "HvButton-semantic",
              "semanticDisabled": "HvButton-semanticDisabled",
              "semanticSVG": "HvButton-semanticSVG",
              "startIcon": "HvButton-startIcon",
            }
          }
          icon={true}
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Light"
            aria-pressed={false}
            className="HvButton-icon HvButton-ghostSVG"
            classes={
              Object {
                "containedPrimary": "HvButton-primary",
                "disabled": "HvButton-ghostDisabled",
                "outlinedPrimary": "HvButton-secondary",
                "root": "HvButton-root",
                "startIcon": "HvButton-startIcon",
                "textPrimary": "HvButton-ghost",
              }
            }
            color="primary"
            disableRipple={true}
            focusVisibleClassName="HvButton-focusVisible"
            onClick={[Function]}
            variant="text"
          >
            <ForwardRef(Button)
              aria-label="Light"
              aria-pressed={false}
              className="HvButton-icon HvButton-ghostSVG"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled HvButton-ghostDisabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root HvButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon HvButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disableRipple={true}
              focusVisibleClassName="HvButton-focusVisible"
              onClick={[Function]}
              variant="text"
            >
              <WithStyles(ForwardRef(ButtonBase))
                aria-label="Light"
                aria-pressed={false}
                className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                component="button"
                disableRipple={true}
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  aria-label="Light"
                  aria-pressed={false}
                  className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disableRipple={true}
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    aria-label="Light"
                    aria-pressed={false}
                    className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      <LightOff>
                        <HvIconBase
                          iconSize="S"
                          name="LightOff"
                        >
                          <div
                            className="HvIconBase-root HvIconBase-s"
                            name="LightOff"
                          >
                            <svg
                              focusable={false}
                              height={16}
                              viewBox="0 0 16 16"
                              width={16}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                className="color0"
                                d="M5 15h6v1H5zm5-2H6v-1.5l-.4-.3a4 4 0 114.8 0l-.4.3V13m1-1a5 5 0 10-6 0v2h6z"
                                fill="#414141"
                              />
                            </svg>
                          </div>
                        </HvIconBase>
                      </LightOff>
                    </span>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </HvButton>
      </WithStyles(HvButton)>
    </ToggleButton>
  </WithStyles(ToggleButton)>,
  <WithStyles(ToggleButton)
    aria-label="Lock"
    notSelectedIcon={<Unlock />}
    selectedIcon={<Lock />}
  >
    <ToggleButton
      aria-label="Lock"
      classes={Object {}}
      notSelectedIcon={<Unlock />}
      selectedIcon={<Lock />}
    >
      <WithStyles(HvButton)
        aria-label="Lock"
        aria-pressed={false}
        classes={Object {}}
        icon={true}
        onClick={[Function]}
      >
        <HvButton
          aria-label="Lock"
          aria-pressed={false}
          classes={
            Object {
              "focusVisible": "HvButton-focusVisible",
              "ghost": "HvButton-ghost",
              "ghostDisabled": "HvButton-ghostDisabled",
              "ghostSVG": "HvButton-ghostSVG",
              "icon": "HvButton-icon",
              "iconSVG": "HvButton-iconSVG",
              "primary": "HvButton-primary",
              "primaryDisabled": "HvButton-primaryDisabled",
              "primarySVG": "HvButton-primarySVG",
              "root": "HvButton-root",
              "secondary": "HvButton-secondary",
              "secondaryDisabled": "HvButton-secondaryDisabled",
              "secondarySVG": "HvButton-secondarySVG",
              "semantic": "HvButton-semantic",
              "semanticDisabled": "HvButton-semanticDisabled",
              "semanticSVG": "HvButton-semanticSVG",
              "startIcon": "HvButton-startIcon",
            }
          }
          icon={true}
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Lock"
            aria-pressed={false}
            className="HvButton-icon HvButton-ghostSVG"
            classes={
              Object {
                "containedPrimary": "HvButton-primary",
                "disabled": "HvButton-ghostDisabled",
                "outlinedPrimary": "HvButton-secondary",
                "root": "HvButton-root",
                "startIcon": "HvButton-startIcon",
                "textPrimary": "HvButton-ghost",
              }
            }
            color="primary"
            disableRipple={true}
            focusVisibleClassName="HvButton-focusVisible"
            onClick={[Function]}
            variant="text"
          >
            <ForwardRef(Button)
              aria-label="Lock"
              aria-pressed={false}
              className="HvButton-icon HvButton-ghostSVG"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled HvButton-ghostDisabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root HvButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon HvButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disableRipple={true}
              focusVisibleClassName="HvButton-focusVisible"
              onClick={[Function]}
              variant="text"
            >
              <WithStyles(ForwardRef(ButtonBase))
                aria-label="Lock"
                aria-pressed={false}
                className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                component="button"
                disableRipple={true}
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  aria-label="Lock"
                  aria-pressed={false}
                  className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disableRipple={true}
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    aria-label="Lock"
                    aria-pressed={false}
                    className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      <Unlock>
                        <HvIconBase
                          iconSize="S"
                          name="Unlock"
                        >
                          <div
                            className="HvIconBase-root HvIconBase-s"
                            name="Unlock"
                          >
                            <svg
                              focusable={false}
                              height={16}
                              viewBox="0 0 16 16"
                              width={16}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                className="color0"
                                d="M8.5 12h-1V8h1zM14 4v12H2V4h2V0h6v1H5v3zm-1 1H3v10h10z"
                                fill="#414141"
                              />
                            </svg>
                          </div>
                        </HvIconBase>
                      </Unlock>
                    </span>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </HvButton>
      </WithStyles(HvButton)>
    </ToggleButton>
  </WithStyles(ToggleButton)>,
]
`;
