// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button should render correctly 1`] = `
<WithStyles(HvButton)>
  <HvButton
    classes={
      Object {
        "ghost": "HvButton-ghost",
        "ghostDisabled": "HvButton-ghostDisabled",
        "ghostSecondary": "HvButton-ghostSecondary",
        "ghostSecondaryDisabled": "HvButton-ghostSecondaryDisabled",
        "primary": "HvButton-primary",
        "primaryDisabled": "HvButton-primaryDisabled",
        "root": "HvButton-root",
        "rootIcon": "HvButton-rootIcon",
        "secondary": "HvButton-secondary",
        "secondaryDisabled": "HvButton-secondaryDisabled",
        "semantic": "HvButton-semantic",
        "semanticDisabled": "HvButton-semanticDisabled",
        "startIcon": "HvButton-startIcon",
      }
    }
  >
    <WithStyles(ForwardRef(Button))
      className=""
      classes={
        Object {
          "containedPrimary": "HvButton-primary",
          "disabled": "HvButton-primaryDisabled",
          "outlinedPrimary": "HvButton-secondary",
          "root": "HvButton-root",
          "startIcon": "HvButton-startIcon",
          "textPrimary": "HvButton-ghost",
        }
      }
      color="primary"
      disableRipple={true}
      onClick={[Function]}
      variant="contained"
    >
      <ForwardRef(Button)
        className=""
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled HvButton-primaryDisabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root HvButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon HvButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary HvButton-ghost",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="primary"
        disableRipple={true}
        onClick={[Function]}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root HvButton-root MuiButton-contained MuiButton-containedPrimary HvButton-primary"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          onClick={[Function]}
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root HvButton-root MuiButton-contained MuiButton-containedPrimary HvButton-primary"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            onClick={[Function]}
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-contained MuiButton-containedPrimary HvButton-primary"
              disabled={false}
              onBlur={[Function]}
              onClick={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                Click!
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </HvButton>
</WithStyles(HvButton)>
`;
