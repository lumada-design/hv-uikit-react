import { isEqual, uniqueId } from "../../utils/helpers";
import {
  HvQueryBuilderQueryGroup,
  HvQueryBuilderQueryRule,
  Query,
} from "../types";

export const isBigList = (values: unknown[]) =>
  values != null && values?.length > 10;

const ID_PREFIX = "@hv_";
const createId = () => uniqueId(ID_PREFIX);

export const emptyRule = () => ({
  id: createId(),
});

export const emptyGroup = (createEmptyRule = false) => ({
  id: createId(),
  combinator: "and",
  rules: createEmptyRule ? [emptyRule()] : [],
});

export const clearNodeIds = (
  original: HvQueryBuilderQueryGroup | HvQueryBuilderQueryRule,
  full: boolean = false
) => {
  const rule = { ...original };

  if ((!full && rule.id?.toString().startsWith(ID_PREFIX)) || full) {
    delete rule.id;
  }

  if ("rules" in rule) {
    rule.rules = rule.rules.map((r) => clearNodeIds(r, full));
  }

  return rule;
};

const isQueryGroup = (
  value: HvQueryBuilderQueryGroup | HvQueryBuilderQueryRule
): value is HvQueryBuilderQueryGroup => "rules" in value;

export const setNodeIds = (
  query: HvQueryBuilderQueryGroup | HvQueryBuilderQueryRule,
  prevQuery?: HvQueryBuilderQueryGroup | HvQueryBuilderQueryRule
): Query => {
  // Use already existing autogenerated id when possible
  if (!query.id) {
    query.id =
      prevQuery &&
      prevQuery?.id &&
      isEqual(
        clearNodeIds(structuredClone(query)),
        clearNodeIds(structuredClone(prevQuery))
      )
        ? prevQuery.id
        : createId();
  }

  if (isQueryGroup(query)) {
    query.rules = query.rules.map((item, idx) =>
      setNodeIds(
        item,
        prevQuery && isQueryGroup(prevQuery) ? prevQuery.rules[idx] : undefined
      )
    );
  }

  return query as Query;
};

export const findNodeById = (
  id: React.Key,
  node: HvQueryBuilderQueryGroup | HvQueryBuilderQueryRule
) => {
  if (node.id === id) {
    return node;
  }
  if ("rules" in node) {
    for (let i = 0; i < node.rules.length; ++i) {
      const rule = node.rules[i];

      const found = findNodeById(id, rule);
      if (found) {
        return found;
      }
    }
  }

  return null;
};

export const findParentById = (
  id: React.Key,
  node: HvQueryBuilderQueryGroup | HvQueryBuilderQueryRule,
  parent?: HvQueryBuilderQueryGroup
) => {
  if (node.id === id) {
    return parent ?? null;
  }

  if ("rules" in node) {
    const group = node;

    for (let i = 0; i < group.rules.length; ++i) {
      const rule = group.rules[i];

      const found = findParentById(id, rule, group);
      if (found) {
        return found;
      }
    }
  }

  return null;
};
