// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Footer should render the actions and the dropdown accordingly 1`] = `
<WithStyles(ActionsGeneric)
  actions={
    Array [
      Object {
        "id": "view",
        "label": "View",
      },
      Object {
        "id": "delete",
        "label": "Delete",
      },
      Object {
        "disabled": true,
        "id": "update",
        "label": "Update",
      },
    ]
  }
  id="id"
  maxVisibleActions={1}
>
  <ActionsGeneric
    actions={
      Array [
        Object {
          "id": "view",
          "label": "View",
        },
        Object {
          "id": "delete",
          "label": "Delete",
        },
        Object {
          "disabled": true,
          "id": "update",
          "label": "Update",
        },
      ]
    }
    classes={
      Object {
        "actionContainer": "HvActionsGeneric-actionContainer",
        "button": "HvActionsGeneric-button",
        "dropDownMenu": "HvActionsGeneric-dropDownMenu",
        "dropDownMenuButton": "HvActionsGeneric-dropDownMenuButton",
        "dropDownMenuButtonSelected": "HvActionsGeneric-dropDownMenuButtonSelected",
        "root": "HvActionsGeneric-root",
      }
    }
    id="id"
    maxVisibleActions={1}
  >
    <div
      className="HvActionsGeneric-root HvActionsGeneric-actionContainer"
    >
      <WithStyles(HvButton)
        category="ghost"
        className="HvActionsGeneric-button"
        disabled={false}
        id="view"
        key="id-0-action-view"
        onClick={[Function]}
      >
        <HvButton
          category="ghost"
          className="HvActionsGeneric-button"
          classes={
            Object {
              "focusVisible": "HvButton-focusVisible",
              "ghost": "HvButton-ghost",
              "ghostDisabled": "HvButton-ghostDisabled",
              "ghostSVG": "HvButton-ghostSVG",
              "icon": "HvButton-icon",
              "iconSVG": "HvButton-iconSVG",
              "primary": "HvButton-primary",
              "primaryDisabled": "HvButton-primaryDisabled",
              "primarySVG": "HvButton-primarySVG",
              "root": "HvButton-root",
              "secondary": "HvButton-secondary",
              "secondaryDisabled": "HvButton-secondaryDisabled",
              "secondarySVG": "HvButton-secondarySVG",
              "semantic": "HvButton-semantic",
              "semanticDisabled": "HvButton-semanticDisabled",
              "semanticSVG": "HvButton-semanticSVG",
              "startIcon": "HvButton-startIcon",
            }
          }
          disabled={false}
          id="view"
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(Button))
            className="HvActionsGeneric-button HvButton-ghostSVG"
            classes={
              Object {
                "containedPrimary": "HvButton-primary",
                "disabled": "HvButton-ghostDisabled",
                "outlinedPrimary": "HvButton-secondary",
                "root": "HvButton-root",
                "startIcon": "HvButton-startIcon",
                "textPrimary": "HvButton-ghost",
              }
            }
            color="primary"
            disableRipple={true}
            disabled={false}
            focusVisibleClassName="HvButton-focusVisible"
            id="view"
            onClick={[Function]}
            variant="text"
          >
            <ForwardRef(Button)
              className="HvActionsGeneric-button HvButton-ghostSVG"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled HvButton-ghostDisabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root HvButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon HvButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disableRipple={true}
              disabled={false}
              focusVisibleClassName="HvButton-focusVisible"
              id="view"
              onClick={[Function]}
              variant="text"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                component="button"
                disableRipple={true}
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                id="view"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disableRipple={true}
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                  id="view"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                    disabled={false}
                    id="view"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      View
                    </span>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </HvButton>
      </WithStyles(HvButton)>
      <WithStyles(WithId)
        category="ghost"
        classes={
          Object {
            "icon": "HvActionsGeneric-dropDownMenuButton",
            "iconSelected": "HvActionsGeneric-dropDownMenuButtonSelected",
            "root": "HvActionsGeneric-dropDownMenu",
          }
        }
        dataList={
          Array [
            Object {
              "id": "delete",
              "label": "Delete",
            },
            Object {
              "disabled": true,
              "id": "update",
              "label": "Update",
            },
          ]
        }
        disablePortal={false}
        disabled={false}
        icon={<MoreOptionsVertical />}
        id="id-menu"
        keepOpened={false}
        onClick={[Function]}
        placement="left"
      >
        <WithId
          category="ghost"
          classes={
            Object {
              "icon": "HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton",
              "iconSelected": "HvDropDownMenu-iconSelected HvActionsGeneric-dropDownMenuButtonSelected",
              "root": "HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
            }
          }
          dataList={
            Array [
              Object {
                "id": "delete",
                "label": "Delete",
              },
              Object {
                "disabled": true,
                "id": "update",
                "label": "Update",
              },
            ]
          }
          disablePortal={false}
          disabled={false}
          icon={<MoreOptionsVertical />}
          id="id-menu"
          keepOpened={false}
          onClick={[Function]}
          placement="left"
        >
          <DropDownMenu
            category="ghost"
            classes={
              Object {
                "icon": "HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton",
                "iconSelected": "HvDropDownMenu-iconSelected HvActionsGeneric-dropDownMenuButtonSelected",
                "root": "HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
              }
            }
            dataList={
              Array [
                Object {
                  "id": "delete",
                  "label": "Delete",
                },
                Object {
                  "disabled": true,
                  "id": "update",
                  "label": "Update",
                },
              ]
            }
            disablePortal={false}
            disabled={false}
            icon={<MoreOptionsVertical />}
            id="id-menu"
            keepOpened={false}
            onClick={[Function]}
            placement="left"
          >
            <WithStyles(WithId)
              classes={
                Object {
                  "root": "HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                }
              }
              component={
                <ForwardRef(WithStyles)
                  aria-label="Dropdown menu"
                  category="ghost"
                  className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                  disabled={false}
                  icon={true}
                  id="id-menu-icon-button"
                >
                  <MoreOptionsVertical />
                </ForwardRef(WithStyles)>
              }
              disablePortal={false}
              disabled={false}
              expanded={false}
              id="id-menu"
              onToggle={[Function]}
              placement="left"
            >
              <WithId
                classes={
                  Object {
                    "arrow": "HvBaseDropdown-arrow",
                    "header": "HvBaseDropdown-header",
                    "headerDisabled": "HvBaseDropdown-headerDisabled",
                    "headerOpen": "HvBaseDropdown-headerOpen",
                    "headerOpenDown": "HvBaseDropdown-headerOpenDown",
                    "headerOpenUp": "HvBaseDropdown-headerOpenUp",
                    "inputExtensionFloatLeft": "HvBaseDropdown-inputExtensionFloatLeft",
                    "inputExtensionFloatRight": "HvBaseDropdown-inputExtensionFloatRight",
                    "inputExtensionLeftPosition": "HvBaseDropdown-inputExtensionLeftPosition",
                    "inputExtensionOpen": "HvBaseDropdown-inputExtensionOpen",
                    "inputExtensionOpenShadow": "HvBaseDropdown-inputExtensionOpenShadow",
                    "panel": "HvBaseDropdown-panel",
                    "root": "HvBaseDropdown-root HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                    "selection": "HvBaseDropdown-selection",
                    "selectionDisabled": "HvBaseDropdown-selectionDisabled",
                    "truncate": "HvBaseDropdown-truncate",
                  }
                }
                component={
                  <ForwardRef(WithStyles)
                    aria-label="Dropdown menu"
                    category="ghost"
                    className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                    disabled={false}
                    icon={true}
                    id="id-menu-icon-button"
                  >
                    <MoreOptionsVertical />
                  </ForwardRef(WithStyles)>
                }
                disablePortal={false}
                disabled={false}
                expanded={false}
                id="id-menu"
                onToggle={[Function]}
                placement="left"
              >
                <HvBaseDropdown
                  classes={
                    Object {
                      "arrow": "HvBaseDropdown-arrow",
                      "header": "HvBaseDropdown-header",
                      "headerDisabled": "HvBaseDropdown-headerDisabled",
                      "headerOpen": "HvBaseDropdown-headerOpen",
                      "headerOpenDown": "HvBaseDropdown-headerOpenDown",
                      "headerOpenUp": "HvBaseDropdown-headerOpenUp",
                      "inputExtensionFloatLeft": "HvBaseDropdown-inputExtensionFloatLeft",
                      "inputExtensionFloatRight": "HvBaseDropdown-inputExtensionFloatRight",
                      "inputExtensionLeftPosition": "HvBaseDropdown-inputExtensionLeftPosition",
                      "inputExtensionOpen": "HvBaseDropdown-inputExtensionOpen",
                      "inputExtensionOpenShadow": "HvBaseDropdown-inputExtensionOpenShadow",
                      "panel": "HvBaseDropdown-panel",
                      "root": "HvBaseDropdown-root HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                      "selection": "HvBaseDropdown-selection",
                      "selectionDisabled": "HvBaseDropdown-selectionDisabled",
                      "truncate": "HvBaseDropdown-truncate",
                    }
                  }
                  component={
                    <ForwardRef(WithStyles)
                      aria-label="Dropdown menu"
                      category="ghost"
                      className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                      disabled={false}
                      icon={true}
                      id="id-menu-icon-button"
                    >
                      <MoreOptionsVertical />
                    </ForwardRef(WithStyles)>
                  }
                  disablePortal={false}
                  disabled={false}
                  expanded={false}
                  id="id-menu"
                  onToggle={[Function]}
                  placement="left"
                >
                  <div
                    aria-expanded={false}
                    aria-haspopup="listbox"
                    className="HvBaseDropdown-root HvDropDownMenu-root HvActionsGeneric-dropDownMenu"
                    id="id-menu"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    tabIndex={-1}
                  >
                    <WithStyles(HvButton)
                      aria-label="Dropdown menu"
                      category="ghost"
                      className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                      disabled={false}
                      icon={true}
                      id="id-menu-icon-button"
                    >
                      <HvButton
                        aria-label="Dropdown menu"
                        category="ghost"
                        className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                        classes={
                          Object {
                            "focusVisible": "HvButton-focusVisible",
                            "ghost": "HvButton-ghost",
                            "ghostDisabled": "HvButton-ghostDisabled",
                            "ghostSVG": "HvButton-ghostSVG",
                            "icon": "HvButton-icon",
                            "iconSVG": "HvButton-iconSVG",
                            "primary": "HvButton-primary",
                            "primaryDisabled": "HvButton-primaryDisabled",
                            "primarySVG": "HvButton-primarySVG",
                            "root": "HvButton-root",
                            "secondary": "HvButton-secondary",
                            "secondaryDisabled": "HvButton-secondaryDisabled",
                            "secondarySVG": "HvButton-secondarySVG",
                            "semantic": "HvButton-semantic",
                            "semanticDisabled": "HvButton-semanticDisabled",
                            "semanticSVG": "HvButton-semanticSVG",
                            "startIcon": "HvButton-startIcon",
                          }
                        }
                        disabled={false}
                        icon={true}
                        id="id-menu-icon-button"
                      >
                        <WithStyles(ForwardRef(Button))
                          aria-label="Dropdown menu"
                          className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG"
                          classes={
                            Object {
                              "containedPrimary": "HvButton-primary",
                              "disabled": "HvButton-ghostDisabled",
                              "outlinedPrimary": "HvButton-secondary",
                              "root": "HvButton-root",
                              "startIcon": "HvButton-startIcon",
                              "textPrimary": "HvButton-ghost",
                            }
                          }
                          color="primary"
                          disableRipple={true}
                          disabled={false}
                          focusVisibleClassName="HvButton-focusVisible"
                          id="id-menu-icon-button"
                          variant="text"
                        >
                          <ForwardRef(Button)
                            aria-label="Dropdown menu"
                            className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG"
                            classes={
                              Object {
                                "colorInherit": "MuiButton-colorInherit",
                                "contained": "MuiButton-contained",
                                "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                                "containedSecondary": "MuiButton-containedSecondary",
                                "containedSizeLarge": "MuiButton-containedSizeLarge",
                                "containedSizeSmall": "MuiButton-containedSizeSmall",
                                "disableElevation": "MuiButton-disableElevation",
                                "disabled": "Mui-disabled HvButton-ghostDisabled",
                                "endIcon": "MuiButton-endIcon",
                                "focusVisible": "Mui-focusVisible",
                                "fullWidth": "MuiButton-fullWidth",
                                "iconSizeLarge": "MuiButton-iconSizeLarge",
                                "iconSizeMedium": "MuiButton-iconSizeMedium",
                                "iconSizeSmall": "MuiButton-iconSizeSmall",
                                "label": "MuiButton-label",
                                "outlined": "MuiButton-outlined",
                                "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                                "outlinedSecondary": "MuiButton-outlinedSecondary",
                                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                "root": "MuiButton-root HvButton-root",
                                "sizeLarge": "MuiButton-sizeLarge",
                                "sizeSmall": "MuiButton-sizeSmall",
                                "startIcon": "MuiButton-startIcon HvButton-startIcon",
                                "text": "MuiButton-text",
                                "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                                "textSecondary": "MuiButton-textSecondary",
                                "textSizeLarge": "MuiButton-textSizeLarge",
                                "textSizeSmall": "MuiButton-textSizeSmall",
                              }
                            }
                            color="primary"
                            disableRipple={true}
                            disabled={false}
                            focusVisibleClassName="HvButton-focusVisible"
                            id="id-menu-icon-button"
                            variant="text"
                          >
                            <WithStyles(ForwardRef(ButtonBase))
                              aria-label="Dropdown menu"
                              className="MuiButton-root HvButton-root MuiButton-text HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                              component="button"
                              disableRipple={true}
                              disabled={false}
                              focusRipple={true}
                              focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                              id="id-menu-icon-button"
                              type="button"
                            >
                              <ForwardRef(ButtonBase)
                                aria-label="Dropdown menu"
                                className="MuiButton-root HvButton-root MuiButton-text HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                                classes={
                                  Object {
                                    "disabled": "Mui-disabled",
                                    "focusVisible": "Mui-focusVisible",
                                    "root": "MuiButtonBase-root",
                                  }
                                }
                                component="button"
                                disableRipple={true}
                                disabled={false}
                                focusRipple={true}
                                focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                                id="id-menu-icon-button"
                                type="button"
                              >
                                <button
                                  aria-label="Dropdown menu"
                                  className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                                  disabled={false}
                                  id="id-menu-icon-button"
                                  onBlur={[Function]}
                                  onDragLeave={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                  tabIndex={0}
                                  type="button"
                                >
                                  <span
                                    className="MuiButton-label"
                                  >
                                    <MoreOptionsVertical>
                                      <WithStyles(HvIconBase)
                                        iconSize="S"
                                        name="MoreOptionsVertical"
                                      >
                                        <HvIconBase
                                          classes={
                                            Object {
                                              "l": "HvIconBase-l",
                                              "m": "HvIconBase-m",
                                              "root": "HvIconBase-root",
                                              "s": "HvIconBase-s",
                                              "xs": "HvIconBase-xs",
                                            }
                                          }
                                          iconSize="S"
                                          name="MoreOptionsVertical"
                                        >
                                          <div
                                            className="HvIconBase-root HvIconBase-s"
                                            name="MoreOptionsVertical"
                                          >
                                            <svg
                                              focusable={false}
                                              height={16}
                                              viewBox="0 0 16 16"
                                              width={16}
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                className="color0"
                                                d="M7 6.9h2v2H7zM7 4h2V2H7zm0 10h2v-2H7z"
                                                fill="#414141"
                                              />
                                            </svg>
                                          </div>
                                        </HvIconBase>
                                      </WithStyles(HvIconBase)>
                                    </MoreOptionsVertical>
                                  </span>
                                </button>
                              </ForwardRef(ButtonBase)>
                            </WithStyles(ForwardRef(ButtonBase))>
                          </ForwardRef(Button)>
                        </WithStyles(ForwardRef(Button))>
                      </HvButton>
                    </WithStyles(HvButton)>
                  </div>
                  <ForwardRef(Popper)
                    anchorEl={null}
                    disablePortal={false}
                    open={false}
                    placement="bottom-end"
                    popperOptions={
                      Object {
                        "onCreate": [Function],
                        "onUpdate": [Function],
                      }
                    }
                    style={
                      Object {
                        "zIndex": 1500,
                      }
                    }
                  />
                </HvBaseDropdown>
              </WithId>
            </WithStyles(WithId)>
          </DropDownMenu>
        </WithId>
      </WithStyles(WithId)>
    </div>
  </ActionsGeneric>
</WithStyles(ActionsGeneric)>
`;

exports[`Footer should render the actions and the dropdown accordingly 2`] = `
<WithStyles(ActionsGeneric)
  actions={
    Array [
      Object {
        "id": "view",
        "label": "View",
      },
      Object {
        "id": "delete",
        "label": "Delete",
      },
      Object {
        "disabled": true,
        "id": "update",
        "label": "Update",
      },
    ]
  }
  id="id"
  maxVisibleActions={0}
>
  <ActionsGeneric
    actions={
      Array [
        Object {
          "id": "view",
          "label": "View",
        },
        Object {
          "id": "delete",
          "label": "Delete",
        },
        Object {
          "disabled": true,
          "id": "update",
          "label": "Update",
        },
      ]
    }
    classes={
      Object {
        "actionContainer": "HvActionsGeneric-actionContainer",
        "button": "HvActionsGeneric-button",
        "dropDownMenu": "HvActionsGeneric-dropDownMenu",
        "dropDownMenuButton": "HvActionsGeneric-dropDownMenuButton",
        "dropDownMenuButtonSelected": "HvActionsGeneric-dropDownMenuButtonSelected",
        "root": "HvActionsGeneric-root",
      }
    }
    id="id"
    maxVisibleActions={0}
  >
    <div
      className="HvActionsGeneric-root HvActionsGeneric-actionContainer"
    >
      <WithStyles(WithId)
        category="ghost"
        classes={
          Object {
            "icon": "HvActionsGeneric-dropDownMenuButton",
            "iconSelected": "HvActionsGeneric-dropDownMenuButtonSelected",
            "root": "HvActionsGeneric-dropDownMenu",
          }
        }
        dataList={
          Array [
            Object {
              "id": "view",
              "label": "View",
            },
            Object {
              "id": "delete",
              "label": "Delete",
            },
            Object {
              "disabled": true,
              "id": "update",
              "label": "Update",
            },
          ]
        }
        disablePortal={false}
        disabled={false}
        icon={<MoreOptionsVertical />}
        id="id-menu"
        keepOpened={false}
        onClick={[Function]}
        placement="left"
      >
        <WithId
          category="ghost"
          classes={
            Object {
              "icon": "HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton",
              "iconSelected": "HvDropDownMenu-iconSelected HvActionsGeneric-dropDownMenuButtonSelected",
              "root": "HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
            }
          }
          dataList={
            Array [
              Object {
                "id": "view",
                "label": "View",
              },
              Object {
                "id": "delete",
                "label": "Delete",
              },
              Object {
                "disabled": true,
                "id": "update",
                "label": "Update",
              },
            ]
          }
          disablePortal={false}
          disabled={false}
          icon={<MoreOptionsVertical />}
          id="id-menu"
          keepOpened={false}
          onClick={[Function]}
          placement="left"
        >
          <DropDownMenu
            category="ghost"
            classes={
              Object {
                "icon": "HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton",
                "iconSelected": "HvDropDownMenu-iconSelected HvActionsGeneric-dropDownMenuButtonSelected",
                "root": "HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
              }
            }
            dataList={
              Array [
                Object {
                  "id": "view",
                  "label": "View",
                },
                Object {
                  "id": "delete",
                  "label": "Delete",
                },
                Object {
                  "disabled": true,
                  "id": "update",
                  "label": "Update",
                },
              ]
            }
            disablePortal={false}
            disabled={false}
            icon={<MoreOptionsVertical />}
            id="id-menu"
            keepOpened={false}
            onClick={[Function]}
            placement="left"
          >
            <WithStyles(WithId)
              classes={
                Object {
                  "root": "HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                }
              }
              component={
                <ForwardRef(WithStyles)
                  aria-label="Dropdown menu"
                  category="ghost"
                  className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                  disabled={false}
                  icon={true}
                  id="id-menu-icon-button"
                >
                  <MoreOptionsVertical />
                </ForwardRef(WithStyles)>
              }
              disablePortal={false}
              disabled={false}
              expanded={false}
              id="id-menu"
              onToggle={[Function]}
              placement="left"
            >
              <WithId
                classes={
                  Object {
                    "arrow": "HvBaseDropdown-arrow",
                    "header": "HvBaseDropdown-header",
                    "headerDisabled": "HvBaseDropdown-headerDisabled",
                    "headerOpen": "HvBaseDropdown-headerOpen",
                    "headerOpenDown": "HvBaseDropdown-headerOpenDown",
                    "headerOpenUp": "HvBaseDropdown-headerOpenUp",
                    "inputExtensionFloatLeft": "HvBaseDropdown-inputExtensionFloatLeft",
                    "inputExtensionFloatRight": "HvBaseDropdown-inputExtensionFloatRight",
                    "inputExtensionLeftPosition": "HvBaseDropdown-inputExtensionLeftPosition",
                    "inputExtensionOpen": "HvBaseDropdown-inputExtensionOpen",
                    "inputExtensionOpenShadow": "HvBaseDropdown-inputExtensionOpenShadow",
                    "panel": "HvBaseDropdown-panel",
                    "root": "HvBaseDropdown-root HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                    "selection": "HvBaseDropdown-selection",
                    "selectionDisabled": "HvBaseDropdown-selectionDisabled",
                    "truncate": "HvBaseDropdown-truncate",
                  }
                }
                component={
                  <ForwardRef(WithStyles)
                    aria-label="Dropdown menu"
                    category="ghost"
                    className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                    disabled={false}
                    icon={true}
                    id="id-menu-icon-button"
                  >
                    <MoreOptionsVertical />
                  </ForwardRef(WithStyles)>
                }
                disablePortal={false}
                disabled={false}
                expanded={false}
                id="id-menu"
                onToggle={[Function]}
                placement="left"
              >
                <HvBaseDropdown
                  classes={
                    Object {
                      "arrow": "HvBaseDropdown-arrow",
                      "header": "HvBaseDropdown-header",
                      "headerDisabled": "HvBaseDropdown-headerDisabled",
                      "headerOpen": "HvBaseDropdown-headerOpen",
                      "headerOpenDown": "HvBaseDropdown-headerOpenDown",
                      "headerOpenUp": "HvBaseDropdown-headerOpenUp",
                      "inputExtensionFloatLeft": "HvBaseDropdown-inputExtensionFloatLeft",
                      "inputExtensionFloatRight": "HvBaseDropdown-inputExtensionFloatRight",
                      "inputExtensionLeftPosition": "HvBaseDropdown-inputExtensionLeftPosition",
                      "inputExtensionOpen": "HvBaseDropdown-inputExtensionOpen",
                      "inputExtensionOpenShadow": "HvBaseDropdown-inputExtensionOpenShadow",
                      "panel": "HvBaseDropdown-panel",
                      "root": "HvBaseDropdown-root HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                      "selection": "HvBaseDropdown-selection",
                      "selectionDisabled": "HvBaseDropdown-selectionDisabled",
                      "truncate": "HvBaseDropdown-truncate",
                    }
                  }
                  component={
                    <ForwardRef(WithStyles)
                      aria-label="Dropdown menu"
                      category="ghost"
                      className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                      disabled={false}
                      icon={true}
                      id="id-menu-icon-button"
                    >
                      <MoreOptionsVertical />
                    </ForwardRef(WithStyles)>
                  }
                  disablePortal={false}
                  disabled={false}
                  expanded={false}
                  id="id-menu"
                  onToggle={[Function]}
                  placement="left"
                >
                  <div
                    aria-expanded={false}
                    aria-haspopup="listbox"
                    className="HvBaseDropdown-root HvDropDownMenu-root HvActionsGeneric-dropDownMenu"
                    id="id-menu"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    tabIndex={-1}
                  >
                    <WithStyles(HvButton)
                      aria-label="Dropdown menu"
                      category="ghost"
                      className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                      disabled={false}
                      icon={true}
                      id="id-menu-icon-button"
                    >
                      <HvButton
                        aria-label="Dropdown menu"
                        category="ghost"
                        className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                        classes={
                          Object {
                            "focusVisible": "HvButton-focusVisible",
                            "ghost": "HvButton-ghost",
                            "ghostDisabled": "HvButton-ghostDisabled",
                            "ghostSVG": "HvButton-ghostSVG",
                            "icon": "HvButton-icon",
                            "iconSVG": "HvButton-iconSVG",
                            "primary": "HvButton-primary",
                            "primaryDisabled": "HvButton-primaryDisabled",
                            "primarySVG": "HvButton-primarySVG",
                            "root": "HvButton-root",
                            "secondary": "HvButton-secondary",
                            "secondaryDisabled": "HvButton-secondaryDisabled",
                            "secondarySVG": "HvButton-secondarySVG",
                            "semantic": "HvButton-semantic",
                            "semanticDisabled": "HvButton-semanticDisabled",
                            "semanticSVG": "HvButton-semanticSVG",
                            "startIcon": "HvButton-startIcon",
                          }
                        }
                        disabled={false}
                        icon={true}
                        id="id-menu-icon-button"
                      >
                        <WithStyles(ForwardRef(Button))
                          aria-label="Dropdown menu"
                          className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG"
                          classes={
                            Object {
                              "containedPrimary": "HvButton-primary",
                              "disabled": "HvButton-ghostDisabled",
                              "outlinedPrimary": "HvButton-secondary",
                              "root": "HvButton-root",
                              "startIcon": "HvButton-startIcon",
                              "textPrimary": "HvButton-ghost",
                            }
                          }
                          color="primary"
                          disableRipple={true}
                          disabled={false}
                          focusVisibleClassName="HvButton-focusVisible"
                          id="id-menu-icon-button"
                          variant="text"
                        >
                          <ForwardRef(Button)
                            aria-label="Dropdown menu"
                            className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG"
                            classes={
                              Object {
                                "colorInherit": "MuiButton-colorInherit",
                                "contained": "MuiButton-contained",
                                "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                                "containedSecondary": "MuiButton-containedSecondary",
                                "containedSizeLarge": "MuiButton-containedSizeLarge",
                                "containedSizeSmall": "MuiButton-containedSizeSmall",
                                "disableElevation": "MuiButton-disableElevation",
                                "disabled": "Mui-disabled HvButton-ghostDisabled",
                                "endIcon": "MuiButton-endIcon",
                                "focusVisible": "Mui-focusVisible",
                                "fullWidth": "MuiButton-fullWidth",
                                "iconSizeLarge": "MuiButton-iconSizeLarge",
                                "iconSizeMedium": "MuiButton-iconSizeMedium",
                                "iconSizeSmall": "MuiButton-iconSizeSmall",
                                "label": "MuiButton-label",
                                "outlined": "MuiButton-outlined",
                                "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                                "outlinedSecondary": "MuiButton-outlinedSecondary",
                                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                "root": "MuiButton-root HvButton-root",
                                "sizeLarge": "MuiButton-sizeLarge",
                                "sizeSmall": "MuiButton-sizeSmall",
                                "startIcon": "MuiButton-startIcon HvButton-startIcon",
                                "text": "MuiButton-text",
                                "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                                "textSecondary": "MuiButton-textSecondary",
                                "textSizeLarge": "MuiButton-textSizeLarge",
                                "textSizeSmall": "MuiButton-textSizeSmall",
                              }
                            }
                            color="primary"
                            disableRipple={true}
                            disabled={false}
                            focusVisibleClassName="HvButton-focusVisible"
                            id="id-menu-icon-button"
                            variant="text"
                          >
                            <WithStyles(ForwardRef(ButtonBase))
                              aria-label="Dropdown menu"
                              className="MuiButton-root HvButton-root MuiButton-text HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                              component="button"
                              disableRipple={true}
                              disabled={false}
                              focusRipple={true}
                              focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                              id="id-menu-icon-button"
                              type="button"
                            >
                              <ForwardRef(ButtonBase)
                                aria-label="Dropdown menu"
                                className="MuiButton-root HvButton-root MuiButton-text HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                                classes={
                                  Object {
                                    "disabled": "Mui-disabled",
                                    "focusVisible": "Mui-focusVisible",
                                    "root": "MuiButtonBase-root",
                                  }
                                }
                                component="button"
                                disableRipple={true}
                                disabled={false}
                                focusRipple={true}
                                focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                                id="id-menu-icon-button"
                                type="button"
                              >
                                <button
                                  aria-label="Dropdown menu"
                                  className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                                  disabled={false}
                                  id="id-menu-icon-button"
                                  onBlur={[Function]}
                                  onDragLeave={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                  tabIndex={0}
                                  type="button"
                                >
                                  <span
                                    className="MuiButton-label"
                                  >
                                    <MoreOptionsVertical>
                                      <WithStyles(HvIconBase)
                                        iconSize="S"
                                        name="MoreOptionsVertical"
                                      >
                                        <HvIconBase
                                          classes={
                                            Object {
                                              "l": "HvIconBase-l",
                                              "m": "HvIconBase-m",
                                              "root": "HvIconBase-root",
                                              "s": "HvIconBase-s",
                                              "xs": "HvIconBase-xs",
                                            }
                                          }
                                          iconSize="S"
                                          name="MoreOptionsVertical"
                                        >
                                          <div
                                            className="HvIconBase-root HvIconBase-s"
                                            name="MoreOptionsVertical"
                                          >
                                            <svg
                                              focusable={false}
                                              height={16}
                                              viewBox="0 0 16 16"
                                              width={16}
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                className="color0"
                                                d="M7 6.9h2v2H7zM7 4h2V2H7zm0 10h2v-2H7z"
                                                fill="#414141"
                                              />
                                            </svg>
                                          </div>
                                        </HvIconBase>
                                      </WithStyles(HvIconBase)>
                                    </MoreOptionsVertical>
                                  </span>
                                </button>
                              </ForwardRef(ButtonBase)>
                            </WithStyles(ForwardRef(ButtonBase))>
                          </ForwardRef(Button)>
                        </WithStyles(ForwardRef(Button))>
                      </HvButton>
                    </WithStyles(HvButton)>
                  </div>
                  <ForwardRef(Popper)
                    anchorEl={null}
                    disablePortal={false}
                    open={false}
                    placement="bottom-end"
                    popperOptions={
                      Object {
                        "onCreate": [Function],
                        "onUpdate": [Function],
                      }
                    }
                    style={
                      Object {
                        "zIndex": 1500,
                      }
                    }
                  />
                </HvBaseDropdown>
              </WithId>
            </WithStyles(WithId)>
          </DropDownMenu>
        </WithId>
      </WithStyles(WithId)>
    </div>
  </ActionsGeneric>
</WithStyles(ActionsGeneric)>
`;

exports[`Footer should render the actions and the dropdown accordingly 3`] = `
<WithStyles(ActionsGeneric)
  actions={
    Array [
      Object {
        "id": "view",
        "label": "View",
      },
      Object {
        "id": "delete",
        "label": "Delete",
      },
      Object {
        "disabled": true,
        "id": "update",
        "label": "Update",
      },
    ]
  }
  id="id"
  maxVisibleActions={2}
>
  <ActionsGeneric
    actions={
      Array [
        Object {
          "id": "view",
          "label": "View",
        },
        Object {
          "id": "delete",
          "label": "Delete",
        },
        Object {
          "disabled": true,
          "id": "update",
          "label": "Update",
        },
      ]
    }
    classes={
      Object {
        "actionContainer": "HvActionsGeneric-actionContainer",
        "button": "HvActionsGeneric-button",
        "dropDownMenu": "HvActionsGeneric-dropDownMenu",
        "dropDownMenuButton": "HvActionsGeneric-dropDownMenuButton",
        "dropDownMenuButtonSelected": "HvActionsGeneric-dropDownMenuButtonSelected",
        "root": "HvActionsGeneric-root",
      }
    }
    id="id"
    maxVisibleActions={2}
  >
    <div
      className="HvActionsGeneric-root HvActionsGeneric-actionContainer"
    >
      <WithStyles(HvButton)
        category="ghost"
        className="HvActionsGeneric-button"
        disabled={false}
        id="view"
        key="id-0-action-view"
        onClick={[Function]}
      >
        <HvButton
          category="ghost"
          className="HvActionsGeneric-button"
          classes={
            Object {
              "focusVisible": "HvButton-focusVisible",
              "ghost": "HvButton-ghost",
              "ghostDisabled": "HvButton-ghostDisabled",
              "ghostSVG": "HvButton-ghostSVG",
              "icon": "HvButton-icon",
              "iconSVG": "HvButton-iconSVG",
              "primary": "HvButton-primary",
              "primaryDisabled": "HvButton-primaryDisabled",
              "primarySVG": "HvButton-primarySVG",
              "root": "HvButton-root",
              "secondary": "HvButton-secondary",
              "secondaryDisabled": "HvButton-secondaryDisabled",
              "secondarySVG": "HvButton-secondarySVG",
              "semantic": "HvButton-semantic",
              "semanticDisabled": "HvButton-semanticDisabled",
              "semanticSVG": "HvButton-semanticSVG",
              "startIcon": "HvButton-startIcon",
            }
          }
          disabled={false}
          id="view"
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(Button))
            className="HvActionsGeneric-button HvButton-ghostSVG"
            classes={
              Object {
                "containedPrimary": "HvButton-primary",
                "disabled": "HvButton-ghostDisabled",
                "outlinedPrimary": "HvButton-secondary",
                "root": "HvButton-root",
                "startIcon": "HvButton-startIcon",
                "textPrimary": "HvButton-ghost",
              }
            }
            color="primary"
            disableRipple={true}
            disabled={false}
            focusVisibleClassName="HvButton-focusVisible"
            id="view"
            onClick={[Function]}
            variant="text"
          >
            <ForwardRef(Button)
              className="HvActionsGeneric-button HvButton-ghostSVG"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled HvButton-ghostDisabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root HvButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon HvButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disableRipple={true}
              disabled={false}
              focusVisibleClassName="HvButton-focusVisible"
              id="view"
              onClick={[Function]}
              variant="text"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                component="button"
                disableRipple={true}
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                id="view"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disableRipple={true}
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                  id="view"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                    disabled={false}
                    id="view"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      View
                    </span>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </HvButton>
      </WithStyles(HvButton)>
      <WithStyles(HvButton)
        category="ghost"
        className="HvActionsGeneric-button"
        disabled={false}
        id="delete"
        key="id-1-action-delete"
        onClick={[Function]}
      >
        <HvButton
          category="ghost"
          className="HvActionsGeneric-button"
          classes={
            Object {
              "focusVisible": "HvButton-focusVisible",
              "ghost": "HvButton-ghost",
              "ghostDisabled": "HvButton-ghostDisabled",
              "ghostSVG": "HvButton-ghostSVG",
              "icon": "HvButton-icon",
              "iconSVG": "HvButton-iconSVG",
              "primary": "HvButton-primary",
              "primaryDisabled": "HvButton-primaryDisabled",
              "primarySVG": "HvButton-primarySVG",
              "root": "HvButton-root",
              "secondary": "HvButton-secondary",
              "secondaryDisabled": "HvButton-secondaryDisabled",
              "secondarySVG": "HvButton-secondarySVG",
              "semantic": "HvButton-semantic",
              "semanticDisabled": "HvButton-semanticDisabled",
              "semanticSVG": "HvButton-semanticSVG",
              "startIcon": "HvButton-startIcon",
            }
          }
          disabled={false}
          id="delete"
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(Button))
            className="HvActionsGeneric-button HvButton-ghostSVG"
            classes={
              Object {
                "containedPrimary": "HvButton-primary",
                "disabled": "HvButton-ghostDisabled",
                "outlinedPrimary": "HvButton-secondary",
                "root": "HvButton-root",
                "startIcon": "HvButton-startIcon",
                "textPrimary": "HvButton-ghost",
              }
            }
            color="primary"
            disableRipple={true}
            disabled={false}
            focusVisibleClassName="HvButton-focusVisible"
            id="delete"
            onClick={[Function]}
            variant="text"
          >
            <ForwardRef(Button)
              className="HvActionsGeneric-button HvButton-ghostSVG"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled HvButton-ghostDisabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root HvButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon HvButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disableRipple={true}
              disabled={false}
              focusVisibleClassName="HvButton-focusVisible"
              id="delete"
              onClick={[Function]}
              variant="text"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                component="button"
                disableRipple={true}
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                id="delete"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disableRipple={true}
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                  id="delete"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                    disabled={false}
                    id="delete"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      Delete
                    </span>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </HvButton>
      </WithStyles(HvButton)>
      <WithStyles(WithId)
        category="ghost"
        classes={
          Object {
            "icon": "HvActionsGeneric-dropDownMenuButton",
            "iconSelected": "HvActionsGeneric-dropDownMenuButtonSelected",
            "root": "HvActionsGeneric-dropDownMenu",
          }
        }
        dataList={
          Array [
            Object {
              "disabled": true,
              "id": "update",
              "label": "Update",
            },
          ]
        }
        disablePortal={false}
        disabled={false}
        icon={<MoreOptionsVertical />}
        id="id-menu"
        keepOpened={false}
        onClick={[Function]}
        placement="left"
      >
        <WithId
          category="ghost"
          classes={
            Object {
              "icon": "HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton",
              "iconSelected": "HvDropDownMenu-iconSelected HvActionsGeneric-dropDownMenuButtonSelected",
              "root": "HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
            }
          }
          dataList={
            Array [
              Object {
                "disabled": true,
                "id": "update",
                "label": "Update",
              },
            ]
          }
          disablePortal={false}
          disabled={false}
          icon={<MoreOptionsVertical />}
          id="id-menu"
          keepOpened={false}
          onClick={[Function]}
          placement="left"
        >
          <DropDownMenu
            category="ghost"
            classes={
              Object {
                "icon": "HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton",
                "iconSelected": "HvDropDownMenu-iconSelected HvActionsGeneric-dropDownMenuButtonSelected",
                "root": "HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
              }
            }
            dataList={
              Array [
                Object {
                  "disabled": true,
                  "id": "update",
                  "label": "Update",
                },
              ]
            }
            disablePortal={false}
            disabled={false}
            icon={<MoreOptionsVertical />}
            id="id-menu"
            keepOpened={false}
            onClick={[Function]}
            placement="left"
          >
            <WithStyles(WithId)
              classes={
                Object {
                  "root": "HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                }
              }
              component={
                <ForwardRef(WithStyles)
                  aria-label="Dropdown menu"
                  category="ghost"
                  className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                  disabled={false}
                  icon={true}
                  id="id-menu-icon-button"
                >
                  <MoreOptionsVertical />
                </ForwardRef(WithStyles)>
              }
              disablePortal={false}
              disabled={false}
              expanded={false}
              id="id-menu"
              onToggle={[Function]}
              placement="left"
            >
              <WithId
                classes={
                  Object {
                    "arrow": "HvBaseDropdown-arrow",
                    "header": "HvBaseDropdown-header",
                    "headerDisabled": "HvBaseDropdown-headerDisabled",
                    "headerOpen": "HvBaseDropdown-headerOpen",
                    "headerOpenDown": "HvBaseDropdown-headerOpenDown",
                    "headerOpenUp": "HvBaseDropdown-headerOpenUp",
                    "inputExtensionFloatLeft": "HvBaseDropdown-inputExtensionFloatLeft",
                    "inputExtensionFloatRight": "HvBaseDropdown-inputExtensionFloatRight",
                    "inputExtensionLeftPosition": "HvBaseDropdown-inputExtensionLeftPosition",
                    "inputExtensionOpen": "HvBaseDropdown-inputExtensionOpen",
                    "inputExtensionOpenShadow": "HvBaseDropdown-inputExtensionOpenShadow",
                    "panel": "HvBaseDropdown-panel",
                    "root": "HvBaseDropdown-root HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                    "selection": "HvBaseDropdown-selection",
                    "selectionDisabled": "HvBaseDropdown-selectionDisabled",
                    "truncate": "HvBaseDropdown-truncate",
                  }
                }
                component={
                  <ForwardRef(WithStyles)
                    aria-label="Dropdown menu"
                    category="ghost"
                    className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                    disabled={false}
                    icon={true}
                    id="id-menu-icon-button"
                  >
                    <MoreOptionsVertical />
                  </ForwardRef(WithStyles)>
                }
                disablePortal={false}
                disabled={false}
                expanded={false}
                id="id-menu"
                onToggle={[Function]}
                placement="left"
              >
                <HvBaseDropdown
                  classes={
                    Object {
                      "arrow": "HvBaseDropdown-arrow",
                      "header": "HvBaseDropdown-header",
                      "headerDisabled": "HvBaseDropdown-headerDisabled",
                      "headerOpen": "HvBaseDropdown-headerOpen",
                      "headerOpenDown": "HvBaseDropdown-headerOpenDown",
                      "headerOpenUp": "HvBaseDropdown-headerOpenUp",
                      "inputExtensionFloatLeft": "HvBaseDropdown-inputExtensionFloatLeft",
                      "inputExtensionFloatRight": "HvBaseDropdown-inputExtensionFloatRight",
                      "inputExtensionLeftPosition": "HvBaseDropdown-inputExtensionLeftPosition",
                      "inputExtensionOpen": "HvBaseDropdown-inputExtensionOpen",
                      "inputExtensionOpenShadow": "HvBaseDropdown-inputExtensionOpenShadow",
                      "panel": "HvBaseDropdown-panel",
                      "root": "HvBaseDropdown-root HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                      "selection": "HvBaseDropdown-selection",
                      "selectionDisabled": "HvBaseDropdown-selectionDisabled",
                      "truncate": "HvBaseDropdown-truncate",
                    }
                  }
                  component={
                    <ForwardRef(WithStyles)
                      aria-label="Dropdown menu"
                      category="ghost"
                      className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                      disabled={false}
                      icon={true}
                      id="id-menu-icon-button"
                    >
                      <MoreOptionsVertical />
                    </ForwardRef(WithStyles)>
                  }
                  disablePortal={false}
                  disabled={false}
                  expanded={false}
                  id="id-menu"
                  onToggle={[Function]}
                  placement="left"
                >
                  <div
                    aria-expanded={false}
                    aria-haspopup="listbox"
                    className="HvBaseDropdown-root HvDropDownMenu-root HvActionsGeneric-dropDownMenu"
                    id="id-menu"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    tabIndex={-1}
                  >
                    <WithStyles(HvButton)
                      aria-label="Dropdown menu"
                      category="ghost"
                      className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                      disabled={false}
                      icon={true}
                      id="id-menu-icon-button"
                    >
                      <HvButton
                        aria-label="Dropdown menu"
                        category="ghost"
                        className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                        classes={
                          Object {
                            "focusVisible": "HvButton-focusVisible",
                            "ghost": "HvButton-ghost",
                            "ghostDisabled": "HvButton-ghostDisabled",
                            "ghostSVG": "HvButton-ghostSVG",
                            "icon": "HvButton-icon",
                            "iconSVG": "HvButton-iconSVG",
                            "primary": "HvButton-primary",
                            "primaryDisabled": "HvButton-primaryDisabled",
                            "primarySVG": "HvButton-primarySVG",
                            "root": "HvButton-root",
                            "secondary": "HvButton-secondary",
                            "secondaryDisabled": "HvButton-secondaryDisabled",
                            "secondarySVG": "HvButton-secondarySVG",
                            "semantic": "HvButton-semantic",
                            "semanticDisabled": "HvButton-semanticDisabled",
                            "semanticSVG": "HvButton-semanticSVG",
                            "startIcon": "HvButton-startIcon",
                          }
                        }
                        disabled={false}
                        icon={true}
                        id="id-menu-icon-button"
                      >
                        <WithStyles(ForwardRef(Button))
                          aria-label="Dropdown menu"
                          className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG"
                          classes={
                            Object {
                              "containedPrimary": "HvButton-primary",
                              "disabled": "HvButton-ghostDisabled",
                              "outlinedPrimary": "HvButton-secondary",
                              "root": "HvButton-root",
                              "startIcon": "HvButton-startIcon",
                              "textPrimary": "HvButton-ghost",
                            }
                          }
                          color="primary"
                          disableRipple={true}
                          disabled={false}
                          focusVisibleClassName="HvButton-focusVisible"
                          id="id-menu-icon-button"
                          variant="text"
                        >
                          <ForwardRef(Button)
                            aria-label="Dropdown menu"
                            className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG"
                            classes={
                              Object {
                                "colorInherit": "MuiButton-colorInherit",
                                "contained": "MuiButton-contained",
                                "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                                "containedSecondary": "MuiButton-containedSecondary",
                                "containedSizeLarge": "MuiButton-containedSizeLarge",
                                "containedSizeSmall": "MuiButton-containedSizeSmall",
                                "disableElevation": "MuiButton-disableElevation",
                                "disabled": "Mui-disabled HvButton-ghostDisabled",
                                "endIcon": "MuiButton-endIcon",
                                "focusVisible": "Mui-focusVisible",
                                "fullWidth": "MuiButton-fullWidth",
                                "iconSizeLarge": "MuiButton-iconSizeLarge",
                                "iconSizeMedium": "MuiButton-iconSizeMedium",
                                "iconSizeSmall": "MuiButton-iconSizeSmall",
                                "label": "MuiButton-label",
                                "outlined": "MuiButton-outlined",
                                "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                                "outlinedSecondary": "MuiButton-outlinedSecondary",
                                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                "root": "MuiButton-root HvButton-root",
                                "sizeLarge": "MuiButton-sizeLarge",
                                "sizeSmall": "MuiButton-sizeSmall",
                                "startIcon": "MuiButton-startIcon HvButton-startIcon",
                                "text": "MuiButton-text",
                                "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                                "textSecondary": "MuiButton-textSecondary",
                                "textSizeLarge": "MuiButton-textSizeLarge",
                                "textSizeSmall": "MuiButton-textSizeSmall",
                              }
                            }
                            color="primary"
                            disableRipple={true}
                            disabled={false}
                            focusVisibleClassName="HvButton-focusVisible"
                            id="id-menu-icon-button"
                            variant="text"
                          >
                            <WithStyles(ForwardRef(ButtonBase))
                              aria-label="Dropdown menu"
                              className="MuiButton-root HvButton-root MuiButton-text HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                              component="button"
                              disableRipple={true}
                              disabled={false}
                              focusRipple={true}
                              focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                              id="id-menu-icon-button"
                              type="button"
                            >
                              <ForwardRef(ButtonBase)
                                aria-label="Dropdown menu"
                                className="MuiButton-root HvButton-root MuiButton-text HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                                classes={
                                  Object {
                                    "disabled": "Mui-disabled",
                                    "focusVisible": "Mui-focusVisible",
                                    "root": "MuiButtonBase-root",
                                  }
                                }
                                component="button"
                                disableRipple={true}
                                disabled={false}
                                focusRipple={true}
                                focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                                id="id-menu-icon-button"
                                type="button"
                              >
                                <button
                                  aria-label="Dropdown menu"
                                  className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                                  disabled={false}
                                  id="id-menu-icon-button"
                                  onBlur={[Function]}
                                  onDragLeave={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                  tabIndex={0}
                                  type="button"
                                >
                                  <span
                                    className="MuiButton-label"
                                  >
                                    <MoreOptionsVertical>
                                      <WithStyles(HvIconBase)
                                        iconSize="S"
                                        name="MoreOptionsVertical"
                                      >
                                        <HvIconBase
                                          classes={
                                            Object {
                                              "l": "HvIconBase-l",
                                              "m": "HvIconBase-m",
                                              "root": "HvIconBase-root",
                                              "s": "HvIconBase-s",
                                              "xs": "HvIconBase-xs",
                                            }
                                          }
                                          iconSize="S"
                                          name="MoreOptionsVertical"
                                        >
                                          <div
                                            className="HvIconBase-root HvIconBase-s"
                                            name="MoreOptionsVertical"
                                          >
                                            <svg
                                              focusable={false}
                                              height={16}
                                              viewBox="0 0 16 16"
                                              width={16}
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                className="color0"
                                                d="M7 6.9h2v2H7zM7 4h2V2H7zm0 10h2v-2H7z"
                                                fill="#414141"
                                              />
                                            </svg>
                                          </div>
                                        </HvIconBase>
                                      </WithStyles(HvIconBase)>
                                    </MoreOptionsVertical>
                                  </span>
                                </button>
                              </ForwardRef(ButtonBase)>
                            </WithStyles(ForwardRef(ButtonBase))>
                          </ForwardRef(Button)>
                        </WithStyles(ForwardRef(Button))>
                      </HvButton>
                    </WithStyles(HvButton)>
                  </div>
                  <ForwardRef(Popper)
                    anchorEl={null}
                    disablePortal={false}
                    open={false}
                    placement="bottom-end"
                    popperOptions={
                      Object {
                        "onCreate": [Function],
                        "onUpdate": [Function],
                      }
                    }
                    style={
                      Object {
                        "zIndex": 1500,
                      }
                    }
                  />
                </HvBaseDropdown>
              </WithId>
            </WithStyles(WithId)>
          </DropDownMenu>
        </WithId>
      </WithStyles(WithId)>
    </div>
  </ActionsGeneric>
</WithStyles(ActionsGeneric)>
`;
