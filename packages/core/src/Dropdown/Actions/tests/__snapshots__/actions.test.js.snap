// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Actions /> should render correctly 1`] = `
<WithStyles(Actions)
  applyLabel="Apply"
  cancelLabel="Cancel"
  id="acts"
  onApply={[Function]}
  onCancel={[Function]}
>
  <Actions
    applyLabel="Apply"
    cancelLabel="Cancel"
    classes={
      Object {
        "button": "HvDropdownActions-button",
      }
    }
    id="acts"
    onApply={[Function]}
    onCancel={[Function]}
  >
    <div
      id="acts"
    >
      <WithStyles(HvButton)
        category="ghost"
        className="HvDropdownActions-button"
        id="acts-apply"
        onClick={[Function]}
      >
        <HvButton
          category="ghost"
          className="HvDropdownActions-button"
          classes={
            Object {
              "ghost": "HvButton-ghost",
              "ghostDisabled": "HvButton-ghostDisabled",
              "ghostSecondary": "HvButton-ghostSecondary",
              "ghostSecondaryDisabled": "HvButton-ghostSecondaryDisabled",
              "primary": "HvButton-primary",
              "primaryDisabled": "HvButton-primaryDisabled",
              "root": "HvButton-root",
              "rootIcon": "HvButton-rootIcon",
              "secondary": "HvButton-secondary",
              "secondaryDisabled": "HvButton-secondaryDisabled",
              "semantic": "HvButton-semantic",
              "semanticDisabled": "HvButton-semanticDisabled",
              "startIcon": "HvButton-startIcon",
            }
          }
          id="acts-apply"
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(Button))
            className="HvDropdownActions-button"
            classes={
              Object {
                "containedPrimary": "HvButton-primary",
                "disabled": "HvButton-ghostDisabled",
                "outlinedPrimary": "HvButton-secondary",
                "root": "HvButton-root",
                "startIcon": "HvButton-startIcon",
                "textPrimary": "HvButton-ghost",
              }
            }
            color="primary"
            disableRipple={true}
            id="acts-apply"
            onClick={[Function]}
            variant="text"
          >
            <ForwardRef(Button)
              className="HvDropdownActions-button"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled HvButton-ghostDisabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root HvButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon HvButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disableRipple={true}
              id="acts-apply"
              onClick={[Function]}
              variant="text"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root HvButton-root MuiButton-text HvDropdownActions-button MuiButton-textPrimary HvButton-ghost"
                component="button"
                disableRipple={true}
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                id="acts-apply"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root HvButton-root MuiButton-text HvDropdownActions-button MuiButton-textPrimary HvButton-ghost"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disableRipple={true}
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  id="acts-apply"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvDropdownActions-button MuiButton-textPrimary HvButton-ghost"
                    disabled={false}
                    id="acts-apply"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      Apply
                    </span>
                    <NoSsr />
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </HvButton>
      </WithStyles(HvButton)>
      <WithStyles(HvButton)
        category="ghost"
        className="HvDropdownActions-button"
        id="acts-cancel"
        onClick={[Function]}
      >
        <HvButton
          category="ghost"
          className="HvDropdownActions-button"
          classes={
            Object {
              "ghost": "HvButton-ghost",
              "ghostDisabled": "HvButton-ghostDisabled",
              "ghostSecondary": "HvButton-ghostSecondary",
              "ghostSecondaryDisabled": "HvButton-ghostSecondaryDisabled",
              "primary": "HvButton-primary",
              "primaryDisabled": "HvButton-primaryDisabled",
              "root": "HvButton-root",
              "rootIcon": "HvButton-rootIcon",
              "secondary": "HvButton-secondary",
              "secondaryDisabled": "HvButton-secondaryDisabled",
              "semantic": "HvButton-semantic",
              "semanticDisabled": "HvButton-semanticDisabled",
              "startIcon": "HvButton-startIcon",
            }
          }
          id="acts-cancel"
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(Button))
            className="HvDropdownActions-button"
            classes={
              Object {
                "containedPrimary": "HvButton-primary",
                "disabled": "HvButton-ghostDisabled",
                "outlinedPrimary": "HvButton-secondary",
                "root": "HvButton-root",
                "startIcon": "HvButton-startIcon",
                "textPrimary": "HvButton-ghost",
              }
            }
            color="primary"
            disableRipple={true}
            id="acts-cancel"
            onClick={[Function]}
            variant="text"
          >
            <ForwardRef(Button)
              className="HvDropdownActions-button"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled HvButton-ghostDisabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root HvButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon HvButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disableRipple={true}
              id="acts-cancel"
              onClick={[Function]}
              variant="text"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root HvButton-root MuiButton-text HvDropdownActions-button MuiButton-textPrimary HvButton-ghost"
                component="button"
                disableRipple={true}
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                id="acts-cancel"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root HvButton-root MuiButton-text HvDropdownActions-button MuiButton-textPrimary HvButton-ghost"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disableRipple={true}
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  id="acts-cancel"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvDropdownActions-button MuiButton-textPrimary HvButton-ghost"
                    disabled={false}
                    id="acts-cancel"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      Cancel
                    </span>
                    <NoSsr />
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </HvButton>
      </WithStyles(HvButton)>
    </div>
  </Actions>
</WithStyles(Actions)>
`;
