// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BulkActions controlled with actions should render correctly 1`] = `
<WithStyles(WithLabels)
  actions={
    Array [
      Object {
        "iconCallback": [Function],
        "id": "add",
        "label": "Add",
      },
      Object {
        "iconCallback": [Function],
        "id": "delete",
        "label": "Delete",
      },
      Object {
        "iconCallback": [Function],
        "id": "lock",
        "label": "Lock",
      },
      Object {
        "iconCallback": [Function],
        "id": "put",
        "label": "Preview",
      },
    ]
  }
  actionsCallback={[Function]}
  id="bulkActions"
  maxVisibleActions={2}
  numSelected={0}
  numTotal={8}
  onSelectAll={[Function]}
  onSelectAllPages={[Function]}
>
  <WithLabels
    actions={
      Array [
        Object {
          "iconCallback": [Function],
          "id": "add",
          "label": "Add",
        },
        Object {
          "iconCallback": [Function],
          "id": "delete",
          "label": "Delete",
        },
        Object {
          "iconCallback": [Function],
          "id": "lock",
          "label": "Lock",
        },
        Object {
          "iconCallback": [Function],
          "id": "put",
          "label": "Preview",
        },
      ]
    }
    actionsCallback={[Function]}
    classes={
      Object {
        "actions": "HvBulkActions-actions",
        "editMode": "HvBulkActions-editMode",
        "root": "HvBulkActions-root",
        "selectAll": "HvBulkActions-selectAll",
        "selectAllContainer": "HvBulkActions-selectAllContainer",
        "selectAllPages": "HvBulkActions-selectAllPages",
      }
    }
    id="bulkActions"
    maxVisibleActions={2}
    numSelected={0}
    numTotal={8}
    onSelectAll={[Function]}
    onSelectAllPages={[Function]}
  >
    <HvBulkActions
      actions={
        Array [
          Object {
            "iconCallback": [Function],
            "id": "add",
            "label": "Add",
          },
          Object {
            "iconCallback": [Function],
            "id": "delete",
            "label": "Delete",
          },
          Object {
            "iconCallback": [Function],
            "id": "lock",
            "label": "Lock",
          },
          Object {
            "iconCallback": [Function],
            "id": "put",
            "label": "Preview",
          },
        ]
      }
      actionsCallback={[Function]}
      classes={
        Object {
          "actions": "HvBulkActions-actions",
          "editMode": "HvBulkActions-editMode",
          "root": "HvBulkActions-root",
          "selectAll": "HvBulkActions-selectAll",
          "selectAllContainer": "HvBulkActions-selectAllContainer",
          "selectAllPages": "HvBulkActions-selectAllPages",
        }
      }
      id="bulkActions"
      labels={
        Object {
          "deselectAllPages": "Unselect all",
          "selectAll": "All",
          "selectAllPages": "Select all from all pages",
        }
      }
      maxVisibleActions={2}
      numSelected={0}
      numTotal={8}
      onSelectAll={[Function]}
      onSelectAllPages={[Function]}
    >
      <div
        className="HvBulkActions-root"
        id="bulkActions"
      >
        <div
          className="HvBulkActions-selectAllContainer"
        >
          <WithStyles(HvCheckbox)
            checked={false}
            className="HvBulkActions-selectAll"
            id="bulkActions-select"
            indeterminate={false}
            label={
              <WithStyles(ForwardRef)
                component="span"
                variant="normalText"
              >
                <b>
                  All
                </b>
              </WithStyles(ForwardRef)>
            }
            onChange={[Function]}
            semantic={false}
          >
            <HvCheckbox
              checked={false}
              className="HvBulkActions-selectAll"
              classes={
                Object {
                  "checkBox": "HvCheckBox-checkBox",
                  "container": "HvCheckBox-container",
                  "disableFocus": "HvCheckBox-disableFocus",
                  "icon": "HvCheckBox-icon",
                  "labelDisabled": "HvCheckBox-labelDisabled",
                  "labelEnd": "HvCheckBox-labelEnd",
                  "labelStart": "HvCheckBox-labelStart",
                  "labelTypography": "HvCheckBox-labelTypography",
                }
              }
              id="bulkActions-select"
              indeterminate={false}
              label={
                <WithStyles(ForwardRef)
                  component="span"
                  variant="normalText"
                >
                  <b>
                    All
                  </b>
                </WithStyles(ForwardRef)>
              }
              onChange={[Function]}
              semantic={false}
            >
              <WithStyles(ForwardRef(FormControlLabel))
                className="HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                classes={
                  Object {
                    "disabled": "HvCheckBox-labelDisabled",
                    "label": "HvCheckBox-labelTypography",
                  }
                }
                control={
                  <WithStyles(ForwardRef(Checkbox))
                    checked={false}
                    checkedIcon={
                      <WithStyles(CheckboxCheck)
                        className="HvCheckBox-icon"
                      />
                    }
                    className="HvCheckBox-checkBox"
                    color="default"
                    disableRipple={true}
                    disabled={false}
                    icon={
                      <WithStyles(Checkbox)
                        className="HvCheckBox-icon"
                      />
                    }
                    id="bulkActions-select-input"
                    indeterminate={false}
                    indeterminateIcon={
                      <WithStyles(CheckboxPartial)
                        className="HvCheckBox-icon"
                      />
                    }
                    onBlur={[Function]}
                    onChange={[Function]}
                    value=""
                  />
                }
                disabled={false}
                id="bulkActions-select"
                label={
                  <WithStyles(ForwardRef)
                    component="span"
                    variant="normalText"
                  >
                    <b>
                      All
                    </b>
                  </WithStyles(ForwardRef)>
                }
                labelPlacement="end"
              >
                <ForwardRef(FormControlLabel)
                  className="HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                  classes={
                    Object {
                      "disabled": "Mui-disabled HvCheckBox-labelDisabled",
                      "label": "MuiFormControlLabel-label HvCheckBox-labelTypography",
                      "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                      "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                      "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                      "root": "MuiFormControlLabel-root",
                    }
                  }
                  control={
                    <WithStyles(ForwardRef(Checkbox))
                      checked={false}
                      checkedIcon={
                        <WithStyles(CheckboxCheck)
                          className="HvCheckBox-icon"
                        />
                      }
                      className="HvCheckBox-checkBox"
                      color="default"
                      disableRipple={true}
                      disabled={false}
                      icon={
                        <WithStyles(Checkbox)
                          className="HvCheckBox-icon"
                        />
                      }
                      id="bulkActions-select-input"
                      indeterminate={false}
                      indeterminateIcon={
                        <WithStyles(CheckboxPartial)
                          className="HvCheckBox-icon"
                        />
                      }
                      onBlur={[Function]}
                      onChange={[Function]}
                      value=""
                    />
                  }
                  disabled={false}
                  id="bulkActions-select"
                  label={
                    <WithStyles(ForwardRef)
                      component="span"
                      variant="normalText"
                    >
                      <b>
                        All
                      </b>
                    </WithStyles(ForwardRef)>
                  }
                  labelPlacement="end"
                >
                  <label
                    className="MuiFormControlLabel-root HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                    id="bulkActions-select"
                  >
                    <WithStyles(ForwardRef(Checkbox))
                      checked={false}
                      checkedIcon={
                        <WithStyles(CheckboxCheck)
                          className="HvCheckBox-icon"
                        />
                      }
                      className="HvCheckBox-checkBox"
                      color="default"
                      disableRipple={true}
                      disabled={false}
                      icon={
                        <WithStyles(Checkbox)
                          className="HvCheckBox-icon"
                        />
                      }
                      id="bulkActions-select-input"
                      indeterminate={false}
                      indeterminateIcon={
                        <WithStyles(CheckboxPartial)
                          className="HvCheckBox-icon"
                        />
                      }
                      onBlur={[Function]}
                      onChange={[Function]}
                      value=""
                    >
                      <ForwardRef(Checkbox)
                        checked={false}
                        checkedIcon={
                          <WithStyles(CheckboxCheck)
                            className="HvCheckBox-icon"
                          />
                        }
                        className="HvCheckBox-checkBox"
                        classes={
                          Object {
                            "checked": "Mui-checked",
                            "colorPrimary": "MuiCheckbox-colorPrimary",
                            "colorSecondary": "MuiCheckbox-colorSecondary",
                            "disabled": "Mui-disabled",
                            "indeterminate": "MuiCheckbox-indeterminate",
                            "root": "MuiCheckbox-root",
                          }
                        }
                        color="default"
                        disableRipple={true}
                        disabled={false}
                        icon={
                          <WithStyles(Checkbox)
                            className="HvCheckBox-icon"
                          />
                        }
                        id="bulkActions-select-input"
                        indeterminate={false}
                        indeterminateIcon={
                          <WithStyles(CheckboxPartial)
                            className="HvCheckBox-icon"
                          />
                        }
                        onBlur={[Function]}
                        onChange={[Function]}
                        value=""
                      >
                        <WithStyles(ForwardRef(SwitchBase))
                          checked={false}
                          checkedIcon={
                            <WithStyles(CheckboxCheck)
                              className="HvCheckBox-icon"
                              fontSize="default"
                            />
                          }
                          className="HvCheckBox-checkBox"
                          classes={
                            Object {
                              "checked": "Mui-checked",
                              "disabled": "Mui-disabled",
                              "root": "MuiCheckbox-root",
                            }
                          }
                          color="default"
                          disableRipple={true}
                          disabled={false}
                          icon={
                            <WithStyles(Checkbox)
                              className="HvCheckBox-icon"
                              fontSize="default"
                            />
                          }
                          id="bulkActions-select-input"
                          inputProps={
                            Object {
                              "data-indeterminate": false,
                            }
                          }
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="checkbox"
                          value=""
                        >
                          <ForwardRef(SwitchBase)
                            checked={false}
                            checkedIcon={
                              <WithStyles(CheckboxCheck)
                                className="HvCheckBox-icon"
                                fontSize="default"
                              />
                            }
                            className="HvCheckBox-checkBox"
                            classes={
                              Object {
                                "checked": "PrivateSwitchBase-checked-2 Mui-checked",
                                "disabled": "PrivateSwitchBase-disabled-3 Mui-disabled",
                                "input": "PrivateSwitchBase-input-4",
                                "root": "PrivateSwitchBase-root-1 MuiCheckbox-root",
                              }
                            }
                            color="default"
                            disableRipple={true}
                            disabled={false}
                            icon={
                              <WithStyles(Checkbox)
                                className="HvCheckBox-icon"
                                fontSize="default"
                              />
                            }
                            id="bulkActions-select-input"
                            inputProps={
                              Object {
                                "data-indeterminate": false,
                              }
                            }
                            onBlur={[Function]}
                            onChange={[Function]}
                            type="checkbox"
                            value=""
                          >
                            <WithStyles(ForwardRef(IconButton))
                              className="PrivateSwitchBase-root-1 MuiCheckbox-root HvCheckBox-checkBox"
                              color="default"
                              component="span"
                              disableRipple={true}
                              disabled={false}
                              onBlur={[Function]}
                              onFocus={[Function]}
                              tabIndex={null}
                            >
                              <ForwardRef(IconButton)
                                className="PrivateSwitchBase-root-1 MuiCheckbox-root HvCheckBox-checkBox"
                                classes={
                                  Object {
                                    "colorInherit": "MuiIconButton-colorInherit",
                                    "colorPrimary": "MuiIconButton-colorPrimary",
                                    "colorSecondary": "MuiIconButton-colorSecondary",
                                    "disabled": "Mui-disabled",
                                    "edgeEnd": "MuiIconButton-edgeEnd",
                                    "edgeStart": "MuiIconButton-edgeStart",
                                    "label": "MuiIconButton-label",
                                    "root": "MuiIconButton-root",
                                    "sizeSmall": "MuiIconButton-sizeSmall",
                                  }
                                }
                                color="default"
                                component="span"
                                disableRipple={true}
                                disabled={false}
                                onBlur={[Function]}
                                onFocus={[Function]}
                                tabIndex={null}
                              >
                                <WithStyles(ForwardRef(ButtonBase))
                                  centerRipple={true}
                                  className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root HvCheckBox-checkBox"
                                  component="span"
                                  disableRipple={true}
                                  disabled={false}
                                  focusRipple={true}
                                  onBlur={[Function]}
                                  onFocus={[Function]}
                                  tabIndex={null}
                                >
                                  <ForwardRef(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root HvCheckBox-checkBox"
                                    classes={
                                      Object {
                                        "disabled": "Mui-disabled",
                                        "focusVisible": "Mui-focusVisible",
                                        "root": "MuiButtonBase-root",
                                      }
                                    }
                                    component="span"
                                    disableRipple={true}
                                    disabled={false}
                                    focusRipple={true}
                                    onBlur={[Function]}
                                    onFocus={[Function]}
                                    tabIndex={null}
                                  >
                                    <span
                                      aria-disabled={false}
                                      className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root HvCheckBox-checkBox"
                                      onBlur={[Function]}
                                      onDragLeave={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      onTouchEnd={[Function]}
                                      onTouchMove={[Function]}
                                      onTouchStart={[Function]}
                                      tabIndex={null}
                                    >
                                      <span
                                        className="MuiIconButton-label"
                                      >
                                        <input
                                          checked={false}
                                          className="PrivateSwitchBase-input-4"
                                          data-indeterminate={false}
                                          disabled={false}
                                          id="bulkActions-select-input"
                                          onChange={[Function]}
                                          type="checkbox"
                                          value=""
                                        />
                                        <WithStyles(Checkbox)
                                          className="HvCheckBox-icon"
                                          fontSize="default"
                                        >
                                          <Checkbox
                                            className="HvCheckBox-icon"
                                            classes={
                                              Object {
                                                "root": "HvIconCheckbox-root",
                                                "rootL": "HvIconCheckbox-rootL",
                                                "rootM": "HvIconCheckbox-rootM",
                                                "rootS": "HvIconCheckbox-rootS",
                                                "rootXs": "HvIconCheckbox-rootXs",
                                              }
                                            }
                                            fontSize="default"
                                          >
                                            <div
                                              className="HvCheckBox-icon HvIconCheckbox-root HvIconCheckbox-rootS"
                                              fontSize="default"
                                            >
                                              <svg
                                                focusable={false}
                                                height="16px"
                                                viewBox="0 0 16 16"
                                                width="16px"
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <path
                                                  className="color0"
                                                  d="M0 0h16v16H0z"
                                                  fill="#FFFFFF"
                                                />
                                                <path
                                                  className="color1"
                                                  d="M0-.00291v16h16v-16zm15 15H1v-14h14z"
                                                  fill="#414141"
                                                />
                                              </svg>
                                            </div>
                                          </Checkbox>
                                        </WithStyles(Checkbox)>
                                      </span>
                                    </span>
                                  </ForwardRef(ButtonBase)>
                                </WithStyles(ForwardRef(ButtonBase))>
                              </ForwardRef(IconButton)>
                            </WithStyles(ForwardRef(IconButton))>
                          </ForwardRef(SwitchBase)>
                        </WithStyles(ForwardRef(SwitchBase))>
                      </ForwardRef(Checkbox)>
                    </WithStyles(ForwardRef(Checkbox))>
                    <WithStyles(ForwardRef(Typography))
                      className="MuiFormControlLabel-label HvCheckBox-labelTypography"
                      component="span"
                    >
                      <ForwardRef(Typography)
                        className="MuiFormControlLabel-label HvCheckBox-labelTypography"
                        classes={
                          Object {
                            "alignCenter": "MuiTypography-alignCenter",
                            "alignJustify": "MuiTypography-alignJustify",
                            "alignLeft": "MuiTypography-alignLeft",
                            "alignRight": "MuiTypography-alignRight",
                            "body1": "MuiTypography-body1",
                            "body2": "MuiTypography-body2",
                            "button": "MuiTypography-button",
                            "caption": "MuiTypography-caption",
                            "colorError": "MuiTypography-colorError",
                            "colorInherit": "MuiTypography-colorInherit",
                            "colorPrimary": "MuiTypography-colorPrimary",
                            "colorSecondary": "MuiTypography-colorSecondary",
                            "colorTextPrimary": "MuiTypography-colorTextPrimary",
                            "colorTextSecondary": "MuiTypography-colorTextSecondary",
                            "displayBlock": "MuiTypography-displayBlock",
                            "displayInline": "MuiTypography-displayInline",
                            "gutterBottom": "MuiTypography-gutterBottom",
                            "h1": "MuiTypography-h1",
                            "h2": "MuiTypography-h2",
                            "h3": "MuiTypography-h3",
                            "h4": "MuiTypography-h4",
                            "h5": "MuiTypography-h5",
                            "h6": "MuiTypography-h6",
                            "noWrap": "MuiTypography-noWrap",
                            "overline": "MuiTypography-overline",
                            "paragraph": "MuiTypography-paragraph",
                            "root": "MuiTypography-root",
                            "srOnly": "MuiTypography-srOnly",
                            "subtitle1": "MuiTypography-subtitle1",
                            "subtitle2": "MuiTypography-subtitle2",
                          }
                        }
                        component="span"
                      >
                        <span
                          className="MuiTypography-root MuiFormControlLabel-label HvCheckBox-labelTypography MuiTypography-body1"
                        >
                          <WithStyles(ForwardRef)
                            component="span"
                            variant="normalText"
                          >
                            <ForwardRef
                              classes={
                                Object {
                                  "3xlTitle": "HvTypography-3xlTitle",
                                  "4xlTitle": "HvTypography-4xlTitle",
                                  "5xlTitle": "HvTypography-5xlTitle",
                                  "disabledButtonText": "HvTypography-disabledButtonText",
                                  "highlightText": "HvTypography-highlightText",
                                  "infoText": "HvTypography-infoText",
                                  "inlineLink": "HvTypography-inlineLink",
                                  "lTitle": "HvTypography-lTitle",
                                  "labelText": "HvTypography-labelText",
                                  "mTitle": "HvTypography-mTitle",
                                  "normalText": "HvTypography-normalText",
                                  "placeholderText": "HvTypography-placeholderText",
                                  "root": "HvTypography-root",
                                  "sLink": "HvTypography-sLink",
                                  "sText": "HvTypography-sText",
                                  "sTitle": "HvTypography-sTitle",
                                  "selectedNavText": "HvTypography-selectedNavText",
                                  "selectedText": "HvTypography-selectedText",
                                  "vizText": "HvTypography-vizText",
                                  "xlTitle": "HvTypography-xlTitle",
                                  "xsTitle": "HvTypography-xsTitle",
                                  "xxlTitle": "HvTypography-xxlTitle",
                                  "xxsTitle": "HvTypography-xxsTitle",
                                }
                              }
                              component="span"
                              variant="normalText"
                            >
                              <span
                                className="HvTypography-root HvTypography-normalText"
                              >
                                <b>
                                  All
                                </b>
                              </span>
                            </ForwardRef>
                          </WithStyles(ForwardRef)>
                        </span>
                      </ForwardRef(Typography)>
                    </WithStyles(ForwardRef(Typography))>
                  </label>
                </ForwardRef(FormControlLabel)>
              </WithStyles(ForwardRef(FormControlLabel))>
            </HvCheckbox>
          </WithStyles(HvCheckbox)>
        </div>
        <WithStyles(Actions)
          actions={
            Array [
              Object {
                "iconCallback": [Function],
                "id": "add",
                "label": "Add",
              },
              Object {
                "iconCallback": [Function],
                "id": "delete",
                "label": "Delete",
              },
              Object {
                "iconCallback": [Function],
                "id": "lock",
                "label": "Lock",
              },
              Object {
                "iconCallback": [Function],
                "id": "put",
                "label": "Preview",
              },
            ]
          }
          actionsCallback={[Function]}
          category="ghost"
          classes={
            Object {
              "root": "HvBulkActions-actions",
            }
          }
          disabled={true}
          id="bulkActions-actions"
          maxVisibleActions={2}
        >
          <Actions
            actions={
              Array [
                Object {
                  "iconCallback": [Function],
                  "id": "add",
                  "label": "Add",
                },
                Object {
                  "iconCallback": [Function],
                  "id": "delete",
                  "label": "Delete",
                },
                Object {
                  "iconCallback": [Function],
                  "id": "lock",
                  "label": "Lock",
                },
                Object {
                  "iconCallback": [Function],
                  "id": "put",
                  "label": "Preview",
                },
              ]
            }
            actionsCallback={[Function]}
            category="ghost"
            classes={
              Object {
                "actionContainer": "HvActions-actionContainer",
                "button": "HvActions-button",
                "dropDownMenu": "HvActions-dropDownMenu",
                "dropDownMenuButton": "HvActions-dropDownMenuButton",
                "dropDownMenuButtonSelected": "HvActions-dropDownMenuButtonSelected",
                "root": "HvActions-root HvBulkActions-actions",
              }
            }
            disabled={true}
            id="bulkActions-actions"
            maxVisibleActions={2}
          >
            <div
              className="HvActions-root HvBulkActions-actions HvActions-actionContainer"
            >
              <WithStyles(HvButton)
                category="ghost"
                className="HvActions-button"
                disabled={true}
                id="add"
                key="bulkActions-actions-0-action-add"
                onClick={[Function]}
                startIcon={<WithStyles(Add) />}
              >
                <HvButton
                  category="ghost"
                  className="HvActions-button"
                  classes={
                    Object {
                      "ghost": "HvButton-ghost",
                      "ghostDisabled": "HvButton-ghostDisabled",
                      "ghostSVG": "HvButton-ghostSVG",
                      "ghostSecondary": "HvButton-ghostSecondary",
                      "ghostSecondaryDisabled": "HvButton-ghostSecondaryDisabled",
                      "ghostSecondarySVG": "HvButton-ghostSecondarySVG",
                      "iconSVG": "HvButton-iconSVG",
                      "primary": "HvButton-primary",
                      "primaryDisabled": "HvButton-primaryDisabled",
                      "primarySVG": "HvButton-primarySVG",
                      "root": "HvButton-root",
                      "rootIcon": "HvButton-rootIcon",
                      "secondary": "HvButton-secondary",
                      "secondaryDisabled": "HvButton-secondaryDisabled",
                      "secondarySVG": "HvButton-secondarySVG",
                      "semantic": "HvButton-semantic",
                      "semanticDisabled": "HvButton-semanticDisabled",
                      "semanticSVG": "HvButton-semanticSVG",
                      "startIcon": "HvButton-startIcon",
                    }
                  }
                  disabled={true}
                  id="add"
                  onClick={[Function]}
                  startIcon={<WithStyles(Add) />}
                >
                  <WithStyles(ForwardRef(Button))
                    className="HvActions-button HvButton-ghostSVG"
                    classes={
                      Object {
                        "containedPrimary": "HvButton-primary",
                        "disabled": "HvButton-ghostDisabled",
                        "outlinedPrimary": "HvButton-secondary",
                        "root": "HvButton-root",
                        "startIcon": "HvButton-startIcon",
                        "textPrimary": "HvButton-ghost",
                      }
                    }
                    color="primary"
                    disableRipple={true}
                    disabled={true}
                    id="add"
                    onClick={[Function]}
                    startIcon={<WithStyles(Add) />}
                    variant="text"
                  >
                    <ForwardRef(Button)
                      className="HvActions-button HvButton-ghostSVG"
                      classes={
                        Object {
                          "colorInherit": "MuiButton-colorInherit",
                          "contained": "MuiButton-contained",
                          "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                          "containedSecondary": "MuiButton-containedSecondary",
                          "containedSizeLarge": "MuiButton-containedSizeLarge",
                          "containedSizeSmall": "MuiButton-containedSizeSmall",
                          "disableElevation": "MuiButton-disableElevation",
                          "disabled": "Mui-disabled HvButton-ghostDisabled",
                          "endIcon": "MuiButton-endIcon",
                          "focusVisible": "Mui-focusVisible",
                          "fullWidth": "MuiButton-fullWidth",
                          "iconSizeLarge": "MuiButton-iconSizeLarge",
                          "iconSizeMedium": "MuiButton-iconSizeMedium",
                          "iconSizeSmall": "MuiButton-iconSizeSmall",
                          "label": "MuiButton-label",
                          "outlined": "MuiButton-outlined",
                          "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                          "outlinedSecondary": "MuiButton-outlinedSecondary",
                          "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                          "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                          "root": "MuiButton-root HvButton-root",
                          "sizeLarge": "MuiButton-sizeLarge",
                          "sizeSmall": "MuiButton-sizeSmall",
                          "startIcon": "MuiButton-startIcon HvButton-startIcon",
                          "text": "MuiButton-text",
                          "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                          "textSecondary": "MuiButton-textSecondary",
                          "textSizeLarge": "MuiButton-textSizeLarge",
                          "textSizeSmall": "MuiButton-textSizeSmall",
                        }
                      }
                      color="primary"
                      disableRipple={true}
                      disabled={true}
                      id="add"
                      onClick={[Function]}
                      startIcon={<WithStyles(Add) />}
                      variant="text"
                    >
                      <WithStyles(ForwardRef(ButtonBase))
                        className="MuiButton-root HvButton-root MuiButton-text HvActions-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                        component="button"
                        disableRipple={true}
                        disabled={true}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        id="add"
                        onClick={[Function]}
                        type="button"
                      >
                        <ForwardRef(ButtonBase)
                          className="MuiButton-root HvButton-root MuiButton-text HvActions-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "focusVisible": "Mui-focusVisible",
                              "root": "MuiButtonBase-root",
                            }
                          }
                          component="button"
                          disableRipple={true}
                          disabled={true}
                          focusRipple={true}
                          focusVisibleClassName="Mui-focusVisible"
                          id="add"
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvActions-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled Mui-disabled"
                            disabled={true}
                            id="add"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragLeave={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            tabIndex={-1}
                            type="button"
                          >
                            <span
                              className="MuiButton-label"
                            >
                              <span
                                className="MuiButton-startIcon HvButton-startIcon MuiButton-iconSizeMedium"
                              >
                                <WithStyles(Add)>
                                  <Add
                                    classes={
                                      Object {
                                        "root": "HvIconAdd-root",
                                        "rootL": "HvIconAdd-rootL",
                                        "rootM": "HvIconAdd-rootM",
                                        "rootS": "HvIconAdd-rootS",
                                        "rootXs": "HvIconAdd-rootXs",
                                      }
                                    }
                                  >
                                    <div
                                      className="HvIconAdd-root HvIconAdd-rootS"
                                    >
                                      <svg
                                        focusable={false}
                                        height="16px"
                                        viewBox="0 0 16 16"
                                        width="16px"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          className="color0"
                                          d="M16 7.5H8.5V0h-1v7.5H0v1h7.5V16h1V8.5H16z"
                                          fill="#414141"
                                        />
                                      </svg>
                                    </div>
                                  </Add>
                                </WithStyles(Add)>
                              </span>
                              Add
                            </span>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Button)>
                  </WithStyles(ForwardRef(Button))>
                </HvButton>
              </WithStyles(HvButton)>
              <WithStyles(HvButton)
                category="ghost"
                className="HvActions-button"
                disabled={true}
                id="delete"
                key="bulkActions-actions-1-action-delete"
                onClick={[Function]}
                startIcon={<WithStyles(Delete) />}
              >
                <HvButton
                  category="ghost"
                  className="HvActions-button"
                  classes={
                    Object {
                      "ghost": "HvButton-ghost",
                      "ghostDisabled": "HvButton-ghostDisabled",
                      "ghostSVG": "HvButton-ghostSVG",
                      "ghostSecondary": "HvButton-ghostSecondary",
                      "ghostSecondaryDisabled": "HvButton-ghostSecondaryDisabled",
                      "ghostSecondarySVG": "HvButton-ghostSecondarySVG",
                      "iconSVG": "HvButton-iconSVG",
                      "primary": "HvButton-primary",
                      "primaryDisabled": "HvButton-primaryDisabled",
                      "primarySVG": "HvButton-primarySVG",
                      "root": "HvButton-root",
                      "rootIcon": "HvButton-rootIcon",
                      "secondary": "HvButton-secondary",
                      "secondaryDisabled": "HvButton-secondaryDisabled",
                      "secondarySVG": "HvButton-secondarySVG",
                      "semantic": "HvButton-semantic",
                      "semanticDisabled": "HvButton-semanticDisabled",
                      "semanticSVG": "HvButton-semanticSVG",
                      "startIcon": "HvButton-startIcon",
                    }
                  }
                  disabled={true}
                  id="delete"
                  onClick={[Function]}
                  startIcon={<WithStyles(Delete) />}
                >
                  <WithStyles(ForwardRef(Button))
                    className="HvActions-button HvButton-ghostSVG"
                    classes={
                      Object {
                        "containedPrimary": "HvButton-primary",
                        "disabled": "HvButton-ghostDisabled",
                        "outlinedPrimary": "HvButton-secondary",
                        "root": "HvButton-root",
                        "startIcon": "HvButton-startIcon",
                        "textPrimary": "HvButton-ghost",
                      }
                    }
                    color="primary"
                    disableRipple={true}
                    disabled={true}
                    id="delete"
                    onClick={[Function]}
                    startIcon={<WithStyles(Delete) />}
                    variant="text"
                  >
                    <ForwardRef(Button)
                      className="HvActions-button HvButton-ghostSVG"
                      classes={
                        Object {
                          "colorInherit": "MuiButton-colorInherit",
                          "contained": "MuiButton-contained",
                          "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                          "containedSecondary": "MuiButton-containedSecondary",
                          "containedSizeLarge": "MuiButton-containedSizeLarge",
                          "containedSizeSmall": "MuiButton-containedSizeSmall",
                          "disableElevation": "MuiButton-disableElevation",
                          "disabled": "Mui-disabled HvButton-ghostDisabled",
                          "endIcon": "MuiButton-endIcon",
                          "focusVisible": "Mui-focusVisible",
                          "fullWidth": "MuiButton-fullWidth",
                          "iconSizeLarge": "MuiButton-iconSizeLarge",
                          "iconSizeMedium": "MuiButton-iconSizeMedium",
                          "iconSizeSmall": "MuiButton-iconSizeSmall",
                          "label": "MuiButton-label",
                          "outlined": "MuiButton-outlined",
                          "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                          "outlinedSecondary": "MuiButton-outlinedSecondary",
                          "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                          "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                          "root": "MuiButton-root HvButton-root",
                          "sizeLarge": "MuiButton-sizeLarge",
                          "sizeSmall": "MuiButton-sizeSmall",
                          "startIcon": "MuiButton-startIcon HvButton-startIcon",
                          "text": "MuiButton-text",
                          "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                          "textSecondary": "MuiButton-textSecondary",
                          "textSizeLarge": "MuiButton-textSizeLarge",
                          "textSizeSmall": "MuiButton-textSizeSmall",
                        }
                      }
                      color="primary"
                      disableRipple={true}
                      disabled={true}
                      id="delete"
                      onClick={[Function]}
                      startIcon={<WithStyles(Delete) />}
                      variant="text"
                    >
                      <WithStyles(ForwardRef(ButtonBase))
                        className="MuiButton-root HvButton-root MuiButton-text HvActions-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                        component="button"
                        disableRipple={true}
                        disabled={true}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        id="delete"
                        onClick={[Function]}
                        type="button"
                      >
                        <ForwardRef(ButtonBase)
                          className="MuiButton-root HvButton-root MuiButton-text HvActions-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "focusVisible": "Mui-focusVisible",
                              "root": "MuiButtonBase-root",
                            }
                          }
                          component="button"
                          disableRipple={true}
                          disabled={true}
                          focusRipple={true}
                          focusVisibleClassName="Mui-focusVisible"
                          id="delete"
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvActions-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled Mui-disabled"
                            disabled={true}
                            id="delete"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragLeave={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            tabIndex={-1}
                            type="button"
                          >
                            <span
                              className="MuiButton-label"
                            >
                              <span
                                className="MuiButton-startIcon HvButton-startIcon MuiButton-iconSizeMedium"
                              >
                                <WithStyles(Delete)>
                                  <Delete
                                    classes={
                                      Object {
                                        "root": "HvIconDelete-root",
                                        "rootL": "HvIconDelete-rootL",
                                        "rootM": "HvIconDelete-rootM",
                                        "rootS": "HvIconDelete-rootS",
                                        "rootXs": "HvIconDelete-rootXs",
                                      }
                                    }
                                  >
                                    <div
                                      className="HvIconDelete-root HvIconDelete-rootS"
                                    >
                                      <svg
                                        focusable={false}
                                        height="16px"
                                        viewBox="0 0 16 16"
                                        width="16px"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          className="color0"
                                          d="M4 0h8v1H4zm12 2H0v1h2.1L3 16h10l.9-13H16zm-3.89547 13h-8.1l-.9-12h9.9z"
                                          fill="#414141"
                                        />
                                      </svg>
                                    </div>
                                  </Delete>
                                </WithStyles(Delete)>
                              </span>
                              Delete
                            </span>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Button)>
                  </WithStyles(ForwardRef(Button))>
                </HvButton>
              </WithStyles(HvButton)>
              <WithStyles(WithId)
                classes={
                  Object {
                    "icon": "HvActions-dropDownMenuButton",
                    "iconSelected": "HvActions-dropDownMenuButtonSelected",
                    "root": "HvActions-dropDownMenu",
                  }
                }
                dataList={
                  Array [
                    Object {
                      "iconCallback": [Function],
                      "id": "lock",
                      "label": "Lock",
                    },
                    Object {
                      "iconCallback": [Function],
                      "id": "put",
                      "label": "Preview",
                    },
                  ]
                }
                disablePortal={false}
                disabled={true}
                icon={
                  <WithStyles(MoreOptionsVertical)
                    color="atmo7"
                  />
                }
                id="bulkActions-actions-menu"
                keepOpened={false}
                onClick={[Function]}
                placement="left"
              >
                <WithId
                  classes={
                    Object {
                      "icon": "HvDropDownMenu-icon HvActions-dropDownMenuButton",
                      "iconSelected": "HvDropDownMenu-iconSelected HvActions-dropDownMenuButtonSelected",
                      "inputExtensionFloatLeft": "HvDropDownMenu-inputExtensionFloatLeft",
                      "inputExtensionFloatRight": "HvDropDownMenu-inputExtensionFloatRight",
                      "inputExtensionLeftPosition": "HvDropDownMenu-inputExtensionLeftPosition",
                      "inputExtensionOpen": "HvDropDownMenu-inputExtensionOpen",
                      "inputExtensionOpenShadow": "HvDropDownMenu-inputExtensionOpenShadow",
                      "menuList": "HvDropDownMenu-menuList",
                      "popper": "HvDropDownMenu-popper",
                      "root": "HvDropDownMenu-root HvActions-dropDownMenu",
                    }
                  }
                  dataList={
                    Array [
                      Object {
                        "iconCallback": [Function],
                        "id": "lock",
                        "label": "Lock",
                      },
                      Object {
                        "iconCallback": [Function],
                        "id": "put",
                        "label": "Preview",
                      },
                    ]
                  }
                  disablePortal={false}
                  disabled={true}
                  icon={
                    <WithStyles(MoreOptionsVertical)
                      color="atmo7"
                    />
                  }
                  id="bulkActions-actions-menu"
                  keepOpened={false}
                  onClick={[Function]}
                  placement="left"
                >
                  <DropDownMenu
                    classes={
                      Object {
                        "icon": "HvDropDownMenu-icon HvActions-dropDownMenuButton",
                        "iconSelected": "HvDropDownMenu-iconSelected HvActions-dropDownMenuButtonSelected",
                        "inputExtensionFloatLeft": "HvDropDownMenu-inputExtensionFloatLeft",
                        "inputExtensionFloatRight": "HvDropDownMenu-inputExtensionFloatRight",
                        "inputExtensionLeftPosition": "HvDropDownMenu-inputExtensionLeftPosition",
                        "inputExtensionOpen": "HvDropDownMenu-inputExtensionOpen",
                        "inputExtensionOpenShadow": "HvDropDownMenu-inputExtensionOpenShadow",
                        "menuList": "HvDropDownMenu-menuList",
                        "popper": "HvDropDownMenu-popper",
                        "root": "HvDropDownMenu-root HvActions-dropDownMenu",
                      }
                    }
                    dataList={
                      Array [
                        Object {
                          "iconCallback": [Function],
                          "id": "lock",
                          "label": "Lock",
                        },
                        Object {
                          "iconCallback": [Function],
                          "id": "put",
                          "label": "Preview",
                        },
                      ]
                    }
                    disablePortal={false}
                    disabled={true}
                    icon={
                      <WithStyles(MoreOptionsVertical)
                        color="atmo7"
                      />
                    }
                    id="bulkActions-actions-menu"
                    keepOpened={false}
                    onClick={[Function]}
                    placement="left"
                  >
                    <div
                      className="HvDropDownMenu-root HvActions-dropDownMenu"
                      id="bulkActions-actions-menu"
                    >
                      <WithStyles(ForwardRef(IconButton))
                        aria-haspopup="true"
                        aria-label="Dropdown menu"
                        buttonRef={
                          Object {
                            "current": <button
                              aria-haspopup="true"
                              aria-label="Dropdown menu"
                              class="MuiButtonBase-root MuiIconButton-root HvDropDownMenu-icon HvActions-dropDownMenuButton Mui-disabled Mui-disabled"
                              disabled=""
                              id="bulkActions-actions-menu-icon-button"
                              tabindex="-1"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <div
                                  class="HvIconMoreOptionsVertical-root HvIconMoreOptionsVertical-rootS"
                                >
                                  <svg
                                    focusable="false"
                                    height="16px"
                                    viewBox="0 0 16 16"
                                    width="16px"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      class="color0"
                                      d="M7 7h2v2H7zm0-5h2v2H7zm0 10h2v2H7z"
                                      fill="#999999"
                                    />
                                  </svg>
                                </div>
                              </span>
                            </button>,
                          }
                        }
                        className="HvDropDownMenu-icon HvActions-dropDownMenuButton"
                        disabled={true}
                        id="bulkActions-actions-menu-icon-button"
                        onClick={[Function]}
                        onKeyDown={[Function]}
                      >
                        <ForwardRef(IconButton)
                          aria-haspopup="true"
                          aria-label="Dropdown menu"
                          buttonRef={
                            Object {
                              "current": <button
                                aria-haspopup="true"
                                aria-label="Dropdown menu"
                                class="MuiButtonBase-root MuiIconButton-root HvDropDownMenu-icon HvActions-dropDownMenuButton Mui-disabled Mui-disabled"
                                disabled=""
                                id="bulkActions-actions-menu-icon-button"
                                tabindex="-1"
                                type="button"
                              >
                                <span
                                  class="MuiIconButton-label"
                                >
                                  <div
                                    class="HvIconMoreOptionsVertical-root HvIconMoreOptionsVertical-rootS"
                                  >
                                    <svg
                                      focusable="false"
                                      height="16px"
                                      viewBox="0 0 16 16"
                                      width="16px"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <path
                                        class="color0"
                                        d="M7 7h2v2H7zm0-5h2v2H7zm0 10h2v2H7z"
                                        fill="#999999"
                                      />
                                    </svg>
                                  </div>
                                </span>
                              </button>,
                            }
                          }
                          className="HvDropDownMenu-icon HvActions-dropDownMenuButton"
                          classes={
                            Object {
                              "colorInherit": "MuiIconButton-colorInherit",
                              "colorPrimary": "MuiIconButton-colorPrimary",
                              "colorSecondary": "MuiIconButton-colorSecondary",
                              "disabled": "Mui-disabled",
                              "edgeEnd": "MuiIconButton-edgeEnd",
                              "edgeStart": "MuiIconButton-edgeStart",
                              "label": "MuiIconButton-label",
                              "root": "MuiIconButton-root",
                              "sizeSmall": "MuiIconButton-sizeSmall",
                            }
                          }
                          disabled={true}
                          id="bulkActions-actions-menu-icon-button"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                        >
                          <WithStyles(ForwardRef(ButtonBase))
                            aria-haspopup="true"
                            aria-label="Dropdown menu"
                            buttonRef={
                              Object {
                                "current": <button
                                  aria-haspopup="true"
                                  aria-label="Dropdown menu"
                                  class="MuiButtonBase-root MuiIconButton-root HvDropDownMenu-icon HvActions-dropDownMenuButton Mui-disabled Mui-disabled"
                                  disabled=""
                                  id="bulkActions-actions-menu-icon-button"
                                  tabindex="-1"
                                  type="button"
                                >
                                  <span
                                    class="MuiIconButton-label"
                                  >
                                    <div
                                      class="HvIconMoreOptionsVertical-root HvIconMoreOptionsVertical-rootS"
                                    >
                                      <svg
                                        focusable="false"
                                        height="16px"
                                        viewBox="0 0 16 16"
                                        width="16px"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          class="color0"
                                          d="M7 7h2v2H7zm0-5h2v2H7zm0 10h2v2H7z"
                                          fill="#999999"
                                        />
                                      </svg>
                                    </div>
                                  </span>
                                </button>,
                              }
                            }
                            centerRipple={true}
                            className="MuiIconButton-root HvDropDownMenu-icon HvActions-dropDownMenuButton Mui-disabled"
                            disabled={true}
                            focusRipple={true}
                            id="bulkActions-actions-menu-icon-button"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                          >
                            <ForwardRef(ButtonBase)
                              aria-haspopup="true"
                              aria-label="Dropdown menu"
                              buttonRef={
                                Object {
                                  "current": <button
                                    aria-haspopup="true"
                                    aria-label="Dropdown menu"
                                    class="MuiButtonBase-root MuiIconButton-root HvDropDownMenu-icon HvActions-dropDownMenuButton Mui-disabled Mui-disabled"
                                    disabled=""
                                    id="bulkActions-actions-menu-icon-button"
                                    tabindex="-1"
                                    type="button"
                                  >
                                    <span
                                      class="MuiIconButton-label"
                                    >
                                      <div
                                        class="HvIconMoreOptionsVertical-root HvIconMoreOptionsVertical-rootS"
                                      >
                                        <svg
                                          focusable="false"
                                          height="16px"
                                          viewBox="0 0 16 16"
                                          width="16px"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            class="color0"
                                            d="M7 7h2v2H7zm0-5h2v2H7zm0 10h2v2H7z"
                                            fill="#999999"
                                          />
                                        </svg>
                                      </div>
                                    </span>
                                  </button>,
                                }
                              }
                              centerRipple={true}
                              className="MuiIconButton-root HvDropDownMenu-icon HvActions-dropDownMenuButton Mui-disabled"
                              classes={
                                Object {
                                  "disabled": "Mui-disabled",
                                  "focusVisible": "Mui-focusVisible",
                                  "root": "MuiButtonBase-root",
                                }
                              }
                              disableRipple={true}
                              disabled={true}
                              focusRipple={true}
                              id="bulkActions-actions-menu-icon-button"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                            >
                              <button
                                aria-haspopup="true"
                                aria-label="Dropdown menu"
                                className="MuiButtonBase-root MuiIconButton-root HvDropDownMenu-icon HvActions-dropDownMenuButton Mui-disabled Mui-disabled"
                                disabled={true}
                                id="bulkActions-actions-menu-icon-button"
                                onBlur={[Function]}
                                onClick={[Function]}
                                onDragLeave={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                onMouseDown={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                tabIndex={-1}
                                type="button"
                              >
                                <span
                                  className="MuiIconButton-label"
                                >
                                  <WithStyles(MoreOptionsVertical)
                                    color="atmo7"
                                  >
                                    <MoreOptionsVertical
                                      classes={
                                        Object {
                                          "root": "HvIconMoreOptionsVertical-root",
                                          "rootL": "HvIconMoreOptionsVertical-rootL",
                                          "rootM": "HvIconMoreOptionsVertical-rootM",
                                          "rootS": "HvIconMoreOptionsVertical-rootS",
                                          "rootXs": "HvIconMoreOptionsVertical-rootXs",
                                        }
                                      }
                                      color="atmo7"
                                    >
                                      <div
                                        className="HvIconMoreOptionsVertical-root HvIconMoreOptionsVertical-rootS"
                                      >
                                        <svg
                                          focusable={false}
                                          height="16px"
                                          viewBox="0 0 16 16"
                                          width="16px"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            className="color0"
                                            d="M7 7h2v2H7zm0-5h2v2H7zm0 10h2v2H7z"
                                            fill="#999999"
                                          />
                                        </svg>
                                      </div>
                                    </MoreOptionsVertical>
                                  </WithStyles(MoreOptionsVertical)>
                                </span>
                              </button>
                            </ForwardRef(ButtonBase)>
                          </WithStyles(ForwardRef(ButtonBase))>
                        </ForwardRef(IconButton)>
                      </WithStyles(ForwardRef(IconButton))>
                      <ForwardRef(Popper)
                        anchorEl={null}
                        className="HvDropDownMenu-popper"
                        disablePortal={false}
                        open={false}
                        placement="bottom-end"
                        popperOptions={
                          Object {
                            "onCreate": [Function],
                            "onUpdate": [Function],
                          }
                        }
                      />
                    </div>
                  </DropDownMenu>
                </WithId>
              </WithStyles(WithId)>
            </div>
          </Actions>
        </WithStyles(Actions)>
      </div>
    </HvBulkActions>
  </WithLabels>
</WithStyles(WithLabels)>
`;

exports[`BulkActions should render correctly 1`] = `
<WithStyles(WithLabels)
  actions={
    Array [
      Object {
        "iconCallback": [Function],
        "id": "get",
        "label": "Upload",
      },
      Object {
        "iconCallback": [Function],
        "id": "lock",
        "label": "Lock",
      },
      Object {
        "iconCallback": [Function],
        "id": "delete",
        "label": "Delete",
      },
      Object {
        "iconCallback": [Function],
        "id": "post",
        "label": "Add",
      },
      Object {
        "iconCallback": [Function],
        "id": "put",
        "label": "Preview",
      },
    ]
  }
  actionsCallback={[Function]}
  maxVisibleActions={3}
>
  <WithLabels
    actions={
      Array [
        Object {
          "iconCallback": [Function],
          "id": "get",
          "label": "Upload",
        },
        Object {
          "iconCallback": [Function],
          "id": "lock",
          "label": "Lock",
        },
        Object {
          "iconCallback": [Function],
          "id": "delete",
          "label": "Delete",
        },
        Object {
          "iconCallback": [Function],
          "id": "post",
          "label": "Add",
        },
        Object {
          "iconCallback": [Function],
          "id": "put",
          "label": "Preview",
        },
      ]
    }
    actionsCallback={[Function]}
    classes={
      Object {
        "actions": "HvBulkActions-actions",
        "editMode": "HvBulkActions-editMode",
        "root": "HvBulkActions-root",
        "selectAll": "HvBulkActions-selectAll",
        "selectAllContainer": "HvBulkActions-selectAllContainer",
        "selectAllPages": "HvBulkActions-selectAllPages",
      }
    }
    maxVisibleActions={3}
  >
    <HvBulkActions
      actions={
        Array [
          Object {
            "iconCallback": [Function],
            "id": "get",
            "label": "Upload",
          },
          Object {
            "iconCallback": [Function],
            "id": "lock",
            "label": "Lock",
          },
          Object {
            "iconCallback": [Function],
            "id": "delete",
            "label": "Delete",
          },
          Object {
            "iconCallback": [Function],
            "id": "post",
            "label": "Add",
          },
          Object {
            "iconCallback": [Function],
            "id": "put",
            "label": "Preview",
          },
        ]
      }
      actionsCallback={[Function]}
      classes={
        Object {
          "actions": "HvBulkActions-actions",
          "editMode": "HvBulkActions-editMode",
          "root": "HvBulkActions-root",
          "selectAll": "HvBulkActions-selectAll",
          "selectAllContainer": "HvBulkActions-selectAllContainer",
          "selectAllPages": "HvBulkActions-selectAllPages",
        }
      }
      labels={
        Object {
          "deselectAllPages": "Unselect all",
          "selectAll": "All",
          "selectAllPages": "Select all from all pages",
        }
      }
      maxVisibleActions={3}
    >
      <div
        className="HvBulkActions-root"
      >
        <div
          className="HvBulkActions-selectAllContainer"
        >
          <WithStyles(HvCheckbox)
            checked={false}
            className="HvBulkActions-selectAll"
            indeterminate={false}
            label={
              <WithStyles(ForwardRef)
                component="span"
                variant="normalText"
              >
                <b>
                  All
                </b>
              </WithStyles(ForwardRef)>
            }
            onChange={[Function]}
            semantic={false}
          >
            <HvCheckbox
              checked={false}
              className="HvBulkActions-selectAll"
              classes={
                Object {
                  "checkBox": "HvCheckBox-checkBox",
                  "container": "HvCheckBox-container",
                  "disableFocus": "HvCheckBox-disableFocus",
                  "icon": "HvCheckBox-icon",
                  "labelDisabled": "HvCheckBox-labelDisabled",
                  "labelEnd": "HvCheckBox-labelEnd",
                  "labelStart": "HvCheckBox-labelStart",
                  "labelTypography": "HvCheckBox-labelTypography",
                }
              }
              indeterminate={false}
              label={
                <WithStyles(ForwardRef)
                  component="span"
                  variant="normalText"
                >
                  <b>
                    All
                  </b>
                </WithStyles(ForwardRef)>
              }
              onChange={[Function]}
              semantic={false}
            >
              <WithStyles(ForwardRef(FormControlLabel))
                className="HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                classes={
                  Object {
                    "disabled": "HvCheckBox-labelDisabled",
                    "label": "HvCheckBox-labelTypography",
                  }
                }
                control={
                  <WithStyles(ForwardRef(Checkbox))
                    checked={false}
                    checkedIcon={
                      <WithStyles(CheckboxCheck)
                        className="HvCheckBox-icon"
                      />
                    }
                    className="HvCheckBox-checkBox"
                    color="default"
                    disableRipple={true}
                    disabled={false}
                    icon={
                      <WithStyles(Checkbox)
                        className="HvCheckBox-icon"
                      />
                    }
                    indeterminate={false}
                    indeterminateIcon={
                      <WithStyles(CheckboxPartial)
                        className="HvCheckBox-icon"
                      />
                    }
                    onBlur={[Function]}
                    onChange={[Function]}
                    value=""
                  />
                }
                disabled={false}
                label={
                  <WithStyles(ForwardRef)
                    component="span"
                    variant="normalText"
                  >
                    <b>
                      All
                    </b>
                  </WithStyles(ForwardRef)>
                }
                labelPlacement="end"
              >
                <ForwardRef(FormControlLabel)
                  className="HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                  classes={
                    Object {
                      "disabled": "Mui-disabled HvCheckBox-labelDisabled",
                      "label": "MuiFormControlLabel-label HvCheckBox-labelTypography",
                      "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                      "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                      "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                      "root": "MuiFormControlLabel-root",
                    }
                  }
                  control={
                    <WithStyles(ForwardRef(Checkbox))
                      checked={false}
                      checkedIcon={
                        <WithStyles(CheckboxCheck)
                          className="HvCheckBox-icon"
                        />
                      }
                      className="HvCheckBox-checkBox"
                      color="default"
                      disableRipple={true}
                      disabled={false}
                      icon={
                        <WithStyles(Checkbox)
                          className="HvCheckBox-icon"
                        />
                      }
                      indeterminate={false}
                      indeterminateIcon={
                        <WithStyles(CheckboxPartial)
                          className="HvCheckBox-icon"
                        />
                      }
                      onBlur={[Function]}
                      onChange={[Function]}
                      value=""
                    />
                  }
                  disabled={false}
                  label={
                    <WithStyles(ForwardRef)
                      component="span"
                      variant="normalText"
                    >
                      <b>
                        All
                      </b>
                    </WithStyles(ForwardRef)>
                  }
                  labelPlacement="end"
                >
                  <label
                    className="MuiFormControlLabel-root HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                  >
                    <WithStyles(ForwardRef(Checkbox))
                      checked={false}
                      checkedIcon={
                        <WithStyles(CheckboxCheck)
                          className="HvCheckBox-icon"
                        />
                      }
                      className="HvCheckBox-checkBox"
                      color="default"
                      disableRipple={true}
                      disabled={false}
                      icon={
                        <WithStyles(Checkbox)
                          className="HvCheckBox-icon"
                        />
                      }
                      indeterminate={false}
                      indeterminateIcon={
                        <WithStyles(CheckboxPartial)
                          className="HvCheckBox-icon"
                        />
                      }
                      onBlur={[Function]}
                      onChange={[Function]}
                      value=""
                    >
                      <ForwardRef(Checkbox)
                        checked={false}
                        checkedIcon={
                          <WithStyles(CheckboxCheck)
                            className="HvCheckBox-icon"
                          />
                        }
                        className="HvCheckBox-checkBox"
                        classes={
                          Object {
                            "checked": "Mui-checked",
                            "colorPrimary": "MuiCheckbox-colorPrimary",
                            "colorSecondary": "MuiCheckbox-colorSecondary",
                            "disabled": "Mui-disabled",
                            "indeterminate": "MuiCheckbox-indeterminate",
                            "root": "MuiCheckbox-root",
                          }
                        }
                        color="default"
                        disableRipple={true}
                        disabled={false}
                        icon={
                          <WithStyles(Checkbox)
                            className="HvCheckBox-icon"
                          />
                        }
                        indeterminate={false}
                        indeterminateIcon={
                          <WithStyles(CheckboxPartial)
                            className="HvCheckBox-icon"
                          />
                        }
                        onBlur={[Function]}
                        onChange={[Function]}
                        value=""
                      >
                        <WithStyles(ForwardRef(SwitchBase))
                          checked={false}
                          checkedIcon={
                            <WithStyles(CheckboxCheck)
                              className="HvCheckBox-icon"
                              fontSize="default"
                            />
                          }
                          className="HvCheckBox-checkBox"
                          classes={
                            Object {
                              "checked": "Mui-checked",
                              "disabled": "Mui-disabled",
                              "root": "MuiCheckbox-root",
                            }
                          }
                          color="default"
                          disableRipple={true}
                          disabled={false}
                          icon={
                            <WithStyles(Checkbox)
                              className="HvCheckBox-icon"
                              fontSize="default"
                            />
                          }
                          inputProps={
                            Object {
                              "data-indeterminate": false,
                            }
                          }
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="checkbox"
                          value=""
                        >
                          <ForwardRef(SwitchBase)
                            checked={false}
                            checkedIcon={
                              <WithStyles(CheckboxCheck)
                                className="HvCheckBox-icon"
                                fontSize="default"
                              />
                            }
                            className="HvCheckBox-checkBox"
                            classes={
                              Object {
                                "checked": "PrivateSwitchBase-checked-2 Mui-checked",
                                "disabled": "PrivateSwitchBase-disabled-3 Mui-disabled",
                                "input": "PrivateSwitchBase-input-4",
                                "root": "PrivateSwitchBase-root-1 MuiCheckbox-root",
                              }
                            }
                            color="default"
                            disableRipple={true}
                            disabled={false}
                            icon={
                              <WithStyles(Checkbox)
                                className="HvCheckBox-icon"
                                fontSize="default"
                              />
                            }
                            inputProps={
                              Object {
                                "data-indeterminate": false,
                              }
                            }
                            onBlur={[Function]}
                            onChange={[Function]}
                            type="checkbox"
                            value=""
                          >
                            <WithStyles(ForwardRef(IconButton))
                              className="PrivateSwitchBase-root-1 MuiCheckbox-root HvCheckBox-checkBox"
                              color="default"
                              component="span"
                              disableRipple={true}
                              disabled={false}
                              onBlur={[Function]}
                              onFocus={[Function]}
                              tabIndex={null}
                            >
                              <ForwardRef(IconButton)
                                className="PrivateSwitchBase-root-1 MuiCheckbox-root HvCheckBox-checkBox"
                                classes={
                                  Object {
                                    "colorInherit": "MuiIconButton-colorInherit",
                                    "colorPrimary": "MuiIconButton-colorPrimary",
                                    "colorSecondary": "MuiIconButton-colorSecondary",
                                    "disabled": "Mui-disabled",
                                    "edgeEnd": "MuiIconButton-edgeEnd",
                                    "edgeStart": "MuiIconButton-edgeStart",
                                    "label": "MuiIconButton-label",
                                    "root": "MuiIconButton-root",
                                    "sizeSmall": "MuiIconButton-sizeSmall",
                                  }
                                }
                                color="default"
                                component="span"
                                disableRipple={true}
                                disabled={false}
                                onBlur={[Function]}
                                onFocus={[Function]}
                                tabIndex={null}
                              >
                                <WithStyles(ForwardRef(ButtonBase))
                                  centerRipple={true}
                                  className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root HvCheckBox-checkBox"
                                  component="span"
                                  disableRipple={true}
                                  disabled={false}
                                  focusRipple={true}
                                  onBlur={[Function]}
                                  onFocus={[Function]}
                                  tabIndex={null}
                                >
                                  <ForwardRef(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root HvCheckBox-checkBox"
                                    classes={
                                      Object {
                                        "disabled": "Mui-disabled",
                                        "focusVisible": "Mui-focusVisible",
                                        "root": "MuiButtonBase-root",
                                      }
                                    }
                                    component="span"
                                    disableRipple={true}
                                    disabled={false}
                                    focusRipple={true}
                                    onBlur={[Function]}
                                    onFocus={[Function]}
                                    tabIndex={null}
                                  >
                                    <span
                                      aria-disabled={false}
                                      className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root HvCheckBox-checkBox"
                                      onBlur={[Function]}
                                      onDragLeave={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      onTouchEnd={[Function]}
                                      onTouchMove={[Function]}
                                      onTouchStart={[Function]}
                                      tabIndex={null}
                                    >
                                      <span
                                        className="MuiIconButton-label"
                                      >
                                        <input
                                          checked={false}
                                          className="PrivateSwitchBase-input-4"
                                          data-indeterminate={false}
                                          disabled={false}
                                          onChange={[Function]}
                                          type="checkbox"
                                          value=""
                                        />
                                        <WithStyles(Checkbox)
                                          className="HvCheckBox-icon"
                                          fontSize="default"
                                        >
                                          <Checkbox
                                            className="HvCheckBox-icon"
                                            classes={
                                              Object {
                                                "root": "HvIconCheckbox-root",
                                                "rootL": "HvIconCheckbox-rootL",
                                                "rootM": "HvIconCheckbox-rootM",
                                                "rootS": "HvIconCheckbox-rootS",
                                                "rootXs": "HvIconCheckbox-rootXs",
                                              }
                                            }
                                            fontSize="default"
                                          >
                                            <div
                                              className="HvCheckBox-icon HvIconCheckbox-root HvIconCheckbox-rootS"
                                              fontSize="default"
                                            >
                                              <svg
                                                focusable={false}
                                                height="16px"
                                                viewBox="0 0 16 16"
                                                width="16px"
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <path
                                                  className="color0"
                                                  d="M0 0h16v16H0z"
                                                  fill="#FFFFFF"
                                                />
                                                <path
                                                  className="color1"
                                                  d="M0-.00291v16h16v-16zm15 15H1v-14h14z"
                                                  fill="#414141"
                                                />
                                              </svg>
                                            </div>
                                          </Checkbox>
                                        </WithStyles(Checkbox)>
                                      </span>
                                    </span>
                                  </ForwardRef(ButtonBase)>
                                </WithStyles(ForwardRef(ButtonBase))>
                              </ForwardRef(IconButton)>
                            </WithStyles(ForwardRef(IconButton))>
                          </ForwardRef(SwitchBase)>
                        </WithStyles(ForwardRef(SwitchBase))>
                      </ForwardRef(Checkbox)>
                    </WithStyles(ForwardRef(Checkbox))>
                    <WithStyles(ForwardRef(Typography))
                      className="MuiFormControlLabel-label HvCheckBox-labelTypography"
                      component="span"
                    >
                      <ForwardRef(Typography)
                        className="MuiFormControlLabel-label HvCheckBox-labelTypography"
                        classes={
                          Object {
                            "alignCenter": "MuiTypography-alignCenter",
                            "alignJustify": "MuiTypography-alignJustify",
                            "alignLeft": "MuiTypography-alignLeft",
                            "alignRight": "MuiTypography-alignRight",
                            "body1": "MuiTypography-body1",
                            "body2": "MuiTypography-body2",
                            "button": "MuiTypography-button",
                            "caption": "MuiTypography-caption",
                            "colorError": "MuiTypography-colorError",
                            "colorInherit": "MuiTypography-colorInherit",
                            "colorPrimary": "MuiTypography-colorPrimary",
                            "colorSecondary": "MuiTypography-colorSecondary",
                            "colorTextPrimary": "MuiTypography-colorTextPrimary",
                            "colorTextSecondary": "MuiTypography-colorTextSecondary",
                            "displayBlock": "MuiTypography-displayBlock",
                            "displayInline": "MuiTypography-displayInline",
                            "gutterBottom": "MuiTypography-gutterBottom",
                            "h1": "MuiTypography-h1",
                            "h2": "MuiTypography-h2",
                            "h3": "MuiTypography-h3",
                            "h4": "MuiTypography-h4",
                            "h5": "MuiTypography-h5",
                            "h6": "MuiTypography-h6",
                            "noWrap": "MuiTypography-noWrap",
                            "overline": "MuiTypography-overline",
                            "paragraph": "MuiTypography-paragraph",
                            "root": "MuiTypography-root",
                            "srOnly": "MuiTypography-srOnly",
                            "subtitle1": "MuiTypography-subtitle1",
                            "subtitle2": "MuiTypography-subtitle2",
                          }
                        }
                        component="span"
                      >
                        <span
                          className="MuiTypography-root MuiFormControlLabel-label HvCheckBox-labelTypography MuiTypography-body1"
                        >
                          <WithStyles(ForwardRef)
                            component="span"
                            variant="normalText"
                          >
                            <ForwardRef
                              classes={
                                Object {
                                  "3xlTitle": "HvTypography-3xlTitle",
                                  "4xlTitle": "HvTypography-4xlTitle",
                                  "5xlTitle": "HvTypography-5xlTitle",
                                  "disabledButtonText": "HvTypography-disabledButtonText",
                                  "highlightText": "HvTypography-highlightText",
                                  "infoText": "HvTypography-infoText",
                                  "inlineLink": "HvTypography-inlineLink",
                                  "lTitle": "HvTypography-lTitle",
                                  "labelText": "HvTypography-labelText",
                                  "mTitle": "HvTypography-mTitle",
                                  "normalText": "HvTypography-normalText",
                                  "placeholderText": "HvTypography-placeholderText",
                                  "root": "HvTypography-root",
                                  "sLink": "HvTypography-sLink",
                                  "sText": "HvTypography-sText",
                                  "sTitle": "HvTypography-sTitle",
                                  "selectedNavText": "HvTypography-selectedNavText",
                                  "selectedText": "HvTypography-selectedText",
                                  "vizText": "HvTypography-vizText",
                                  "xlTitle": "HvTypography-xlTitle",
                                  "xsTitle": "HvTypography-xsTitle",
                                  "xxlTitle": "HvTypography-xxlTitle",
                                  "xxsTitle": "HvTypography-xxsTitle",
                                }
                              }
                              component="span"
                              variant="normalText"
                            >
                              <span
                                className="HvTypography-root HvTypography-normalText"
                              >
                                <b>
                                  All
                                </b>
                              </span>
                            </ForwardRef>
                          </WithStyles(ForwardRef)>
                        </span>
                      </ForwardRef(Typography)>
                    </WithStyles(ForwardRef(Typography))>
                  </label>
                </ForwardRef(FormControlLabel)>
              </WithStyles(ForwardRef(FormControlLabel))>
            </HvCheckbox>
          </WithStyles(HvCheckbox)>
        </div>
        <WithStyles(Actions)
          actions={
            Array [
              Object {
                "iconCallback": [Function],
                "id": "get",
                "label": "Upload",
              },
              Object {
                "iconCallback": [Function],
                "id": "lock",
                "label": "Lock",
              },
              Object {
                "iconCallback": [Function],
                "id": "delete",
                "label": "Delete",
              },
              Object {
                "iconCallback": [Function],
                "id": "post",
                "label": "Add",
              },
              Object {
                "iconCallback": [Function],
                "id": "put",
                "label": "Preview",
              },
            ]
          }
          actionsCallback={[Function]}
          category="ghost"
          classes={
            Object {
              "root": "HvBulkActions-actions",
            }
          }
          disabled={true}
          maxVisibleActions={3}
        >
          <Actions
            actions={
              Array [
                Object {
                  "iconCallback": [Function],
                  "id": "get",
                  "label": "Upload",
                },
                Object {
                  "iconCallback": [Function],
                  "id": "lock",
                  "label": "Lock",
                },
                Object {
                  "iconCallback": [Function],
                  "id": "delete",
                  "label": "Delete",
                },
                Object {
                  "iconCallback": [Function],
                  "id": "post",
                  "label": "Add",
                },
                Object {
                  "iconCallback": [Function],
                  "id": "put",
                  "label": "Preview",
                },
              ]
            }
            actionsCallback={[Function]}
            category="ghost"
            classes={
              Object {
                "actionContainer": "HvActions-actionContainer",
                "button": "HvActions-button",
                "dropDownMenu": "HvActions-dropDownMenu",
                "dropDownMenuButton": "HvActions-dropDownMenuButton",
                "dropDownMenuButtonSelected": "HvActions-dropDownMenuButtonSelected",
                "root": "HvActions-root HvBulkActions-actions",
              }
            }
            disabled={true}
            maxVisibleActions={3}
          >
            <div
              className="HvActions-root HvBulkActions-actions HvActions-actionContainer"
            >
              <WithStyles(HvButton)
                category="ghost"
                className="HvActions-button"
                disabled={true}
                id="get"
                key="0"
                onClick={[Function]}
                startIcon={<WithStyles(Upload) />}
              >
                <HvButton
                  category="ghost"
                  className="HvActions-button"
                  classes={
                    Object {
                      "ghost": "HvButton-ghost",
                      "ghostDisabled": "HvButton-ghostDisabled",
                      "ghostSVG": "HvButton-ghostSVG",
                      "ghostSecondary": "HvButton-ghostSecondary",
                      "ghostSecondaryDisabled": "HvButton-ghostSecondaryDisabled",
                      "ghostSecondarySVG": "HvButton-ghostSecondarySVG",
                      "iconSVG": "HvButton-iconSVG",
                      "primary": "HvButton-primary",
                      "primaryDisabled": "HvButton-primaryDisabled",
                      "primarySVG": "HvButton-primarySVG",
                      "root": "HvButton-root",
                      "rootIcon": "HvButton-rootIcon",
                      "secondary": "HvButton-secondary",
                      "secondaryDisabled": "HvButton-secondaryDisabled",
                      "secondarySVG": "HvButton-secondarySVG",
                      "semantic": "HvButton-semantic",
                      "semanticDisabled": "HvButton-semanticDisabled",
                      "semanticSVG": "HvButton-semanticSVG",
                      "startIcon": "HvButton-startIcon",
                    }
                  }
                  disabled={true}
                  id="get"
                  onClick={[Function]}
                  startIcon={<WithStyles(Upload) />}
                >
                  <WithStyles(ForwardRef(Button))
                    className="HvActions-button HvButton-ghostSVG"
                    classes={
                      Object {
                        "containedPrimary": "HvButton-primary",
                        "disabled": "HvButton-ghostDisabled",
                        "outlinedPrimary": "HvButton-secondary",
                        "root": "HvButton-root",
                        "startIcon": "HvButton-startIcon",
                        "textPrimary": "HvButton-ghost",
                      }
                    }
                    color="primary"
                    disableRipple={true}
                    disabled={true}
                    id="get"
                    onClick={[Function]}
                    startIcon={<WithStyles(Upload) />}
                    variant="text"
                  >
                    <ForwardRef(Button)
                      className="HvActions-button HvButton-ghostSVG"
                      classes={
                        Object {
                          "colorInherit": "MuiButton-colorInherit",
                          "contained": "MuiButton-contained",
                          "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                          "containedSecondary": "MuiButton-containedSecondary",
                          "containedSizeLarge": "MuiButton-containedSizeLarge",
                          "containedSizeSmall": "MuiButton-containedSizeSmall",
                          "disableElevation": "MuiButton-disableElevation",
                          "disabled": "Mui-disabled HvButton-ghostDisabled",
                          "endIcon": "MuiButton-endIcon",
                          "focusVisible": "Mui-focusVisible",
                          "fullWidth": "MuiButton-fullWidth",
                          "iconSizeLarge": "MuiButton-iconSizeLarge",
                          "iconSizeMedium": "MuiButton-iconSizeMedium",
                          "iconSizeSmall": "MuiButton-iconSizeSmall",
                          "label": "MuiButton-label",
                          "outlined": "MuiButton-outlined",
                          "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                          "outlinedSecondary": "MuiButton-outlinedSecondary",
                          "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                          "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                          "root": "MuiButton-root HvButton-root",
                          "sizeLarge": "MuiButton-sizeLarge",
                          "sizeSmall": "MuiButton-sizeSmall",
                          "startIcon": "MuiButton-startIcon HvButton-startIcon",
                          "text": "MuiButton-text",
                          "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                          "textSecondary": "MuiButton-textSecondary",
                          "textSizeLarge": "MuiButton-textSizeLarge",
                          "textSizeSmall": "MuiButton-textSizeSmall",
                        }
                      }
                      color="primary"
                      disableRipple={true}
                      disabled={true}
                      id="get"
                      onClick={[Function]}
                      startIcon={<WithStyles(Upload) />}
                      variant="text"
                    >
                      <WithStyles(ForwardRef(ButtonBase))
                        className="MuiButton-root HvButton-root MuiButton-text HvActions-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                        component="button"
                        disableRipple={true}
                        disabled={true}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        id="get"
                        onClick={[Function]}
                        type="button"
                      >
                        <ForwardRef(ButtonBase)
                          className="MuiButton-root HvButton-root MuiButton-text HvActions-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "focusVisible": "Mui-focusVisible",
                              "root": "MuiButtonBase-root",
                            }
                          }
                          component="button"
                          disableRipple={true}
                          disabled={true}
                          focusRipple={true}
                          focusVisibleClassName="Mui-focusVisible"
                          id="get"
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvActions-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled Mui-disabled"
                            disabled={true}
                            id="get"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragLeave={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            tabIndex={-1}
                            type="button"
                          >
                            <span
                              className="MuiButton-label"
                            >
                              <span
                                className="MuiButton-startIcon HvButton-startIcon MuiButton-iconSizeMedium"
                              >
                                <WithStyles(Upload)>
                                  <Upload
                                    classes={
                                      Object {
                                        "root": "HvIconUpload-root",
                                        "rootL": "HvIconUpload-rootL",
                                        "rootM": "HvIconUpload-rootM",
                                        "rootS": "HvIconUpload-rootS",
                                        "rootXs": "HvIconUpload-rootXs",
                                      }
                                    }
                                  >
                                    <div
                                      className="HvIconUpload-root HvIconUpload-rootS"
                                    >
                                      <svg
                                        focusable={false}
                                        height="16px"
                                        viewBox="0 0 16 16"
                                        width="16px"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <g
                                          className="color0"
                                          fill="#414141"
                                        >
                                          <path
                                            d="M15 11v4H1v-4H0v5h16v-5z"
                                          />
                                          <path
                                            d="M7.5 2.2V13h1V2.2l4.1 4.1999.8-.8-5.4-5.3-5.4 5.30005.8.8z"
                                          />
                                        </g>
                                      </svg>
                                    </div>
                                  </Upload>
                                </WithStyles(Upload)>
                              </span>
                              Upload
                            </span>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Button)>
                  </WithStyles(ForwardRef(Button))>
                </HvButton>
              </WithStyles(HvButton)>
              <WithStyles(HvButton)
                category="ghost"
                className="HvActions-button"
                disabled={true}
                id="lock"
                key="1"
                onClick={[Function]}
                startIcon={<WithStyles(Lock) />}
              >
                <HvButton
                  category="ghost"
                  className="HvActions-button"
                  classes={
                    Object {
                      "ghost": "HvButton-ghost",
                      "ghostDisabled": "HvButton-ghostDisabled",
                      "ghostSVG": "HvButton-ghostSVG",
                      "ghostSecondary": "HvButton-ghostSecondary",
                      "ghostSecondaryDisabled": "HvButton-ghostSecondaryDisabled",
                      "ghostSecondarySVG": "HvButton-ghostSecondarySVG",
                      "iconSVG": "HvButton-iconSVG",
                      "primary": "HvButton-primary",
                      "primaryDisabled": "HvButton-primaryDisabled",
                      "primarySVG": "HvButton-primarySVG",
                      "root": "HvButton-root",
                      "rootIcon": "HvButton-rootIcon",
                      "secondary": "HvButton-secondary",
                      "secondaryDisabled": "HvButton-secondaryDisabled",
                      "secondarySVG": "HvButton-secondarySVG",
                      "semantic": "HvButton-semantic",
                      "semanticDisabled": "HvButton-semanticDisabled",
                      "semanticSVG": "HvButton-semanticSVG",
                      "startIcon": "HvButton-startIcon",
                    }
                  }
                  disabled={true}
                  id="lock"
                  onClick={[Function]}
                  startIcon={<WithStyles(Lock) />}
                >
                  <WithStyles(ForwardRef(Button))
                    className="HvActions-button HvButton-ghostSVG"
                    classes={
                      Object {
                        "containedPrimary": "HvButton-primary",
                        "disabled": "HvButton-ghostDisabled",
                        "outlinedPrimary": "HvButton-secondary",
                        "root": "HvButton-root",
                        "startIcon": "HvButton-startIcon",
                        "textPrimary": "HvButton-ghost",
                      }
                    }
                    color="primary"
                    disableRipple={true}
                    disabled={true}
                    id="lock"
                    onClick={[Function]}
                    startIcon={<WithStyles(Lock) />}
                    variant="text"
                  >
                    <ForwardRef(Button)
                      className="HvActions-button HvButton-ghostSVG"
                      classes={
                        Object {
                          "colorInherit": "MuiButton-colorInherit",
                          "contained": "MuiButton-contained",
                          "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                          "containedSecondary": "MuiButton-containedSecondary",
                          "containedSizeLarge": "MuiButton-containedSizeLarge",
                          "containedSizeSmall": "MuiButton-containedSizeSmall",
                          "disableElevation": "MuiButton-disableElevation",
                          "disabled": "Mui-disabled HvButton-ghostDisabled",
                          "endIcon": "MuiButton-endIcon",
                          "focusVisible": "Mui-focusVisible",
                          "fullWidth": "MuiButton-fullWidth",
                          "iconSizeLarge": "MuiButton-iconSizeLarge",
                          "iconSizeMedium": "MuiButton-iconSizeMedium",
                          "iconSizeSmall": "MuiButton-iconSizeSmall",
                          "label": "MuiButton-label",
                          "outlined": "MuiButton-outlined",
                          "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                          "outlinedSecondary": "MuiButton-outlinedSecondary",
                          "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                          "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                          "root": "MuiButton-root HvButton-root",
                          "sizeLarge": "MuiButton-sizeLarge",
                          "sizeSmall": "MuiButton-sizeSmall",
                          "startIcon": "MuiButton-startIcon HvButton-startIcon",
                          "text": "MuiButton-text",
                          "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                          "textSecondary": "MuiButton-textSecondary",
                          "textSizeLarge": "MuiButton-textSizeLarge",
                          "textSizeSmall": "MuiButton-textSizeSmall",
                        }
                      }
                      color="primary"
                      disableRipple={true}
                      disabled={true}
                      id="lock"
                      onClick={[Function]}
                      startIcon={<WithStyles(Lock) />}
                      variant="text"
                    >
                      <WithStyles(ForwardRef(ButtonBase))
                        className="MuiButton-root HvButton-root MuiButton-text HvActions-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                        component="button"
                        disableRipple={true}
                        disabled={true}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        id="lock"
                        onClick={[Function]}
                        type="button"
                      >
                        <ForwardRef(ButtonBase)
                          className="MuiButton-root HvButton-root MuiButton-text HvActions-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "focusVisible": "Mui-focusVisible",
                              "root": "MuiButtonBase-root",
                            }
                          }
                          component="button"
                          disableRipple={true}
                          disabled={true}
                          focusRipple={true}
                          focusVisibleClassName="Mui-focusVisible"
                          id="lock"
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvActions-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled Mui-disabled"
                            disabled={true}
                            id="lock"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragLeave={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            tabIndex={-1}
                            type="button"
                          >
                            <span
                              className="MuiButton-label"
                            >
                              <span
                                className="MuiButton-startIcon HvButton-startIcon MuiButton-iconSizeMedium"
                              >
                                <WithStyles(Lock)>
                                  <Lock
                                    classes={
                                      Object {
                                        "root": "HvIconLock-root",
                                        "rootL": "HvIconLock-rootL",
                                        "rootM": "HvIconLock-rootM",
                                        "rootS": "HvIconLock-rootS",
                                        "rootXs": "HvIconLock-rootXs",
                                      }
                                    }
                                  >
                                    <div
                                      className="HvIconLock-root HvIconLock-rootS"
                                    >
                                      <svg
                                        focusable={false}
                                        height="16px"
                                        viewBox="0 0 16 16"
                                        width="16px"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          className="color0"
                                          d="M7.5 8.09h1v4h-1z"
                                          fill="#414141"
                                        />
                                        <path
                                          className="color0"
                                          d="M12 4V0H4v4H2v12h12V4zM5 1h6v3H5zm8 14H3V5h10z"
                                          fill="#414141"
                                        />
                                      </svg>
                                    </div>
                                  </Lock>
                                </WithStyles(Lock)>
                              </span>
                              Lock
                            </span>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Button)>
                  </WithStyles(ForwardRef(Button))>
                </HvButton>
              </WithStyles(HvButton)>
              <WithStyles(HvButton)
                category="ghost"
                className="HvActions-button"
                disabled={true}
                id="delete"
                key="2"
                onClick={[Function]}
                startIcon={<WithStyles(Delete) />}
              >
                <HvButton
                  category="ghost"
                  className="HvActions-button"
                  classes={
                    Object {
                      "ghost": "HvButton-ghost",
                      "ghostDisabled": "HvButton-ghostDisabled",
                      "ghostSVG": "HvButton-ghostSVG",
                      "ghostSecondary": "HvButton-ghostSecondary",
                      "ghostSecondaryDisabled": "HvButton-ghostSecondaryDisabled",
                      "ghostSecondarySVG": "HvButton-ghostSecondarySVG",
                      "iconSVG": "HvButton-iconSVG",
                      "primary": "HvButton-primary",
                      "primaryDisabled": "HvButton-primaryDisabled",
                      "primarySVG": "HvButton-primarySVG",
                      "root": "HvButton-root",
                      "rootIcon": "HvButton-rootIcon",
                      "secondary": "HvButton-secondary",
                      "secondaryDisabled": "HvButton-secondaryDisabled",
                      "secondarySVG": "HvButton-secondarySVG",
                      "semantic": "HvButton-semantic",
                      "semanticDisabled": "HvButton-semanticDisabled",
                      "semanticSVG": "HvButton-semanticSVG",
                      "startIcon": "HvButton-startIcon",
                    }
                  }
                  disabled={true}
                  id="delete"
                  onClick={[Function]}
                  startIcon={<WithStyles(Delete) />}
                >
                  <WithStyles(ForwardRef(Button))
                    className="HvActions-button HvButton-ghostSVG"
                    classes={
                      Object {
                        "containedPrimary": "HvButton-primary",
                        "disabled": "HvButton-ghostDisabled",
                        "outlinedPrimary": "HvButton-secondary",
                        "root": "HvButton-root",
                        "startIcon": "HvButton-startIcon",
                        "textPrimary": "HvButton-ghost",
                      }
                    }
                    color="primary"
                    disableRipple={true}
                    disabled={true}
                    id="delete"
                    onClick={[Function]}
                    startIcon={<WithStyles(Delete) />}
                    variant="text"
                  >
                    <ForwardRef(Button)
                      className="HvActions-button HvButton-ghostSVG"
                      classes={
                        Object {
                          "colorInherit": "MuiButton-colorInherit",
                          "contained": "MuiButton-contained",
                          "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                          "containedSecondary": "MuiButton-containedSecondary",
                          "containedSizeLarge": "MuiButton-containedSizeLarge",
                          "containedSizeSmall": "MuiButton-containedSizeSmall",
                          "disableElevation": "MuiButton-disableElevation",
                          "disabled": "Mui-disabled HvButton-ghostDisabled",
                          "endIcon": "MuiButton-endIcon",
                          "focusVisible": "Mui-focusVisible",
                          "fullWidth": "MuiButton-fullWidth",
                          "iconSizeLarge": "MuiButton-iconSizeLarge",
                          "iconSizeMedium": "MuiButton-iconSizeMedium",
                          "iconSizeSmall": "MuiButton-iconSizeSmall",
                          "label": "MuiButton-label",
                          "outlined": "MuiButton-outlined",
                          "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                          "outlinedSecondary": "MuiButton-outlinedSecondary",
                          "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                          "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                          "root": "MuiButton-root HvButton-root",
                          "sizeLarge": "MuiButton-sizeLarge",
                          "sizeSmall": "MuiButton-sizeSmall",
                          "startIcon": "MuiButton-startIcon HvButton-startIcon",
                          "text": "MuiButton-text",
                          "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                          "textSecondary": "MuiButton-textSecondary",
                          "textSizeLarge": "MuiButton-textSizeLarge",
                          "textSizeSmall": "MuiButton-textSizeSmall",
                        }
                      }
                      color="primary"
                      disableRipple={true}
                      disabled={true}
                      id="delete"
                      onClick={[Function]}
                      startIcon={<WithStyles(Delete) />}
                      variant="text"
                    >
                      <WithStyles(ForwardRef(ButtonBase))
                        className="MuiButton-root HvButton-root MuiButton-text HvActions-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                        component="button"
                        disableRipple={true}
                        disabled={true}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        id="delete"
                        onClick={[Function]}
                        type="button"
                      >
                        <ForwardRef(ButtonBase)
                          className="MuiButton-root HvButton-root MuiButton-text HvActions-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "focusVisible": "Mui-focusVisible",
                              "root": "MuiButtonBase-root",
                            }
                          }
                          component="button"
                          disableRipple={true}
                          disabled={true}
                          focusRipple={true}
                          focusVisibleClassName="Mui-focusVisible"
                          id="delete"
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvActions-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled Mui-disabled"
                            disabled={true}
                            id="delete"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragLeave={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            tabIndex={-1}
                            type="button"
                          >
                            <span
                              className="MuiButton-label"
                            >
                              <span
                                className="MuiButton-startIcon HvButton-startIcon MuiButton-iconSizeMedium"
                              >
                                <WithStyles(Delete)>
                                  <Delete
                                    classes={
                                      Object {
                                        "root": "HvIconDelete-root",
                                        "rootL": "HvIconDelete-rootL",
                                        "rootM": "HvIconDelete-rootM",
                                        "rootS": "HvIconDelete-rootS",
                                        "rootXs": "HvIconDelete-rootXs",
                                      }
                                    }
                                  >
                                    <div
                                      className="HvIconDelete-root HvIconDelete-rootS"
                                    >
                                      <svg
                                        focusable={false}
                                        height="16px"
                                        viewBox="0 0 16 16"
                                        width="16px"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          className="color0"
                                          d="M4 0h8v1H4zm12 2H0v1h2.1L3 16h10l.9-13H16zm-3.89547 13h-8.1l-.9-12h9.9z"
                                          fill="#414141"
                                        />
                                      </svg>
                                    </div>
                                  </Delete>
                                </WithStyles(Delete)>
                              </span>
                              Delete
                            </span>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Button)>
                  </WithStyles(ForwardRef(Button))>
                </HvButton>
              </WithStyles(HvButton)>
              <WithStyles(WithId)
                classes={
                  Object {
                    "icon": "HvActions-dropDownMenuButton",
                    "iconSelected": "HvActions-dropDownMenuButtonSelected",
                    "root": "HvActions-dropDownMenu",
                  }
                }
                dataList={
                  Array [
                    Object {
                      "iconCallback": [Function],
                      "id": "post",
                      "label": "Add",
                    },
                    Object {
                      "iconCallback": [Function],
                      "id": "put",
                      "label": "Preview",
                    },
                  ]
                }
                disablePortal={false}
                disabled={true}
                icon={
                  <WithStyles(MoreOptionsVertical)
                    color="atmo7"
                  />
                }
                keepOpened={false}
                onClick={[Function]}
                placement="left"
              >
                <WithId
                  classes={
                    Object {
                      "icon": "HvDropDownMenu-icon HvActions-dropDownMenuButton",
                      "iconSelected": "HvDropDownMenu-iconSelected HvActions-dropDownMenuButtonSelected",
                      "inputExtensionFloatLeft": "HvDropDownMenu-inputExtensionFloatLeft",
                      "inputExtensionFloatRight": "HvDropDownMenu-inputExtensionFloatRight",
                      "inputExtensionLeftPosition": "HvDropDownMenu-inputExtensionLeftPosition",
                      "inputExtensionOpen": "HvDropDownMenu-inputExtensionOpen",
                      "inputExtensionOpenShadow": "HvDropDownMenu-inputExtensionOpenShadow",
                      "menuList": "HvDropDownMenu-menuList",
                      "popper": "HvDropDownMenu-popper",
                      "root": "HvDropDownMenu-root HvActions-dropDownMenu",
                    }
                  }
                  dataList={
                    Array [
                      Object {
                        "iconCallback": [Function],
                        "id": "post",
                        "label": "Add",
                      },
                      Object {
                        "iconCallback": [Function],
                        "id": "put",
                        "label": "Preview",
                      },
                    ]
                  }
                  disablePortal={false}
                  disabled={true}
                  icon={
                    <WithStyles(MoreOptionsVertical)
                      color="atmo7"
                    />
                  }
                  keepOpened={false}
                  onClick={[Function]}
                  placement="left"
                >
                  <DropDownMenu
                    classes={
                      Object {
                        "icon": "HvDropDownMenu-icon HvActions-dropDownMenuButton",
                        "iconSelected": "HvDropDownMenu-iconSelected HvActions-dropDownMenuButtonSelected",
                        "inputExtensionFloatLeft": "HvDropDownMenu-inputExtensionFloatLeft",
                        "inputExtensionFloatRight": "HvDropDownMenu-inputExtensionFloatRight",
                        "inputExtensionLeftPosition": "HvDropDownMenu-inputExtensionLeftPosition",
                        "inputExtensionOpen": "HvDropDownMenu-inputExtensionOpen",
                        "inputExtensionOpenShadow": "HvDropDownMenu-inputExtensionOpenShadow",
                        "menuList": "HvDropDownMenu-menuList",
                        "popper": "HvDropDownMenu-popper",
                        "root": "HvDropDownMenu-root HvActions-dropDownMenu",
                      }
                    }
                    dataList={
                      Array [
                        Object {
                          "iconCallback": [Function],
                          "id": "post",
                          "label": "Add",
                        },
                        Object {
                          "iconCallback": [Function],
                          "id": "put",
                          "label": "Preview",
                        },
                      ]
                    }
                    disablePortal={false}
                    disabled={true}
                    icon={
                      <WithStyles(MoreOptionsVertical)
                        color="atmo7"
                      />
                    }
                    id="drop-down-menu-1"
                    keepOpened={false}
                    onClick={[Function]}
                    placement="left"
                  >
                    <div
                      className="HvDropDownMenu-root HvActions-dropDownMenu"
                      id="drop-down-menu-1"
                    >
                      <WithStyles(ForwardRef(IconButton))
                        aria-haspopup="true"
                        aria-label="Dropdown menu"
                        buttonRef={
                          Object {
                            "current": <button
                              aria-haspopup="true"
                              aria-label="Dropdown menu"
                              class="MuiButtonBase-root MuiIconButton-root HvDropDownMenu-icon HvActions-dropDownMenuButton Mui-disabled Mui-disabled"
                              disabled=""
                              id="drop-down-menu-1-icon-button"
                              tabindex="-1"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <div
                                  class="HvIconMoreOptionsVertical-root HvIconMoreOptionsVertical-rootS"
                                >
                                  <svg
                                    focusable="false"
                                    height="16px"
                                    viewBox="0 0 16 16"
                                    width="16px"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      class="color0"
                                      d="M7 7h2v2H7zm0-5h2v2H7zm0 10h2v2H7z"
                                      fill="#999999"
                                    />
                                  </svg>
                                </div>
                              </span>
                            </button>,
                          }
                        }
                        className="HvDropDownMenu-icon HvActions-dropDownMenuButton"
                        disabled={true}
                        id="drop-down-menu-1-icon-button"
                        onClick={[Function]}
                        onKeyDown={[Function]}
                      >
                        <ForwardRef(IconButton)
                          aria-haspopup="true"
                          aria-label="Dropdown menu"
                          buttonRef={
                            Object {
                              "current": <button
                                aria-haspopup="true"
                                aria-label="Dropdown menu"
                                class="MuiButtonBase-root MuiIconButton-root HvDropDownMenu-icon HvActions-dropDownMenuButton Mui-disabled Mui-disabled"
                                disabled=""
                                id="drop-down-menu-1-icon-button"
                                tabindex="-1"
                                type="button"
                              >
                                <span
                                  class="MuiIconButton-label"
                                >
                                  <div
                                    class="HvIconMoreOptionsVertical-root HvIconMoreOptionsVertical-rootS"
                                  >
                                    <svg
                                      focusable="false"
                                      height="16px"
                                      viewBox="0 0 16 16"
                                      width="16px"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <path
                                        class="color0"
                                        d="M7 7h2v2H7zm0-5h2v2H7zm0 10h2v2H7z"
                                        fill="#999999"
                                      />
                                    </svg>
                                  </div>
                                </span>
                              </button>,
                            }
                          }
                          className="HvDropDownMenu-icon HvActions-dropDownMenuButton"
                          classes={
                            Object {
                              "colorInherit": "MuiIconButton-colorInherit",
                              "colorPrimary": "MuiIconButton-colorPrimary",
                              "colorSecondary": "MuiIconButton-colorSecondary",
                              "disabled": "Mui-disabled",
                              "edgeEnd": "MuiIconButton-edgeEnd",
                              "edgeStart": "MuiIconButton-edgeStart",
                              "label": "MuiIconButton-label",
                              "root": "MuiIconButton-root",
                              "sizeSmall": "MuiIconButton-sizeSmall",
                            }
                          }
                          disabled={true}
                          id="drop-down-menu-1-icon-button"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                        >
                          <WithStyles(ForwardRef(ButtonBase))
                            aria-haspopup="true"
                            aria-label="Dropdown menu"
                            buttonRef={
                              Object {
                                "current": <button
                                  aria-haspopup="true"
                                  aria-label="Dropdown menu"
                                  class="MuiButtonBase-root MuiIconButton-root HvDropDownMenu-icon HvActions-dropDownMenuButton Mui-disabled Mui-disabled"
                                  disabled=""
                                  id="drop-down-menu-1-icon-button"
                                  tabindex="-1"
                                  type="button"
                                >
                                  <span
                                    class="MuiIconButton-label"
                                  >
                                    <div
                                      class="HvIconMoreOptionsVertical-root HvIconMoreOptionsVertical-rootS"
                                    >
                                      <svg
                                        focusable="false"
                                        height="16px"
                                        viewBox="0 0 16 16"
                                        width="16px"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          class="color0"
                                          d="M7 7h2v2H7zm0-5h2v2H7zm0 10h2v2H7z"
                                          fill="#999999"
                                        />
                                      </svg>
                                    </div>
                                  </span>
                                </button>,
                              }
                            }
                            centerRipple={true}
                            className="MuiIconButton-root HvDropDownMenu-icon HvActions-dropDownMenuButton Mui-disabled"
                            disabled={true}
                            focusRipple={true}
                            id="drop-down-menu-1-icon-button"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                          >
                            <ForwardRef(ButtonBase)
                              aria-haspopup="true"
                              aria-label="Dropdown menu"
                              buttonRef={
                                Object {
                                  "current": <button
                                    aria-haspopup="true"
                                    aria-label="Dropdown menu"
                                    class="MuiButtonBase-root MuiIconButton-root HvDropDownMenu-icon HvActions-dropDownMenuButton Mui-disabled Mui-disabled"
                                    disabled=""
                                    id="drop-down-menu-1-icon-button"
                                    tabindex="-1"
                                    type="button"
                                  >
                                    <span
                                      class="MuiIconButton-label"
                                    >
                                      <div
                                        class="HvIconMoreOptionsVertical-root HvIconMoreOptionsVertical-rootS"
                                      >
                                        <svg
                                          focusable="false"
                                          height="16px"
                                          viewBox="0 0 16 16"
                                          width="16px"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            class="color0"
                                            d="M7 7h2v2H7zm0-5h2v2H7zm0 10h2v2H7z"
                                            fill="#999999"
                                          />
                                        </svg>
                                      </div>
                                    </span>
                                  </button>,
                                }
                              }
                              centerRipple={true}
                              className="MuiIconButton-root HvDropDownMenu-icon HvActions-dropDownMenuButton Mui-disabled"
                              classes={
                                Object {
                                  "disabled": "Mui-disabled",
                                  "focusVisible": "Mui-focusVisible",
                                  "root": "MuiButtonBase-root",
                                }
                              }
                              disableRipple={true}
                              disabled={true}
                              focusRipple={true}
                              id="drop-down-menu-1-icon-button"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                            >
                              <button
                                aria-haspopup="true"
                                aria-label="Dropdown menu"
                                className="MuiButtonBase-root MuiIconButton-root HvDropDownMenu-icon HvActions-dropDownMenuButton Mui-disabled Mui-disabled"
                                disabled={true}
                                id="drop-down-menu-1-icon-button"
                                onBlur={[Function]}
                                onClick={[Function]}
                                onDragLeave={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                onMouseDown={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                tabIndex={-1}
                                type="button"
                              >
                                <span
                                  className="MuiIconButton-label"
                                >
                                  <WithStyles(MoreOptionsVertical)
                                    color="atmo7"
                                  >
                                    <MoreOptionsVertical
                                      classes={
                                        Object {
                                          "root": "HvIconMoreOptionsVertical-root",
                                          "rootL": "HvIconMoreOptionsVertical-rootL",
                                          "rootM": "HvIconMoreOptionsVertical-rootM",
                                          "rootS": "HvIconMoreOptionsVertical-rootS",
                                          "rootXs": "HvIconMoreOptionsVertical-rootXs",
                                        }
                                      }
                                      color="atmo7"
                                    >
                                      <div
                                        className="HvIconMoreOptionsVertical-root HvIconMoreOptionsVertical-rootS"
                                      >
                                        <svg
                                          focusable={false}
                                          height="16px"
                                          viewBox="0 0 16 16"
                                          width="16px"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            className="color0"
                                            d="M7 7h2v2H7zm0-5h2v2H7zm0 10h2v2H7z"
                                            fill="#999999"
                                          />
                                        </svg>
                                      </div>
                                    </MoreOptionsVertical>
                                  </WithStyles(MoreOptionsVertical)>
                                </span>
                              </button>
                            </ForwardRef(ButtonBase)>
                          </WithStyles(ForwardRef(ButtonBase))>
                        </ForwardRef(IconButton)>
                      </WithStyles(ForwardRef(IconButton))>
                      <ForwardRef(Popper)
                        anchorEl={null}
                        className="HvDropDownMenu-popper"
                        disablePortal={false}
                        open={false}
                        placement="bottom-end"
                        popperOptions={
                          Object {
                            "onCreate": [Function],
                            "onUpdate": [Function],
                          }
                        }
                      />
                    </div>
                  </DropDownMenu>
                </WithId>
              </WithStyles(WithId)>
            </div>
          </Actions>
        </WithStyles(Actions)>
      </div>
    </HvBulkActions>
  </WithLabels>
</WithStyles(WithLabels)>
`;

exports[`BulkActions with custom label should render correctly 1`] = `
<WithStyles(WithLabels)
  numSelected={2}
  numTotal={5}
  selectAllLabel="MockLabel"
>
  <WithLabels
    classes={
      Object {
        "actions": "HvBulkActions-actions",
        "editMode": "HvBulkActions-editMode",
        "root": "HvBulkActions-root",
        "selectAll": "HvBulkActions-selectAll",
        "selectAllContainer": "HvBulkActions-selectAllContainer",
        "selectAllPages": "HvBulkActions-selectAllPages",
      }
    }
    numSelected={2}
    numTotal={5}
    selectAllLabel="MockLabel"
  >
    <HvBulkActions
      classes={
        Object {
          "actions": "HvBulkActions-actions",
          "editMode": "HvBulkActions-editMode",
          "root": "HvBulkActions-root",
          "selectAll": "HvBulkActions-selectAll",
          "selectAllContainer": "HvBulkActions-selectAllContainer",
          "selectAllPages": "HvBulkActions-selectAllPages",
        }
      }
      labels={
        Object {
          "deselectAllPages": "Unselect all",
          "selectAll": "All",
          "selectAllPages": "Select all from all pages",
        }
      }
      numSelected={2}
      numTotal={5}
      selectAllLabel="MockLabel"
    >
      <div
        className="HvBulkActions-root HvBulkActions-editMode"
      >
        <div
          className="HvBulkActions-selectAllContainer"
        >
          <WithStyles(HvCheckbox)
            checked={true}
            className="HvBulkActions-selectAll"
            indeterminate={true}
            label="MockLabel"
            onChange={[Function]}
            semantic={true}
          >
            <HvCheckbox
              checked={true}
              className="HvBulkActions-selectAll"
              classes={
                Object {
                  "checkBox": "HvCheckBox-checkBox",
                  "container": "HvCheckBox-container",
                  "disableFocus": "HvCheckBox-disableFocus",
                  "icon": "HvCheckBox-icon",
                  "labelDisabled": "HvCheckBox-labelDisabled",
                  "labelEnd": "HvCheckBox-labelEnd",
                  "labelStart": "HvCheckBox-labelStart",
                  "labelTypography": "HvCheckBox-labelTypography",
                }
              }
              indeterminate={true}
              label="MockLabel"
              onChange={[Function]}
              semantic={true}
            >
              <WithStyles(ForwardRef(FormControlLabel))
                className="HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                classes={
                  Object {
                    "disabled": "HvCheckBox-labelDisabled",
                    "label": "HvCheckBox-labelTypography",
                  }
                }
                control={
                  <WithStyles(ForwardRef(Checkbox))
                    checked={true}
                    checkedIcon={
                      <WithStyles(CheckboxCheck)
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base2",
                            "base1",
                          ]
                        }
                      />
                    }
                    className="HvCheckBox-checkBox"
                    color="default"
                    disableRipple={true}
                    disabled={false}
                    icon={
                      <WithStyles(Checkbox)
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base1",
                            "base2",
                          ]
                        }
                      />
                    }
                    indeterminate={true}
                    indeterminateIcon={
                      <WithStyles(CheckboxPartial)
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base1",
                            "base2",
                          ]
                        }
                      />
                    }
                    onBlur={[Function]}
                    onChange={[Function]}
                    value=""
                  />
                }
                disabled={false}
                label="MockLabel"
                labelPlacement="end"
              >
                <ForwardRef(FormControlLabel)
                  className="HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                  classes={
                    Object {
                      "disabled": "Mui-disabled HvCheckBox-labelDisabled",
                      "label": "MuiFormControlLabel-label HvCheckBox-labelTypography",
                      "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                      "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                      "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                      "root": "MuiFormControlLabel-root",
                    }
                  }
                  control={
                    <WithStyles(ForwardRef(Checkbox))
                      checked={true}
                      checkedIcon={
                        <WithStyles(CheckboxCheck)
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base2",
                              "base1",
                            ]
                          }
                        />
                      }
                      className="HvCheckBox-checkBox"
                      color="default"
                      disableRipple={true}
                      disabled={false}
                      icon={
                        <WithStyles(Checkbox)
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base1",
                              "base2",
                            ]
                          }
                        />
                      }
                      indeterminate={true}
                      indeterminateIcon={
                        <WithStyles(CheckboxPartial)
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base1",
                              "base2",
                            ]
                          }
                        />
                      }
                      onBlur={[Function]}
                      onChange={[Function]}
                      value=""
                    />
                  }
                  disabled={false}
                  label="MockLabel"
                  labelPlacement="end"
                >
                  <label
                    className="MuiFormControlLabel-root HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                  >
                    <WithStyles(ForwardRef(Checkbox))
                      checked={true}
                      checkedIcon={
                        <WithStyles(CheckboxCheck)
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base2",
                              "base1",
                            ]
                          }
                        />
                      }
                      className="HvCheckBox-checkBox"
                      color="default"
                      disableRipple={true}
                      disabled={false}
                      icon={
                        <WithStyles(Checkbox)
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base1",
                              "base2",
                            ]
                          }
                        />
                      }
                      indeterminate={true}
                      indeterminateIcon={
                        <WithStyles(CheckboxPartial)
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base1",
                              "base2",
                            ]
                          }
                        />
                      }
                      onBlur={[Function]}
                      onChange={[Function]}
                      value=""
                    >
                      <ForwardRef(Checkbox)
                        checked={true}
                        checkedIcon={
                          <WithStyles(CheckboxCheck)
                            className="HvCheckBox-icon"
                            color={
                              Array [
                                "base2",
                                "base1",
                              ]
                            }
                          />
                        }
                        className="HvCheckBox-checkBox"
                        classes={
                          Object {
                            "checked": "Mui-checked",
                            "colorPrimary": "MuiCheckbox-colorPrimary",
                            "colorSecondary": "MuiCheckbox-colorSecondary",
                            "disabled": "Mui-disabled",
                            "indeterminate": "MuiCheckbox-indeterminate",
                            "root": "MuiCheckbox-root",
                          }
                        }
                        color="default"
                        disableRipple={true}
                        disabled={false}
                        icon={
                          <WithStyles(Checkbox)
                            className="HvCheckBox-icon"
                            color={
                              Array [
                                "base1",
                                "base2",
                              ]
                            }
                          />
                        }
                        indeterminate={true}
                        indeterminateIcon={
                          <WithStyles(CheckboxPartial)
                            className="HvCheckBox-icon"
                            color={
                              Array [
                                "base1",
                                "base2",
                              ]
                            }
                          />
                        }
                        onBlur={[Function]}
                        onChange={[Function]}
                        value=""
                      >
                        <WithStyles(ForwardRef(SwitchBase))
                          checked={true}
                          checkedIcon={
                            <WithStyles(CheckboxPartial)
                              className="HvCheckBox-icon"
                              color={
                                Array [
                                  "base1",
                                  "base2",
                                ]
                              }
                              fontSize="default"
                            />
                          }
                          className="HvCheckBox-checkBox"
                          classes={
                            Object {
                              "checked": "Mui-checked",
                              "disabled": "Mui-disabled",
                              "root": "MuiCheckbox-root MuiCheckbox-indeterminate",
                            }
                          }
                          color="default"
                          disableRipple={true}
                          disabled={false}
                          icon={
                            <WithStyles(CheckboxPartial)
                              className="HvCheckBox-icon"
                              color={
                                Array [
                                  "base1",
                                  "base2",
                                ]
                              }
                              fontSize="default"
                            />
                          }
                          inputProps={
                            Object {
                              "data-indeterminate": true,
                            }
                          }
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="checkbox"
                          value=""
                        >
                          <ForwardRef(SwitchBase)
                            checked={true}
                            checkedIcon={
                              <WithStyles(CheckboxPartial)
                                className="HvCheckBox-icon"
                                color={
                                  Array [
                                    "base1",
                                    "base2",
                                  ]
                                }
                                fontSize="default"
                              />
                            }
                            className="HvCheckBox-checkBox"
                            classes={
                              Object {
                                "checked": "PrivateSwitchBase-checked-2 Mui-checked",
                                "disabled": "PrivateSwitchBase-disabled-3 Mui-disabled",
                                "input": "PrivateSwitchBase-input-4",
                                "root": "PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-indeterminate",
                              }
                            }
                            color="default"
                            disableRipple={true}
                            disabled={false}
                            icon={
                              <WithStyles(CheckboxPartial)
                                className="HvCheckBox-icon"
                                color={
                                  Array [
                                    "base1",
                                    "base2",
                                  ]
                                }
                                fontSize="default"
                              />
                            }
                            inputProps={
                              Object {
                                "data-indeterminate": true,
                              }
                            }
                            onBlur={[Function]}
                            onChange={[Function]}
                            type="checkbox"
                            value=""
                          >
                            <WithStyles(ForwardRef(IconButton))
                              className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-2 Mui-checked"
                              color="default"
                              component="span"
                              disableRipple={true}
                              disabled={false}
                              onBlur={[Function]}
                              onFocus={[Function]}
                              tabIndex={null}
                            >
                              <ForwardRef(IconButton)
                                className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-2 Mui-checked"
                                classes={
                                  Object {
                                    "colorInherit": "MuiIconButton-colorInherit",
                                    "colorPrimary": "MuiIconButton-colorPrimary",
                                    "colorSecondary": "MuiIconButton-colorSecondary",
                                    "disabled": "Mui-disabled",
                                    "edgeEnd": "MuiIconButton-edgeEnd",
                                    "edgeStart": "MuiIconButton-edgeStart",
                                    "label": "MuiIconButton-label",
                                    "root": "MuiIconButton-root",
                                    "sizeSmall": "MuiIconButton-sizeSmall",
                                  }
                                }
                                color="default"
                                component="span"
                                disableRipple={true}
                                disabled={false}
                                onBlur={[Function]}
                                onFocus={[Function]}
                                tabIndex={null}
                              >
                                <WithStyles(ForwardRef(ButtonBase))
                                  centerRipple={true}
                                  className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-2 Mui-checked"
                                  component="span"
                                  disableRipple={true}
                                  disabled={false}
                                  focusRipple={true}
                                  onBlur={[Function]}
                                  onFocus={[Function]}
                                  tabIndex={null}
                                >
                                  <ForwardRef(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-2 Mui-checked"
                                    classes={
                                      Object {
                                        "disabled": "Mui-disabled",
                                        "focusVisible": "Mui-focusVisible",
                                        "root": "MuiButtonBase-root",
                                      }
                                    }
                                    component="span"
                                    disableRipple={true}
                                    disabled={false}
                                    focusRipple={true}
                                    onBlur={[Function]}
                                    onFocus={[Function]}
                                    tabIndex={null}
                                  >
                                    <span
                                      aria-disabled={false}
                                      className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-2 Mui-checked"
                                      onBlur={[Function]}
                                      onDragLeave={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      onTouchEnd={[Function]}
                                      onTouchMove={[Function]}
                                      onTouchStart={[Function]}
                                      tabIndex={null}
                                    >
                                      <span
                                        className="MuiIconButton-label"
                                      >
                                        <input
                                          checked={true}
                                          className="PrivateSwitchBase-input-4"
                                          data-indeterminate={true}
                                          disabled={false}
                                          onChange={[Function]}
                                          type="checkbox"
                                          value=""
                                        />
                                        <WithStyles(CheckboxPartial)
                                          className="HvCheckBox-icon"
                                          color={
                                            Array [
                                              "base1",
                                              "base2",
                                            ]
                                          }
                                          fontSize="default"
                                        >
                                          <CheckboxPartial
                                            className="HvCheckBox-icon"
                                            classes={
                                              Object {
                                                "root": "HvIconCheckboxPartial-root",
                                                "rootL": "HvIconCheckboxPartial-rootL",
                                                "rootM": "HvIconCheckboxPartial-rootM",
                                                "rootS": "HvIconCheckboxPartial-rootS",
                                                "rootXs": "HvIconCheckboxPartial-rootXs",
                                              }
                                            }
                                            color={
                                              Array [
                                                "base1",
                                                "base2",
                                              ]
                                            }
                                            fontSize="default"
                                          >
                                            <div
                                              className="HvCheckBox-icon HvIconCheckboxPartial-root HvIconCheckboxPartial-rootS"
                                              fontSize="default"
                                            >
                                              <svg
                                                focusable={false}
                                                height="16px"
                                                viewBox="0 0 16 16"
                                                width="16px"
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <path
                                                  className="color0"
                                                  d="M0 0h16v16H0z"
                                                  fill="#FFFFFF"
                                                />
                                                <g
                                                  className="color1"
                                                  fill="#414141"
                                                >
                                                  <path
                                                    d="M0 0v16h16V0zm15 15H1V1h14z"
                                                  />
                                                  <path
                                                    d="M4 7h8v2H4z"
                                                  />
                                                </g>
                                              </svg>
                                            </div>
                                          </CheckboxPartial>
                                        </WithStyles(CheckboxPartial)>
                                      </span>
                                    </span>
                                  </ForwardRef(ButtonBase)>
                                </WithStyles(ForwardRef(ButtonBase))>
                              </ForwardRef(IconButton)>
                            </WithStyles(ForwardRef(IconButton))>
                          </ForwardRef(SwitchBase)>
                        </WithStyles(ForwardRef(SwitchBase))>
                      </ForwardRef(Checkbox)>
                    </WithStyles(ForwardRef(Checkbox))>
                    <WithStyles(ForwardRef(Typography))
                      className="MuiFormControlLabel-label HvCheckBox-labelTypography"
                      component="span"
                    >
                      <ForwardRef(Typography)
                        className="MuiFormControlLabel-label HvCheckBox-labelTypography"
                        classes={
                          Object {
                            "alignCenter": "MuiTypography-alignCenter",
                            "alignJustify": "MuiTypography-alignJustify",
                            "alignLeft": "MuiTypography-alignLeft",
                            "alignRight": "MuiTypography-alignRight",
                            "body1": "MuiTypography-body1",
                            "body2": "MuiTypography-body2",
                            "button": "MuiTypography-button",
                            "caption": "MuiTypography-caption",
                            "colorError": "MuiTypography-colorError",
                            "colorInherit": "MuiTypography-colorInherit",
                            "colorPrimary": "MuiTypography-colorPrimary",
                            "colorSecondary": "MuiTypography-colorSecondary",
                            "colorTextPrimary": "MuiTypography-colorTextPrimary",
                            "colorTextSecondary": "MuiTypography-colorTextSecondary",
                            "displayBlock": "MuiTypography-displayBlock",
                            "displayInline": "MuiTypography-displayInline",
                            "gutterBottom": "MuiTypography-gutterBottom",
                            "h1": "MuiTypography-h1",
                            "h2": "MuiTypography-h2",
                            "h3": "MuiTypography-h3",
                            "h4": "MuiTypography-h4",
                            "h5": "MuiTypography-h5",
                            "h6": "MuiTypography-h6",
                            "noWrap": "MuiTypography-noWrap",
                            "overline": "MuiTypography-overline",
                            "paragraph": "MuiTypography-paragraph",
                            "root": "MuiTypography-root",
                            "srOnly": "MuiTypography-srOnly",
                            "subtitle1": "MuiTypography-subtitle1",
                            "subtitle2": "MuiTypography-subtitle2",
                          }
                        }
                        component="span"
                      >
                        <span
                          className="MuiTypography-root MuiFormControlLabel-label HvCheckBox-labelTypography MuiTypography-body1"
                        >
                          MockLabel
                        </span>
                      </ForwardRef(Typography)>
                    </WithStyles(ForwardRef(Typography))>
                  </label>
                </ForwardRef(FormControlLabel)>
              </WithStyles(ForwardRef(FormControlLabel))>
            </HvCheckbox>
          </WithStyles(HvCheckbox)>
        </div>
        <WithStyles(Actions)
          category="semantic"
          classes={
            Object {
              "root": "HvBulkActions-actions",
            }
          }
          disabled={false}
        >
          <Actions
            category="semantic"
            classes={
              Object {
                "actionContainer": "HvActions-actionContainer",
                "button": "HvActions-button",
                "dropDownMenu": "HvActions-dropDownMenu",
                "dropDownMenuButton": "HvActions-dropDownMenuButton",
                "dropDownMenuButtonSelected": "HvActions-dropDownMenuButtonSelected",
                "root": "HvActions-root HvBulkActions-actions",
              }
            }
            disabled={false}
          >
            <div
              className="HvActions-root HvBulkActions-actions"
            />
          </Actions>
        </WithStyles(Actions)>
      </div>
    </HvBulkActions>
  </WithLabels>
</WithStyles(WithLabels)>
`;

exports[`BulkActions with selection should render correctly 1`] = `
<WithStyles(WithLabels)
  labels={
    Object {
      "selectAll": "All mock",
      "selectAllPages": "All Pages mock",
    }
  }
  numSelected={3}
  numTotal={5}
  onSelectAll={[MockFunction]}
  onSelectAllPages={[MockFunction]}
>
  <WithLabels
    classes={
      Object {
        "actions": "HvBulkActions-actions",
        "editMode": "HvBulkActions-editMode",
        "root": "HvBulkActions-root",
        "selectAll": "HvBulkActions-selectAll",
        "selectAllContainer": "HvBulkActions-selectAllContainer",
        "selectAllPages": "HvBulkActions-selectAllPages",
      }
    }
    labels={
      Object {
        "selectAll": "All mock",
        "selectAllPages": "All Pages mock",
      }
    }
    numSelected={3}
    numTotal={5}
    onSelectAll={[MockFunction]}
    onSelectAllPages={[MockFunction]}
  >
    <HvBulkActions
      classes={
        Object {
          "actions": "HvBulkActions-actions",
          "editMode": "HvBulkActions-editMode",
          "root": "HvBulkActions-root",
          "selectAll": "HvBulkActions-selectAll",
          "selectAllContainer": "HvBulkActions-selectAllContainer",
          "selectAllPages": "HvBulkActions-selectAllPages",
        }
      }
      labels={
        Object {
          "deselectAllPages": "Unselect all",
          "selectAll": "All mock",
          "selectAllPages": "All Pages mock",
        }
      }
      numSelected={3}
      numTotal={5}
      onSelectAll={[MockFunction]}
      onSelectAllPages={[MockFunction]}
    >
      <div
        className="HvBulkActions-root HvBulkActions-editMode"
      >
        <div
          className="HvBulkActions-selectAllContainer"
        >
          <WithStyles(HvCheckbox)
            checked={true}
            className="HvBulkActions-selectAll"
            indeterminate={true}
            label={
              <WithStyles(ForwardRef)
                component="span"
                variant="normalText"
              >
                <React.Fragment>
                  <b>
                    3
                  </b>
                   of 5 items
                </React.Fragment>
              </WithStyles(ForwardRef)>
            }
            onChange={[Function]}
            semantic={true}
          >
            <HvCheckbox
              checked={true}
              className="HvBulkActions-selectAll"
              classes={
                Object {
                  "checkBox": "HvCheckBox-checkBox",
                  "container": "HvCheckBox-container",
                  "disableFocus": "HvCheckBox-disableFocus",
                  "icon": "HvCheckBox-icon",
                  "labelDisabled": "HvCheckBox-labelDisabled",
                  "labelEnd": "HvCheckBox-labelEnd",
                  "labelStart": "HvCheckBox-labelStart",
                  "labelTypography": "HvCheckBox-labelTypography",
                }
              }
              indeterminate={true}
              label={
                <WithStyles(ForwardRef)
                  component="span"
                  variant="normalText"
                >
                  <React.Fragment>
                    <b>
                      3
                    </b>
                     of 5 items
                  </React.Fragment>
                </WithStyles(ForwardRef)>
              }
              onChange={[Function]}
              semantic={true}
            >
              <WithStyles(ForwardRef(FormControlLabel))
                className="HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                classes={
                  Object {
                    "disabled": "HvCheckBox-labelDisabled",
                    "label": "HvCheckBox-labelTypography",
                  }
                }
                control={
                  <WithStyles(ForwardRef(Checkbox))
                    checked={true}
                    checkedIcon={
                      <WithStyles(CheckboxCheck)
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base2",
                            "base1",
                          ]
                        }
                      />
                    }
                    className="HvCheckBox-checkBox"
                    color="default"
                    disableRipple={true}
                    disabled={false}
                    icon={
                      <WithStyles(Checkbox)
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base1",
                            "base2",
                          ]
                        }
                      />
                    }
                    indeterminate={true}
                    indeterminateIcon={
                      <WithStyles(CheckboxPartial)
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base1",
                            "base2",
                          ]
                        }
                      />
                    }
                    onBlur={[Function]}
                    onChange={[Function]}
                    value=""
                  />
                }
                disabled={false}
                label={
                  <WithStyles(ForwardRef)
                    component="span"
                    variant="normalText"
                  >
                    <React.Fragment>
                      <b>
                        3
                      </b>
                       of 5 items
                    </React.Fragment>
                  </WithStyles(ForwardRef)>
                }
                labelPlacement="end"
              >
                <ForwardRef(FormControlLabel)
                  className="HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                  classes={
                    Object {
                      "disabled": "Mui-disabled HvCheckBox-labelDisabled",
                      "label": "MuiFormControlLabel-label HvCheckBox-labelTypography",
                      "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                      "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                      "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                      "root": "MuiFormControlLabel-root",
                    }
                  }
                  control={
                    <WithStyles(ForwardRef(Checkbox))
                      checked={true}
                      checkedIcon={
                        <WithStyles(CheckboxCheck)
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base2",
                              "base1",
                            ]
                          }
                        />
                      }
                      className="HvCheckBox-checkBox"
                      color="default"
                      disableRipple={true}
                      disabled={false}
                      icon={
                        <WithStyles(Checkbox)
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base1",
                              "base2",
                            ]
                          }
                        />
                      }
                      indeterminate={true}
                      indeterminateIcon={
                        <WithStyles(CheckboxPartial)
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base1",
                              "base2",
                            ]
                          }
                        />
                      }
                      onBlur={[Function]}
                      onChange={[Function]}
                      value=""
                    />
                  }
                  disabled={false}
                  label={
                    <WithStyles(ForwardRef)
                      component="span"
                      variant="normalText"
                    >
                      <React.Fragment>
                        <b>
                          3
                        </b>
                         of 5 items
                      </React.Fragment>
                    </WithStyles(ForwardRef)>
                  }
                  labelPlacement="end"
                >
                  <label
                    className="MuiFormControlLabel-root HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                  >
                    <WithStyles(ForwardRef(Checkbox))
                      checked={true}
                      checkedIcon={
                        <WithStyles(CheckboxCheck)
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base2",
                              "base1",
                            ]
                          }
                        />
                      }
                      className="HvCheckBox-checkBox"
                      color="default"
                      disableRipple={true}
                      disabled={false}
                      icon={
                        <WithStyles(Checkbox)
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base1",
                              "base2",
                            ]
                          }
                        />
                      }
                      indeterminate={true}
                      indeterminateIcon={
                        <WithStyles(CheckboxPartial)
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base1",
                              "base2",
                            ]
                          }
                        />
                      }
                      onBlur={[Function]}
                      onChange={[Function]}
                      value=""
                    >
                      <ForwardRef(Checkbox)
                        checked={true}
                        checkedIcon={
                          <WithStyles(CheckboxCheck)
                            className="HvCheckBox-icon"
                            color={
                              Array [
                                "base2",
                                "base1",
                              ]
                            }
                          />
                        }
                        className="HvCheckBox-checkBox"
                        classes={
                          Object {
                            "checked": "Mui-checked",
                            "colorPrimary": "MuiCheckbox-colorPrimary",
                            "colorSecondary": "MuiCheckbox-colorSecondary",
                            "disabled": "Mui-disabled",
                            "indeterminate": "MuiCheckbox-indeterminate",
                            "root": "MuiCheckbox-root",
                          }
                        }
                        color="default"
                        disableRipple={true}
                        disabled={false}
                        icon={
                          <WithStyles(Checkbox)
                            className="HvCheckBox-icon"
                            color={
                              Array [
                                "base1",
                                "base2",
                              ]
                            }
                          />
                        }
                        indeterminate={true}
                        indeterminateIcon={
                          <WithStyles(CheckboxPartial)
                            className="HvCheckBox-icon"
                            color={
                              Array [
                                "base1",
                                "base2",
                              ]
                            }
                          />
                        }
                        onBlur={[Function]}
                        onChange={[Function]}
                        value=""
                      >
                        <WithStyles(ForwardRef(SwitchBase))
                          checked={true}
                          checkedIcon={
                            <WithStyles(CheckboxPartial)
                              className="HvCheckBox-icon"
                              color={
                                Array [
                                  "base1",
                                  "base2",
                                ]
                              }
                              fontSize="default"
                            />
                          }
                          className="HvCheckBox-checkBox"
                          classes={
                            Object {
                              "checked": "Mui-checked",
                              "disabled": "Mui-disabled",
                              "root": "MuiCheckbox-root MuiCheckbox-indeterminate",
                            }
                          }
                          color="default"
                          disableRipple={true}
                          disabled={false}
                          icon={
                            <WithStyles(CheckboxPartial)
                              className="HvCheckBox-icon"
                              color={
                                Array [
                                  "base1",
                                  "base2",
                                ]
                              }
                              fontSize="default"
                            />
                          }
                          inputProps={
                            Object {
                              "data-indeterminate": true,
                            }
                          }
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="checkbox"
                          value=""
                        >
                          <ForwardRef(SwitchBase)
                            checked={true}
                            checkedIcon={
                              <WithStyles(CheckboxPartial)
                                className="HvCheckBox-icon"
                                color={
                                  Array [
                                    "base1",
                                    "base2",
                                  ]
                                }
                                fontSize="default"
                              />
                            }
                            className="HvCheckBox-checkBox"
                            classes={
                              Object {
                                "checked": "PrivateSwitchBase-checked-2 Mui-checked",
                                "disabled": "PrivateSwitchBase-disabled-3 Mui-disabled",
                                "input": "PrivateSwitchBase-input-4",
                                "root": "PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-indeterminate",
                              }
                            }
                            color="default"
                            disableRipple={true}
                            disabled={false}
                            icon={
                              <WithStyles(CheckboxPartial)
                                className="HvCheckBox-icon"
                                color={
                                  Array [
                                    "base1",
                                    "base2",
                                  ]
                                }
                                fontSize="default"
                              />
                            }
                            inputProps={
                              Object {
                                "data-indeterminate": true,
                              }
                            }
                            onBlur={[Function]}
                            onChange={[Function]}
                            type="checkbox"
                            value=""
                          >
                            <WithStyles(ForwardRef(IconButton))
                              className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-2 Mui-checked"
                              color="default"
                              component="span"
                              disableRipple={true}
                              disabled={false}
                              onBlur={[Function]}
                              onFocus={[Function]}
                              tabIndex={null}
                            >
                              <ForwardRef(IconButton)
                                className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-2 Mui-checked"
                                classes={
                                  Object {
                                    "colorInherit": "MuiIconButton-colorInherit",
                                    "colorPrimary": "MuiIconButton-colorPrimary",
                                    "colorSecondary": "MuiIconButton-colorSecondary",
                                    "disabled": "Mui-disabled",
                                    "edgeEnd": "MuiIconButton-edgeEnd",
                                    "edgeStart": "MuiIconButton-edgeStart",
                                    "label": "MuiIconButton-label",
                                    "root": "MuiIconButton-root",
                                    "sizeSmall": "MuiIconButton-sizeSmall",
                                  }
                                }
                                color="default"
                                component="span"
                                disableRipple={true}
                                disabled={false}
                                onBlur={[Function]}
                                onFocus={[Function]}
                                tabIndex={null}
                              >
                                <WithStyles(ForwardRef(ButtonBase))
                                  centerRipple={true}
                                  className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-2 Mui-checked"
                                  component="span"
                                  disableRipple={true}
                                  disabled={false}
                                  focusRipple={true}
                                  onBlur={[Function]}
                                  onFocus={[Function]}
                                  tabIndex={null}
                                >
                                  <ForwardRef(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-2 Mui-checked"
                                    classes={
                                      Object {
                                        "disabled": "Mui-disabled",
                                        "focusVisible": "Mui-focusVisible",
                                        "root": "MuiButtonBase-root",
                                      }
                                    }
                                    component="span"
                                    disableRipple={true}
                                    disabled={false}
                                    focusRipple={true}
                                    onBlur={[Function]}
                                    onFocus={[Function]}
                                    tabIndex={null}
                                  >
                                    <span
                                      aria-disabled={false}
                                      className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-2 Mui-checked"
                                      onBlur={[Function]}
                                      onDragLeave={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      onTouchEnd={[Function]}
                                      onTouchMove={[Function]}
                                      onTouchStart={[Function]}
                                      tabIndex={null}
                                    >
                                      <span
                                        className="MuiIconButton-label"
                                      >
                                        <input
                                          checked={true}
                                          className="PrivateSwitchBase-input-4"
                                          data-indeterminate={true}
                                          disabled={false}
                                          onChange={[Function]}
                                          type="checkbox"
                                          value=""
                                        />
                                        <WithStyles(CheckboxPartial)
                                          className="HvCheckBox-icon"
                                          color={
                                            Array [
                                              "base1",
                                              "base2",
                                            ]
                                          }
                                          fontSize="default"
                                        >
                                          <CheckboxPartial
                                            className="HvCheckBox-icon"
                                            classes={
                                              Object {
                                                "root": "HvIconCheckboxPartial-root",
                                                "rootL": "HvIconCheckboxPartial-rootL",
                                                "rootM": "HvIconCheckboxPartial-rootM",
                                                "rootS": "HvIconCheckboxPartial-rootS",
                                                "rootXs": "HvIconCheckboxPartial-rootXs",
                                              }
                                            }
                                            color={
                                              Array [
                                                "base1",
                                                "base2",
                                              ]
                                            }
                                            fontSize="default"
                                          >
                                            <div
                                              className="HvCheckBox-icon HvIconCheckboxPartial-root HvIconCheckboxPartial-rootS"
                                              fontSize="default"
                                            >
                                              <svg
                                                focusable={false}
                                                height="16px"
                                                viewBox="0 0 16 16"
                                                width="16px"
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <path
                                                  className="color0"
                                                  d="M0 0h16v16H0z"
                                                  fill="#FFFFFF"
                                                />
                                                <g
                                                  className="color1"
                                                  fill="#414141"
                                                >
                                                  <path
                                                    d="M0 0v16h16V0zm15 15H1V1h14z"
                                                  />
                                                  <path
                                                    d="M4 7h8v2H4z"
                                                  />
                                                </g>
                                              </svg>
                                            </div>
                                          </CheckboxPartial>
                                        </WithStyles(CheckboxPartial)>
                                      </span>
                                    </span>
                                  </ForwardRef(ButtonBase)>
                                </WithStyles(ForwardRef(ButtonBase))>
                              </ForwardRef(IconButton)>
                            </WithStyles(ForwardRef(IconButton))>
                          </ForwardRef(SwitchBase)>
                        </WithStyles(ForwardRef(SwitchBase))>
                      </ForwardRef(Checkbox)>
                    </WithStyles(ForwardRef(Checkbox))>
                    <WithStyles(ForwardRef(Typography))
                      className="MuiFormControlLabel-label HvCheckBox-labelTypography"
                      component="span"
                    >
                      <ForwardRef(Typography)
                        className="MuiFormControlLabel-label HvCheckBox-labelTypography"
                        classes={
                          Object {
                            "alignCenter": "MuiTypography-alignCenter",
                            "alignJustify": "MuiTypography-alignJustify",
                            "alignLeft": "MuiTypography-alignLeft",
                            "alignRight": "MuiTypography-alignRight",
                            "body1": "MuiTypography-body1",
                            "body2": "MuiTypography-body2",
                            "button": "MuiTypography-button",
                            "caption": "MuiTypography-caption",
                            "colorError": "MuiTypography-colorError",
                            "colorInherit": "MuiTypography-colorInherit",
                            "colorPrimary": "MuiTypography-colorPrimary",
                            "colorSecondary": "MuiTypography-colorSecondary",
                            "colorTextPrimary": "MuiTypography-colorTextPrimary",
                            "colorTextSecondary": "MuiTypography-colorTextSecondary",
                            "displayBlock": "MuiTypography-displayBlock",
                            "displayInline": "MuiTypography-displayInline",
                            "gutterBottom": "MuiTypography-gutterBottom",
                            "h1": "MuiTypography-h1",
                            "h2": "MuiTypography-h2",
                            "h3": "MuiTypography-h3",
                            "h4": "MuiTypography-h4",
                            "h5": "MuiTypography-h5",
                            "h6": "MuiTypography-h6",
                            "noWrap": "MuiTypography-noWrap",
                            "overline": "MuiTypography-overline",
                            "paragraph": "MuiTypography-paragraph",
                            "root": "MuiTypography-root",
                            "srOnly": "MuiTypography-srOnly",
                            "subtitle1": "MuiTypography-subtitle1",
                            "subtitle2": "MuiTypography-subtitle2",
                          }
                        }
                        component="span"
                      >
                        <span
                          className="MuiTypography-root MuiFormControlLabel-label HvCheckBox-labelTypography MuiTypography-body1"
                        >
                          <WithStyles(ForwardRef)
                            component="span"
                            variant="normalText"
                          >
                            <ForwardRef
                              classes={
                                Object {
                                  "3xlTitle": "HvTypography-3xlTitle",
                                  "4xlTitle": "HvTypography-4xlTitle",
                                  "5xlTitle": "HvTypography-5xlTitle",
                                  "disabledButtonText": "HvTypography-disabledButtonText",
                                  "highlightText": "HvTypography-highlightText",
                                  "infoText": "HvTypography-infoText",
                                  "inlineLink": "HvTypography-inlineLink",
                                  "lTitle": "HvTypography-lTitle",
                                  "labelText": "HvTypography-labelText",
                                  "mTitle": "HvTypography-mTitle",
                                  "normalText": "HvTypography-normalText",
                                  "placeholderText": "HvTypography-placeholderText",
                                  "root": "HvTypography-root",
                                  "sLink": "HvTypography-sLink",
                                  "sText": "HvTypography-sText",
                                  "sTitle": "HvTypography-sTitle",
                                  "selectedNavText": "HvTypography-selectedNavText",
                                  "selectedText": "HvTypography-selectedText",
                                  "vizText": "HvTypography-vizText",
                                  "xlTitle": "HvTypography-xlTitle",
                                  "xsTitle": "HvTypography-xsTitle",
                                  "xxlTitle": "HvTypography-xxlTitle",
                                  "xxsTitle": "HvTypography-xxsTitle",
                                }
                              }
                              component="span"
                              variant="normalText"
                            >
                              <span
                                className="HvTypography-root HvTypography-normalText"
                              >
                                <b>
                                  3
                                </b>
                                 of 5 items
                              </span>
                            </ForwardRef>
                          </WithStyles(ForwardRef)>
                        </span>
                      </ForwardRef(Typography)>
                    </WithStyles(ForwardRef(Typography))>
                  </label>
                </ForwardRef(FormControlLabel)>
              </WithStyles(ForwardRef(FormControlLabel))>
            </HvCheckbox>
          </WithStyles(HvCheckbox)>
        </div>
        <WithStyles(Actions)
          category="semantic"
          classes={
            Object {
              "root": "HvBulkActions-actions",
            }
          }
          disabled={false}
        >
          <Actions
            category="semantic"
            classes={
              Object {
                "actionContainer": "HvActions-actionContainer",
                "button": "HvActions-button",
                "dropDownMenu": "HvActions-dropDownMenu",
                "dropDownMenuButton": "HvActions-dropDownMenuButton",
                "dropDownMenuButtonSelected": "HvActions-dropDownMenuButtonSelected",
                "root": "HvActions-root HvBulkActions-actions",
              }
            }
            disabled={false}
          >
            <div
              className="HvActions-root HvBulkActions-actions"
            />
          </Actions>
        </WithStyles(Actions)>
      </div>
    </HvBulkActions>
  </WithLabels>
</WithStyles(WithLabels)>
`;
