// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`[v3] BulkActions controlled with actions should render correctly 1`] = `
<WithStyles(HvBulkActions)
  actions={
    Array [
      Object {
        "iconCallback": [Function],
        "id": "add",
        "label": "Add",
      },
      Object {
        "iconCallback": [Function],
        "id": "delete",
        "label": "Delete",
      },
      Object {
        "iconCallback": [Function],
        "id": "lock",
        "label": "Lock",
      },
      Object {
        "iconCallback": [Function],
        "id": "put",
        "label": "Preview",
      },
    ]
  }
  actionsCallback={[Function]}
  id="bulkActions"
  maxVisibleActions={2}
  numSelected={0}
  numTotal={8}
  onSelectAll={[Function]}
>
  <HvBulkActions
    actions={
      Array [
        Object {
          "iconCallback": [Function],
          "id": "add",
          "label": "Add",
        },
        Object {
          "iconCallback": [Function],
          "id": "delete",
          "label": "Delete",
        },
        Object {
          "iconCallback": [Function],
          "id": "lock",
          "label": "Lock",
        },
        Object {
          "iconCallback": [Function],
          "id": "put",
          "label": "Preview",
        },
      ]
    }
    actionsCallback={[Function]}
    classes={
      Object {
        "actions": "HvBulkActions-actions",
        "editMode": "HvBulkActions-editMode",
        "root": "HvBulkActions-root",
        "selectAll": "HvBulkActions-selectAll",
        "selectAllContainer": "HvBulkActions-selectAllContainer",
        "selectAllPages": "HvBulkActions-selectAllPages",
      }
    }
    id="bulkActions"
    maxVisibleActions={2}
    numSelected={0}
    numTotal={8}
    onSelectAll={[Function]}
  >
    <div
      className="HvBulkActions-root"
      id="bulkActions"
    >
      <div
        className="HvBulkActions-selectAllContainer"
      >
        <WithStyles(HvCheckbox)
          checked={false}
          className="HvBulkActions-selectAll"
          id="bulkActions-select"
          indeterminate={false}
          label={
            <ForwardRef(WithStyles)
              component="span"
            >
              <b>
                All
              </b>
            </ForwardRef(WithStyles)>
          }
          onChange={[Function]}
          semantic={false}
        >
          <HvCheckbox
            checked={false}
            className="HvBulkActions-selectAll"
            classes={
              Object {
                "checkBox": "HvCheckBox-checkBox",
                "container": "HvCheckBox-container",
                "disableFocus": "HvCheckBox-disableFocus",
                "disabledBorder": "HvCheckBox-disabledBorder",
                "icon": "HvCheckBox-icon",
                "labelDisabled": "HvCheckBox-labelDisabled",
                "labelEnd": "HvCheckBox-labelEnd",
                "labelStart": "HvCheckBox-labelStart",
                "labelTypography": "HvCheckBox-labelTypography",
              }
            }
            id="bulkActions-select"
            indeterminate={false}
            label={
              <ForwardRef(WithStyles)
                component="span"
              >
                <b>
                  All
                </b>
              </ForwardRef(WithStyles)>
            }
            onChange={[Function]}
            semantic={false}
          >
            <WithStyles(ForwardRef(FormControlLabel))
              className="HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
              classes={
                Object {
                  "disabled": "HvCheckBox-labelDisabled",
                  "label": "HvCheckBox-labelTypography",
                }
              }
              control={
                <ForwardRef(WithStyles)
                  checked={false}
                  checkedIcon={
                    <CheckboxCheck
                      className="HvCheckBox-icon"
                    />
                  }
                  className="HvCheckBox-checkBox"
                  color="default"
                  disableRipple={true}
                  disabled={false}
                  icon={
                    <Checkbox
                      className="HvCheckBox-icon"
                    />
                  }
                  id="bulkActions-select-input"
                  indeterminate={false}
                  indeterminateIcon={
                    <CheckboxPartial
                      className="HvCheckBox-icon"
                    />
                  }
                  onBlur={[Function]}
                  onChange={[Function]}
                  value=""
                />
              }
              disabled={false}
              id="bulkActions-select"
              label={
                <ForwardRef(WithStyles)
                  component="span"
                >
                  <b>
                    All
                  </b>
                </ForwardRef(WithStyles)>
              }
              labelPlacement="end"
            >
              <ForwardRef(FormControlLabel)
                className="HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                classes={
                  Object {
                    "disabled": "Mui-disabled HvCheckBox-labelDisabled",
                    "label": "MuiFormControlLabel-label HvCheckBox-labelTypography",
                    "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                    "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                    "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                    "root": "MuiFormControlLabel-root",
                  }
                }
                control={
                  <ForwardRef(WithStyles)
                    checked={false}
                    checkedIcon={
                      <CheckboxCheck
                        className="HvCheckBox-icon"
                      />
                    }
                    className="HvCheckBox-checkBox"
                    color="default"
                    disableRipple={true}
                    disabled={false}
                    icon={
                      <Checkbox
                        className="HvCheckBox-icon"
                      />
                    }
                    id="bulkActions-select-input"
                    indeterminate={false}
                    indeterminateIcon={
                      <CheckboxPartial
                        className="HvCheckBox-icon"
                      />
                    }
                    onBlur={[Function]}
                    onChange={[Function]}
                    value=""
                  />
                }
                disabled={false}
                id="bulkActions-select"
                label={
                  <ForwardRef(WithStyles)
                    component="span"
                  >
                    <b>
                      All
                    </b>
                  </ForwardRef(WithStyles)>
                }
                labelPlacement="end"
              >
                <label
                  className="MuiFormControlLabel-root HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                  id="bulkActions-select"
                >
                  <WithStyles(ForwardRef(Checkbox))
                    checked={false}
                    checkedIcon={
                      <CheckboxCheck
                        className="HvCheckBox-icon"
                      />
                    }
                    className="HvCheckBox-checkBox"
                    color="default"
                    disableRipple={true}
                    disabled={false}
                    icon={
                      <Checkbox
                        className="HvCheckBox-icon"
                      />
                    }
                    id="bulkActions-select-input"
                    indeterminate={false}
                    indeterminateIcon={
                      <CheckboxPartial
                        className="HvCheckBox-icon"
                      />
                    }
                    onBlur={[Function]}
                    onChange={[Function]}
                    value=""
                  >
                    <ForwardRef(Checkbox)
                      checked={false}
                      checkedIcon={
                        <CheckboxCheck
                          className="HvCheckBox-icon"
                        />
                      }
                      className="HvCheckBox-checkBox"
                      classes={
                        Object {
                          "checked": "Mui-checked",
                          "colorPrimary": "MuiCheckbox-colorPrimary",
                          "colorSecondary": "MuiCheckbox-colorSecondary",
                          "disabled": "Mui-disabled",
                          "indeterminate": "MuiCheckbox-indeterminate",
                          "root": "MuiCheckbox-root",
                        }
                      }
                      color="default"
                      disableRipple={true}
                      disabled={false}
                      icon={
                        <Checkbox
                          className="HvCheckBox-icon"
                        />
                      }
                      id="bulkActions-select-input"
                      indeterminate={false}
                      indeterminateIcon={
                        <CheckboxPartial
                          className="HvCheckBox-icon"
                        />
                      }
                      onBlur={[Function]}
                      onChange={[Function]}
                      value=""
                    >
                      <WithStyles(ForwardRef(SwitchBase))
                        checked={false}
                        checkedIcon={
                          <CheckboxCheck
                            className="HvCheckBox-icon"
                            fontSize="default"
                          />
                        }
                        className="HvCheckBox-checkBox"
                        classes={
                          Object {
                            "checked": "Mui-checked",
                            "disabled": "Mui-disabled",
                            "root": "MuiCheckbox-root",
                          }
                        }
                        color="default"
                        disableRipple={true}
                        disabled={false}
                        icon={
                          <Checkbox
                            className="HvCheckBox-icon"
                            fontSize="default"
                          />
                        }
                        id="bulkActions-select-input"
                        inputProps={
                          Object {
                            "data-indeterminate": false,
                          }
                        }
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="checkbox"
                        value=""
                      >
                        <ForwardRef(SwitchBase)
                          checked={false}
                          checkedIcon={
                            <CheckboxCheck
                              className="HvCheckBox-icon"
                              fontSize="default"
                            />
                          }
                          className="HvCheckBox-checkBox"
                          classes={
                            Object {
                              "checked": "PrivateSwitchBase-checked-6 Mui-checked",
                              "disabled": "PrivateSwitchBase-disabled-7 Mui-disabled",
                              "input": "PrivateSwitchBase-input-8",
                              "root": "PrivateSwitchBase-root-5 MuiCheckbox-root",
                            }
                          }
                          color="default"
                          disableRipple={true}
                          disabled={false}
                          icon={
                            <Checkbox
                              className="HvCheckBox-icon"
                              fontSize="default"
                            />
                          }
                          id="bulkActions-select-input"
                          inputProps={
                            Object {
                              "data-indeterminate": false,
                            }
                          }
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="checkbox"
                          value=""
                        >
                          <WithStyles(ForwardRef(IconButton))
                            className="PrivateSwitchBase-root-5 MuiCheckbox-root HvCheckBox-checkBox"
                            color="default"
                            component="span"
                            disableRipple={true}
                            disabled={false}
                            onBlur={[Function]}
                            onFocus={[Function]}
                            tabIndex={null}
                          >
                            <ForwardRef(IconButton)
                              className="PrivateSwitchBase-root-5 MuiCheckbox-root HvCheckBox-checkBox"
                              classes={
                                Object {
                                  "colorInherit": "MuiIconButton-colorInherit",
                                  "colorPrimary": "MuiIconButton-colorPrimary",
                                  "colorSecondary": "MuiIconButton-colorSecondary",
                                  "disabled": "Mui-disabled",
                                  "edgeEnd": "MuiIconButton-edgeEnd",
                                  "edgeStart": "MuiIconButton-edgeStart",
                                  "label": "MuiIconButton-label",
                                  "root": "MuiIconButton-root",
                                  "sizeSmall": "MuiIconButton-sizeSmall",
                                }
                              }
                              color="default"
                              component="span"
                              disableRipple={true}
                              disabled={false}
                              onBlur={[Function]}
                              onFocus={[Function]}
                              tabIndex={null}
                            >
                              <WithStyles(ForwardRef(ButtonBase))
                                centerRipple={true}
                                className="MuiIconButton-root PrivateSwitchBase-root-5 MuiCheckbox-root HvCheckBox-checkBox"
                                component="span"
                                disableRipple={true}
                                disabled={false}
                                focusRipple={true}
                                onBlur={[Function]}
                                onFocus={[Function]}
                                tabIndex={null}
                              >
                                <ForwardRef(ButtonBase)
                                  centerRipple={true}
                                  className="MuiIconButton-root PrivateSwitchBase-root-5 MuiCheckbox-root HvCheckBox-checkBox"
                                  classes={
                                    Object {
                                      "disabled": "Mui-disabled",
                                      "focusVisible": "Mui-focusVisible",
                                      "root": "MuiButtonBase-root",
                                    }
                                  }
                                  component="span"
                                  disableRipple={true}
                                  disabled={false}
                                  focusRipple={true}
                                  onBlur={[Function]}
                                  onFocus={[Function]}
                                  tabIndex={null}
                                >
                                  <span
                                    aria-disabled={false}
                                    className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-5 MuiCheckbox-root HvCheckBox-checkBox"
                                    onBlur={[Function]}
                                    onDragLeave={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchMove={[Function]}
                                    onTouchStart={[Function]}
                                    tabIndex={null}
                                  >
                                    <span
                                      className="MuiIconButton-label"
                                    >
                                      <input
                                        checked={false}
                                        className="PrivateSwitchBase-input-8"
                                        data-indeterminate={false}
                                        disabled={false}
                                        id="bulkActions-select-input"
                                        onChange={[Function]}
                                        type="checkbox"
                                        value=""
                                      />
                                      <Checkbox
                                        className="HvCheckBox-icon"
                                        fontSize="default"
                                      >
                                        <WithStyles(HvIconBase)
                                          className="HvCheckBox-icon"
                                          fontSize="default"
                                          iconSize="S"
                                          name="Checkbox"
                                        >
                                          <HvIconBase
                                            className="HvCheckBox-icon"
                                            classes={
                                              Object {
                                                "l": "HvIconBase-l",
                                                "m": "HvIconBase-m",
                                                "root": "HvIconBase-root",
                                                "s": "HvIconBase-s",
                                                "xs": "HvIconBase-xs",
                                              }
                                            }
                                            fontSize="default"
                                            iconSize="S"
                                            name="Checkbox"
                                          >
                                            <div
                                              className="HvCheckBox-icon HvIconBase-root HvIconBase-s"
                                              fontSize="default"
                                              name="Checkbox"
                                            >
                                              <svg
                                                focusable={false}
                                                height={16}
                                                viewBox="0 0 16 16"
                                                width={16}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <path
                                                  className="color0"
                                                  d="M0 0h16v16H0z"
                                                  fill="#FBFCFC"
                                                />
                                                <path
                                                  className="color1"
                                                  d="M16 16H0V0h16zM1 15h14V1H1z"
                                                  fill="#414141"
                                                />
                                              </svg>
                                            </div>
                                          </HvIconBase>
                                        </WithStyles(HvIconBase)>
                                      </Checkbox>
                                    </span>
                                  </span>
                                </ForwardRef(ButtonBase)>
                              </WithStyles(ForwardRef(ButtonBase))>
                            </ForwardRef(IconButton)>
                          </WithStyles(ForwardRef(IconButton))>
                        </ForwardRef(SwitchBase)>
                      </WithStyles(ForwardRef(SwitchBase))>
                    </ForwardRef(Checkbox)>
                  </WithStyles(ForwardRef(Checkbox))>
                  <WithStyles(ForwardRef(Typography))
                    className="MuiFormControlLabel-label HvCheckBox-labelTypography"
                    component="span"
                  >
                    <ForwardRef(Typography)
                      className="MuiFormControlLabel-label HvCheckBox-labelTypography"
                      classes={
                        Object {
                          "alignCenter": "MuiTypography-alignCenter",
                          "alignJustify": "MuiTypography-alignJustify",
                          "alignLeft": "MuiTypography-alignLeft",
                          "alignRight": "MuiTypography-alignRight",
                          "body1": "MuiTypography-body1",
                          "body2": "MuiTypography-body2",
                          "button": "MuiTypography-button",
                          "caption": "MuiTypography-caption",
                          "colorError": "MuiTypography-colorError",
                          "colorInherit": "MuiTypography-colorInherit",
                          "colorPrimary": "MuiTypography-colorPrimary",
                          "colorSecondary": "MuiTypography-colorSecondary",
                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                          "displayBlock": "MuiTypography-displayBlock",
                          "displayInline": "MuiTypography-displayInline",
                          "gutterBottom": "MuiTypography-gutterBottom",
                          "h1": "MuiTypography-h1",
                          "h2": "MuiTypography-h2",
                          "h3": "MuiTypography-h3",
                          "h4": "MuiTypography-h4",
                          "h5": "MuiTypography-h5",
                          "h6": "MuiTypography-h6",
                          "noWrap": "MuiTypography-noWrap",
                          "overline": "MuiTypography-overline",
                          "paragraph": "MuiTypography-paragraph",
                          "root": "MuiTypography-root",
                          "srOnly": "MuiTypography-srOnly",
                          "subtitle1": "MuiTypography-subtitle1",
                          "subtitle2": "MuiTypography-subtitle2",
                        }
                      }
                      component="span"
                    >
                      <span
                        className="MuiTypography-root MuiFormControlLabel-label HvCheckBox-labelTypography MuiTypography-body1"
                      >
                        <WithStyles(ForwardRef)
                          component="span"
                        >
                          <ForwardRef
                            classes={
                              Object {
                                "3xlTitle": "HvTypography-3xlTitle",
                                "4xlTitle": "HvTypography-4xlTitle",
                                "5xlTitle": "HvTypography-5xlTitle",
                                "disabledText": "HvTypography-disabledText",
                                "highlightText": "HvTypography-highlightText",
                                "lTitle": "HvTypography-lTitle",
                                "link": "HvTypography-link",
                                "mTitle": "HvTypography-mTitle",
                                "noWrap": "HvTypography-noWrap",
                                "normalText": "HvTypography-normalText",
                                "placeholderText": "HvTypography-placeholderText",
                                "root": "HvTypography-root",
                                "sTitle": "HvTypography-sTitle",
                                "sectionTitle": "HvTypography-sectionTitle",
                                "selectedNavText": "HvTypography-selectedNavText",
                                "vizText": "HvTypography-vizText",
                                "vizTextDisabled": "HvTypography-vizTextDisabled",
                                "xlTitle": "HvTypography-xlTitle",
                                "xsInlineLink": "HvTypography-xsInlineLink",
                                "xsTitle": "HvTypography-xsTitle",
                                "xxlTitle": "HvTypography-xxlTitle",
                                "xxsTitle": "HvTypography-xxsTitle",
                              }
                            }
                            component="span"
                          >
                            <span
                              className="HvTypography-root HvTypography-normalText"
                            >
                              <b>
                                All
                              </b>
                            </span>
                          </ForwardRef>
                        </WithStyles(ForwardRef)>
                      </span>
                    </ForwardRef(Typography)>
                  </WithStyles(ForwardRef(Typography))>
                </label>
              </ForwardRef(FormControlLabel)>
            </WithStyles(ForwardRef(FormControlLabel))>
          </HvCheckbox>
        </WithStyles(HvCheckbox)>
      </div>
      <WithStyles(ActionsGeneric)
        actions={
          Array [
            Object {
              "iconCallback": [Function],
              "id": "add",
              "label": "Add",
            },
            Object {
              "iconCallback": [Function],
              "id": "delete",
              "label": "Delete",
            },
            Object {
              "iconCallback": [Function],
              "id": "lock",
              "label": "Lock",
            },
            Object {
              "iconCallback": [Function],
              "id": "put",
              "label": "Preview",
            },
          ]
        }
        actionsCallback={[Function]}
        category="ghost"
        classes={
          Object {
            "root": "HvBulkActions-actions",
          }
        }
        disabled={true}
        id="bulkActions-actions"
        maxVisibleActions={2}
      >
        <ActionsGeneric
          actions={
            Array [
              Object {
                "iconCallback": [Function],
                "id": "add",
                "label": "Add",
              },
              Object {
                "iconCallback": [Function],
                "id": "delete",
                "label": "Delete",
              },
              Object {
                "iconCallback": [Function],
                "id": "lock",
                "label": "Lock",
              },
              Object {
                "iconCallback": [Function],
                "id": "put",
                "label": "Preview",
              },
            ]
          }
          actionsCallback={[Function]}
          category="ghost"
          classes={
            Object {
              "actionContainer": "HvActionsGeneric-actionContainer",
              "button": "HvActionsGeneric-button",
              "dropDownMenu": "HvActionsGeneric-dropDownMenu",
              "dropDownMenuButton": "HvActionsGeneric-dropDownMenuButton",
              "dropDownMenuButtonSelected": "HvActionsGeneric-dropDownMenuButtonSelected",
              "root": "HvActionsGeneric-root HvBulkActions-actions",
            }
          }
          disabled={true}
          id="bulkActions-actions"
          maxVisibleActions={2}
        >
          <div
            className="HvActionsGeneric-root HvBulkActions-actions HvActionsGeneric-actionContainer"
          >
            <WithStyles(HvButton)
              category="ghost"
              className="HvActionsGeneric-button"
              disabled={true}
              id="add"
              key="bulkActions-actions-0-action-add"
              onClick={[Function]}
              startIcon={<Add />}
            >
              <HvButton
                category="ghost"
                className="HvActionsGeneric-button"
                classes={
                  Object {
                    "focusVisible": "HvButton-focusVisible",
                    "ghost": "HvButton-ghost",
                    "ghostDisabled": "HvButton-ghostDisabled",
                    "ghostSVG": "HvButton-ghostSVG",
                    "icon": "HvButton-icon",
                    "iconSVG": "HvButton-iconSVG",
                    "primary": "HvButton-primary",
                    "primaryDisabled": "HvButton-primaryDisabled",
                    "primarySVG": "HvButton-primarySVG",
                    "root": "HvButton-root",
                    "secondary": "HvButton-secondary",
                    "secondaryDisabled": "HvButton-secondaryDisabled",
                    "secondarySVG": "HvButton-secondarySVG",
                    "semantic": "HvButton-semantic",
                    "semanticDisabled": "HvButton-semanticDisabled",
                    "semanticSVG": "HvButton-semanticSVG",
                    "startIcon": "HvButton-startIcon",
                  }
                }
                disabled={true}
                id="add"
                onClick={[Function]}
                startIcon={<Add />}
              >
                <WithStyles(ForwardRef(Button))
                  className="HvActionsGeneric-button HvButton-ghostSVG"
                  classes={
                    Object {
                      "containedPrimary": "HvButton-primary",
                      "disabled": "HvButton-ghostDisabled",
                      "outlinedPrimary": "HvButton-secondary",
                      "root": "HvButton-root",
                      "startIcon": "HvButton-startIcon",
                      "textPrimary": "HvButton-ghost",
                    }
                  }
                  color="primary"
                  disableRipple={true}
                  disabled={true}
                  focusVisibleClassName="HvButton-focusVisible"
                  id="add"
                  onClick={[Function]}
                  startIcon={<Add />}
                  variant="text"
                >
                  <ForwardRef(Button)
                    className="HvActionsGeneric-button HvButton-ghostSVG"
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled HvButton-ghostDisabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root HvButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon HvButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="primary"
                    disableRipple={true}
                    disabled={true}
                    focusVisibleClassName="HvButton-focusVisible"
                    id="add"
                    onClick={[Function]}
                    startIcon={<Add />}
                    variant="text"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                      component="button"
                      disableRipple={true}
                      disabled={true}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                      id="add"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={true}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                        id="add"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled Mui-disabled"
                          disabled={true}
                          id="add"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={-1}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            <span
                              className="MuiButton-startIcon HvButton-startIcon MuiButton-iconSizeMedium"
                            >
                              <Add>
                                <WithStyles(HvIconBase)
                                  iconSize="S"
                                  name="Add"
                                >
                                  <HvIconBase
                                    classes={
                                      Object {
                                        "l": "HvIconBase-l",
                                        "m": "HvIconBase-m",
                                        "root": "HvIconBase-root",
                                        "s": "HvIconBase-s",
                                        "xs": "HvIconBase-xs",
                                      }
                                    }
                                    iconSize="S"
                                    name="Add"
                                  >
                                    <div
                                      className="HvIconBase-root HvIconBase-s"
                                      name="Add"
                                    >
                                      <svg
                                        focusable={false}
                                        height={16}
                                        viewBox="0 0 16 16"
                                        width={16}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          className="color0"
                                          d="M16 8.5H8.5V16h-1V8.5H0v-1h7.5V0h1v7.5H16z"
                                          fill="#414141"
                                        />
                                      </svg>
                                    </div>
                                  </HvIconBase>
                                </WithStyles(HvIconBase)>
                              </Add>
                            </span>
                            Add
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </HvButton>
            </WithStyles(HvButton)>
            <WithStyles(HvButton)
              category="ghost"
              className="HvActionsGeneric-button"
              disabled={true}
              id="delete"
              key="bulkActions-actions-1-action-delete"
              onClick={[Function]}
              startIcon={<Delete />}
            >
              <HvButton
                category="ghost"
                className="HvActionsGeneric-button"
                classes={
                  Object {
                    "focusVisible": "HvButton-focusVisible",
                    "ghost": "HvButton-ghost",
                    "ghostDisabled": "HvButton-ghostDisabled",
                    "ghostSVG": "HvButton-ghostSVG",
                    "icon": "HvButton-icon",
                    "iconSVG": "HvButton-iconSVG",
                    "primary": "HvButton-primary",
                    "primaryDisabled": "HvButton-primaryDisabled",
                    "primarySVG": "HvButton-primarySVG",
                    "root": "HvButton-root",
                    "secondary": "HvButton-secondary",
                    "secondaryDisabled": "HvButton-secondaryDisabled",
                    "secondarySVG": "HvButton-secondarySVG",
                    "semantic": "HvButton-semantic",
                    "semanticDisabled": "HvButton-semanticDisabled",
                    "semanticSVG": "HvButton-semanticSVG",
                    "startIcon": "HvButton-startIcon",
                  }
                }
                disabled={true}
                id="delete"
                onClick={[Function]}
                startIcon={<Delete />}
              >
                <WithStyles(ForwardRef(Button))
                  className="HvActionsGeneric-button HvButton-ghostSVG"
                  classes={
                    Object {
                      "containedPrimary": "HvButton-primary",
                      "disabled": "HvButton-ghostDisabled",
                      "outlinedPrimary": "HvButton-secondary",
                      "root": "HvButton-root",
                      "startIcon": "HvButton-startIcon",
                      "textPrimary": "HvButton-ghost",
                    }
                  }
                  color="primary"
                  disableRipple={true}
                  disabled={true}
                  focusVisibleClassName="HvButton-focusVisible"
                  id="delete"
                  onClick={[Function]}
                  startIcon={<Delete />}
                  variant="text"
                >
                  <ForwardRef(Button)
                    className="HvActionsGeneric-button HvButton-ghostSVG"
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled HvButton-ghostDisabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root HvButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon HvButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="primary"
                    disableRipple={true}
                    disabled={true}
                    focusVisibleClassName="HvButton-focusVisible"
                    id="delete"
                    onClick={[Function]}
                    startIcon={<Delete />}
                    variant="text"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                      component="button"
                      disableRipple={true}
                      disabled={true}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                      id="delete"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={true}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                        id="delete"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled Mui-disabled"
                          disabled={true}
                          id="delete"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={-1}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            <span
                              className="MuiButton-startIcon HvButton-startIcon MuiButton-iconSizeMedium"
                            >
                              <Delete>
                                <WithStyles(HvIconBase)
                                  iconSize="S"
                                  name="Delete"
                                >
                                  <HvIconBase
                                    classes={
                                      Object {
                                        "l": "HvIconBase-l",
                                        "m": "HvIconBase-m",
                                        "root": "HvIconBase-root",
                                        "s": "HvIconBase-s",
                                        "xs": "HvIconBase-xs",
                                      }
                                    }
                                    iconSize="S"
                                    name="Delete"
                                  >
                                    <div
                                      className="HvIconBase-root HvIconBase-s"
                                      name="Delete"
                                    >
                                      <svg
                                        focusable={false}
                                        height={16}
                                        viewBox="0 0 16 16"
                                        width={16}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          className="color0"
                                          d="M12 1H4V0h8zm4 1v1h-2.1L13 16H3L2.1 3H0V2zm-3 1H3.1L4 15h8.1z"
                                          fill="#414141"
                                        />
                                      </svg>
                                    </div>
                                  </HvIconBase>
                                </WithStyles(HvIconBase)>
                              </Delete>
                            </span>
                            Delete
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </HvButton>
            </WithStyles(HvButton)>
            <WithStyles(WithId)
              category="ghost"
              classes={
                Object {
                  "icon": "HvActionsGeneric-dropDownMenuButton",
                  "iconSelected": "HvActionsGeneric-dropDownMenuButtonSelected",
                  "root": "HvActionsGeneric-dropDownMenu",
                }
              }
              dataList={
                Array [
                  Object {
                    "iconCallback": [Function],
                    "id": "lock",
                    "label": "Lock",
                  },
                  Object {
                    "iconCallback": [Function],
                    "id": "put",
                    "label": "Preview",
                  },
                ]
              }
              disablePortal={false}
              disabled={true}
              icon={
                <MoreOptionsVertical
                  color="atmo5"
                />
              }
              id="bulkActions-actions-menu"
              keepOpened={false}
              onClick={[Function]}
              placement="left"
            >
              <WithId
                category="ghost"
                classes={
                  Object {
                    "icon": "HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton",
                    "iconSelected": "HvDropDownMenu-iconSelected HvActionsGeneric-dropDownMenuButtonSelected",
                    "root": "HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                  }
                }
                dataList={
                  Array [
                    Object {
                      "iconCallback": [Function],
                      "id": "lock",
                      "label": "Lock",
                    },
                    Object {
                      "iconCallback": [Function],
                      "id": "put",
                      "label": "Preview",
                    },
                  ]
                }
                disablePortal={false}
                disabled={true}
                icon={
                  <MoreOptionsVertical
                    color="atmo5"
                  />
                }
                id="bulkActions-actions-menu"
                keepOpened={false}
                onClick={[Function]}
                placement="left"
              >
                <DropDownMenu
                  category="ghost"
                  classes={
                    Object {
                      "icon": "HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton",
                      "iconSelected": "HvDropDownMenu-iconSelected HvActionsGeneric-dropDownMenuButtonSelected",
                      "root": "HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                    }
                  }
                  dataList={
                    Array [
                      Object {
                        "iconCallback": [Function],
                        "id": "lock",
                        "label": "Lock",
                      },
                      Object {
                        "iconCallback": [Function],
                        "id": "put",
                        "label": "Preview",
                      },
                    ]
                  }
                  disablePortal={false}
                  disabled={true}
                  icon={
                    <MoreOptionsVertical
                      color="atmo5"
                    />
                  }
                  id="bulkActions-actions-menu"
                  keepOpened={false}
                  onClick={[Function]}
                  placement="left"
                >
                  <WithStyles(WithId)
                    classes={
                      Object {
                        "root": "HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                      }
                    }
                    component={
                      <ForwardRef(WithStyles)
                        aria-label="Dropdown menu"
                        category="ghost"
                        className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                        disabled={true}
                        icon={true}
                        id="bulkActions-actions-menu-icon-button"
                      >
                        <MoreOptionsVertical
                          color="atmo5"
                        />
                      </ForwardRef(WithStyles)>
                    }
                    disablePortal={false}
                    disabled={true}
                    expanded={false}
                    id="bulkActions-actions-menu"
                    onToggle={[Function]}
                    placement="left"
                  >
                    <WithId
                      classes={
                        Object {
                          "arrow": "HvBaseDropdown-arrow",
                          "header": "HvBaseDropdown-header",
                          "headerDisabled": "HvBaseDropdown-headerDisabled",
                          "headerOpen": "HvBaseDropdown-headerOpen",
                          "headerOpenDown": "HvBaseDropdown-headerOpenDown",
                          "headerOpenUp": "HvBaseDropdown-headerOpenUp",
                          "inputExtensionFloatLeft": "HvBaseDropdown-inputExtensionFloatLeft",
                          "inputExtensionFloatRight": "HvBaseDropdown-inputExtensionFloatRight",
                          "inputExtensionLeftPosition": "HvBaseDropdown-inputExtensionLeftPosition",
                          "inputExtensionOpen": "HvBaseDropdown-inputExtensionOpen",
                          "inputExtensionOpenShadow": "HvBaseDropdown-inputExtensionOpenShadow",
                          "panel": "HvBaseDropdown-panel",
                          "root": "HvBaseDropdown-root HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                          "selection": "HvBaseDropdown-selection",
                          "selectionDisabled": "HvBaseDropdown-selectionDisabled",
                          "truncate": "HvBaseDropdown-truncate",
                        }
                      }
                      component={
                        <ForwardRef(WithStyles)
                          aria-label="Dropdown menu"
                          category="ghost"
                          className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                          disabled={true}
                          icon={true}
                          id="bulkActions-actions-menu-icon-button"
                        >
                          <MoreOptionsVertical
                            color="atmo5"
                          />
                        </ForwardRef(WithStyles)>
                      }
                      disablePortal={false}
                      disabled={true}
                      expanded={false}
                      id="bulkActions-actions-menu"
                      onToggle={[Function]}
                      placement="left"
                    >
                      <HvBaseDropdown
                        classes={
                          Object {
                            "arrow": "HvBaseDropdown-arrow",
                            "header": "HvBaseDropdown-header",
                            "headerDisabled": "HvBaseDropdown-headerDisabled",
                            "headerOpen": "HvBaseDropdown-headerOpen",
                            "headerOpenDown": "HvBaseDropdown-headerOpenDown",
                            "headerOpenUp": "HvBaseDropdown-headerOpenUp",
                            "inputExtensionFloatLeft": "HvBaseDropdown-inputExtensionFloatLeft",
                            "inputExtensionFloatRight": "HvBaseDropdown-inputExtensionFloatRight",
                            "inputExtensionLeftPosition": "HvBaseDropdown-inputExtensionLeftPosition",
                            "inputExtensionOpen": "HvBaseDropdown-inputExtensionOpen",
                            "inputExtensionOpenShadow": "HvBaseDropdown-inputExtensionOpenShadow",
                            "panel": "HvBaseDropdown-panel",
                            "root": "HvBaseDropdown-root HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                            "selection": "HvBaseDropdown-selection",
                            "selectionDisabled": "HvBaseDropdown-selectionDisabled",
                            "truncate": "HvBaseDropdown-truncate",
                          }
                        }
                        component={
                          <ForwardRef(WithStyles)
                            aria-label="Dropdown menu"
                            category="ghost"
                            className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                            disabled={true}
                            icon={true}
                            id="bulkActions-actions-menu-icon-button"
                          >
                            <MoreOptionsVertical
                              color="atmo5"
                            />
                          </ForwardRef(WithStyles)>
                        }
                        disablePortal={false}
                        disabled={true}
                        expanded={false}
                        id="bulkActions-actions-menu"
                        onToggle={[Function]}
                        placement="left"
                      >
                        <div
                          aria-expanded={false}
                          aria-haspopup="listbox"
                          className="HvBaseDropdown-root HvDropDownMenu-root HvActionsGeneric-dropDownMenu"
                          id="bulkActions-actions-menu"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          tabIndex={-1}
                        >
                          <WithStyles(HvButton)
                            aria-label="Dropdown menu"
                            category="ghost"
                            className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                            disabled={true}
                            icon={true}
                            id="bulkActions-actions-menu-icon-button"
                          >
                            <HvButton
                              aria-label="Dropdown menu"
                              category="ghost"
                              className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                              classes={
                                Object {
                                  "focusVisible": "HvButton-focusVisible",
                                  "ghost": "HvButton-ghost",
                                  "ghostDisabled": "HvButton-ghostDisabled",
                                  "ghostSVG": "HvButton-ghostSVG",
                                  "icon": "HvButton-icon",
                                  "iconSVG": "HvButton-iconSVG",
                                  "primary": "HvButton-primary",
                                  "primaryDisabled": "HvButton-primaryDisabled",
                                  "primarySVG": "HvButton-primarySVG",
                                  "root": "HvButton-root",
                                  "secondary": "HvButton-secondary",
                                  "secondaryDisabled": "HvButton-secondaryDisabled",
                                  "secondarySVG": "HvButton-secondarySVG",
                                  "semantic": "HvButton-semantic",
                                  "semanticDisabled": "HvButton-semanticDisabled",
                                  "semanticSVG": "HvButton-semanticSVG",
                                  "startIcon": "HvButton-startIcon",
                                }
                              }
                              disabled={true}
                              icon={true}
                              id="bulkActions-actions-menu-icon-button"
                            >
                              <WithStyles(ForwardRef(Button))
                                aria-label="Dropdown menu"
                                className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG"
                                classes={
                                  Object {
                                    "containedPrimary": "HvButton-primary",
                                    "disabled": "HvButton-ghostDisabled",
                                    "outlinedPrimary": "HvButton-secondary",
                                    "root": "HvButton-root",
                                    "startIcon": "HvButton-startIcon",
                                    "textPrimary": "HvButton-ghost",
                                  }
                                }
                                color="primary"
                                disableRipple={true}
                                disabled={true}
                                focusVisibleClassName="HvButton-focusVisible"
                                id="bulkActions-actions-menu-icon-button"
                                variant="text"
                              >
                                <ForwardRef(Button)
                                  aria-label="Dropdown menu"
                                  className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG"
                                  classes={
                                    Object {
                                      "colorInherit": "MuiButton-colorInherit",
                                      "contained": "MuiButton-contained",
                                      "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                                      "containedSecondary": "MuiButton-containedSecondary",
                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                      "disableElevation": "MuiButton-disableElevation",
                                      "disabled": "Mui-disabled HvButton-ghostDisabled",
                                      "endIcon": "MuiButton-endIcon",
                                      "focusVisible": "Mui-focusVisible",
                                      "fullWidth": "MuiButton-fullWidth",
                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                      "label": "MuiButton-label",
                                      "outlined": "MuiButton-outlined",
                                      "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                      "root": "MuiButton-root HvButton-root",
                                      "sizeLarge": "MuiButton-sizeLarge",
                                      "sizeSmall": "MuiButton-sizeSmall",
                                      "startIcon": "MuiButton-startIcon HvButton-startIcon",
                                      "text": "MuiButton-text",
                                      "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                                      "textSecondary": "MuiButton-textSecondary",
                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                    }
                                  }
                                  color="primary"
                                  disableRipple={true}
                                  disabled={true}
                                  focusVisibleClassName="HvButton-focusVisible"
                                  id="bulkActions-actions-menu-icon-button"
                                  variant="text"
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    aria-label="Dropdown menu"
                                    className="MuiButton-root HvButton-root MuiButton-text HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                                    component="button"
                                    disableRipple={true}
                                    disabled={true}
                                    focusRipple={true}
                                    focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                                    id="bulkActions-actions-menu-icon-button"
                                    type="button"
                                  >
                                    <ForwardRef(ButtonBase)
                                      aria-label="Dropdown menu"
                                      className="MuiButton-root HvButton-root MuiButton-text HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      component="button"
                                      disableRipple={true}
                                      disabled={true}
                                      focusRipple={true}
                                      focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                                      id="bulkActions-actions-menu-icon-button"
                                      type="button"
                                    >
                                      <button
                                        aria-label="Dropdown menu"
                                        className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled Mui-disabled"
                                        disabled={true}
                                        id="bulkActions-actions-menu-icon-button"
                                        onBlur={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={-1}
                                        type="button"
                                      >
                                        <span
                                          className="MuiButton-label"
                                        >
                                          <MoreOptionsVertical
                                            color="atmo5"
                                          >
                                            <WithStyles(HvIconBase)
                                              iconSize="S"
                                              name="MoreOptionsVertical"
                                            >
                                              <HvIconBase
                                                classes={
                                                  Object {
                                                    "l": "HvIconBase-l",
                                                    "m": "HvIconBase-m",
                                                    "root": "HvIconBase-root",
                                                    "s": "HvIconBase-s",
                                                    "xs": "HvIconBase-xs",
                                                  }
                                                }
                                                iconSize="S"
                                                name="MoreOptionsVertical"
                                              >
                                                <div
                                                  className="HvIconBase-root HvIconBase-s"
                                                  name="MoreOptionsVertical"
                                                >
                                                  <svg
                                                    focusable={false}
                                                    height={16}
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <path
                                                      className="color0"
                                                      d="M7 6.9h2v2H7zM7 4h2V2H7zm0 10h2v-2H7z"
                                                      fill="#999999"
                                                    />
                                                  </svg>
                                                </div>
                                              </HvIconBase>
                                            </WithStyles(HvIconBase)>
                                          </MoreOptionsVertical>
                                        </span>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(Button)>
                              </WithStyles(ForwardRef(Button))>
                            </HvButton>
                          </WithStyles(HvButton)>
                        </div>
                        <ForwardRef(Popper)
                          anchorEl={null}
                          disablePortal={false}
                          open={false}
                          placement="bottom-end"
                          popperOptions={
                            Object {
                              "onCreate": [Function],
                              "onUpdate": [Function],
                            }
                          }
                          style={
                            Object {
                              "zIndex": 1500,
                            }
                          }
                        />
                      </HvBaseDropdown>
                    </WithId>
                  </WithStyles(WithId)>
                </DropDownMenu>
              </WithId>
            </WithStyles(WithId)>
          </div>
        </ActionsGeneric>
      </WithStyles(ActionsGeneric)>
    </div>
  </HvBulkActions>
</WithStyles(HvBulkActions)>
`;

exports[`[v3] BulkActions should render correctly 1`] = `
<WithStyles(HvBulkActions)
  actions={
    Array [
      Object {
        "iconCallback": [Function],
        "id": "get",
        "label": "Upload",
      },
      Object {
        "iconCallback": [Function],
        "id": "lock",
        "label": "Lock",
      },
      Object {
        "iconCallback": [Function],
        "id": "delete",
        "label": "Delete",
      },
      Object {
        "iconCallback": [Function],
        "id": "post",
        "label": "Add",
      },
      Object {
        "iconCallback": [Function],
        "id": "put",
        "label": "Preview",
      },
    ]
  }
  actionsCallback={[Function]}
  maxVisibleActions={3}
>
  <HvBulkActions
    actions={
      Array [
        Object {
          "iconCallback": [Function],
          "id": "get",
          "label": "Upload",
        },
        Object {
          "iconCallback": [Function],
          "id": "lock",
          "label": "Lock",
        },
        Object {
          "iconCallback": [Function],
          "id": "delete",
          "label": "Delete",
        },
        Object {
          "iconCallback": [Function],
          "id": "post",
          "label": "Add",
        },
        Object {
          "iconCallback": [Function],
          "id": "put",
          "label": "Preview",
        },
      ]
    }
    actionsCallback={[Function]}
    classes={
      Object {
        "actions": "HvBulkActions-actions",
        "editMode": "HvBulkActions-editMode",
        "root": "HvBulkActions-root",
        "selectAll": "HvBulkActions-selectAll",
        "selectAllContainer": "HvBulkActions-selectAllContainer",
        "selectAllPages": "HvBulkActions-selectAllPages",
      }
    }
    maxVisibleActions={3}
  >
    <div
      className="HvBulkActions-root"
    >
      <div
        className="HvBulkActions-selectAllContainer"
      >
        <WithStyles(HvCheckbox)
          checked={false}
          className="HvBulkActions-selectAll"
          indeterminate={false}
          label={
            <ForwardRef(WithStyles)
              component="span"
            >
              <b>
                All
              </b>
            </ForwardRef(WithStyles)>
          }
          onChange={[Function]}
          semantic={false}
        >
          <HvCheckbox
            checked={false}
            className="HvBulkActions-selectAll"
            classes={
              Object {
                "checkBox": "HvCheckBox-checkBox",
                "container": "HvCheckBox-container",
                "disableFocus": "HvCheckBox-disableFocus",
                "disabledBorder": "HvCheckBox-disabledBorder",
                "icon": "HvCheckBox-icon",
                "labelDisabled": "HvCheckBox-labelDisabled",
                "labelEnd": "HvCheckBox-labelEnd",
                "labelStart": "HvCheckBox-labelStart",
                "labelTypography": "HvCheckBox-labelTypography",
              }
            }
            indeterminate={false}
            label={
              <ForwardRef(WithStyles)
                component="span"
              >
                <b>
                  All
                </b>
              </ForwardRef(WithStyles)>
            }
            onChange={[Function]}
            semantic={false}
          >
            <WithStyles(ForwardRef(FormControlLabel))
              className="HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
              classes={
                Object {
                  "disabled": "HvCheckBox-labelDisabled",
                  "label": "HvCheckBox-labelTypography",
                }
              }
              control={
                <ForwardRef(WithStyles)
                  checked={false}
                  checkedIcon={
                    <CheckboxCheck
                      className="HvCheckBox-icon"
                    />
                  }
                  className="HvCheckBox-checkBox"
                  color="default"
                  disableRipple={true}
                  disabled={false}
                  icon={
                    <Checkbox
                      className="HvCheckBox-icon"
                    />
                  }
                  indeterminate={false}
                  indeterminateIcon={
                    <CheckboxPartial
                      className="HvCheckBox-icon"
                    />
                  }
                  onBlur={[Function]}
                  onChange={[Function]}
                  value=""
                />
              }
              disabled={false}
              label={
                <ForwardRef(WithStyles)
                  component="span"
                >
                  <b>
                    All
                  </b>
                </ForwardRef(WithStyles)>
              }
              labelPlacement="end"
            >
              <ForwardRef(FormControlLabel)
                className="HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                classes={
                  Object {
                    "disabled": "Mui-disabled HvCheckBox-labelDisabled",
                    "label": "MuiFormControlLabel-label HvCheckBox-labelTypography",
                    "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                    "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                    "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                    "root": "MuiFormControlLabel-root",
                  }
                }
                control={
                  <ForwardRef(WithStyles)
                    checked={false}
                    checkedIcon={
                      <CheckboxCheck
                        className="HvCheckBox-icon"
                      />
                    }
                    className="HvCheckBox-checkBox"
                    color="default"
                    disableRipple={true}
                    disabled={false}
                    icon={
                      <Checkbox
                        className="HvCheckBox-icon"
                      />
                    }
                    indeterminate={false}
                    indeterminateIcon={
                      <CheckboxPartial
                        className="HvCheckBox-icon"
                      />
                    }
                    onBlur={[Function]}
                    onChange={[Function]}
                    value=""
                  />
                }
                disabled={false}
                label={
                  <ForwardRef(WithStyles)
                    component="span"
                  >
                    <b>
                      All
                    </b>
                  </ForwardRef(WithStyles)>
                }
                labelPlacement="end"
              >
                <label
                  className="MuiFormControlLabel-root HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                >
                  <WithStyles(ForwardRef(Checkbox))
                    checked={false}
                    checkedIcon={
                      <CheckboxCheck
                        className="HvCheckBox-icon"
                      />
                    }
                    className="HvCheckBox-checkBox"
                    color="default"
                    disableRipple={true}
                    disabled={false}
                    icon={
                      <Checkbox
                        className="HvCheckBox-icon"
                      />
                    }
                    indeterminate={false}
                    indeterminateIcon={
                      <CheckboxPartial
                        className="HvCheckBox-icon"
                      />
                    }
                    onBlur={[Function]}
                    onChange={[Function]}
                    value=""
                  >
                    <ForwardRef(Checkbox)
                      checked={false}
                      checkedIcon={
                        <CheckboxCheck
                          className="HvCheckBox-icon"
                        />
                      }
                      className="HvCheckBox-checkBox"
                      classes={
                        Object {
                          "checked": "Mui-checked",
                          "colorPrimary": "MuiCheckbox-colorPrimary",
                          "colorSecondary": "MuiCheckbox-colorSecondary",
                          "disabled": "Mui-disabled",
                          "indeterminate": "MuiCheckbox-indeterminate",
                          "root": "MuiCheckbox-root",
                        }
                      }
                      color="default"
                      disableRipple={true}
                      disabled={false}
                      icon={
                        <Checkbox
                          className="HvCheckBox-icon"
                        />
                      }
                      indeterminate={false}
                      indeterminateIcon={
                        <CheckboxPartial
                          className="HvCheckBox-icon"
                        />
                      }
                      onBlur={[Function]}
                      onChange={[Function]}
                      value=""
                    >
                      <WithStyles(ForwardRef(SwitchBase))
                        checked={false}
                        checkedIcon={
                          <CheckboxCheck
                            className="HvCheckBox-icon"
                            fontSize="default"
                          />
                        }
                        className="HvCheckBox-checkBox"
                        classes={
                          Object {
                            "checked": "Mui-checked",
                            "disabled": "Mui-disabled",
                            "root": "MuiCheckbox-root",
                          }
                        }
                        color="default"
                        disableRipple={true}
                        disabled={false}
                        icon={
                          <Checkbox
                            className="HvCheckBox-icon"
                            fontSize="default"
                          />
                        }
                        inputProps={
                          Object {
                            "data-indeterminate": false,
                          }
                        }
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="checkbox"
                        value=""
                      >
                        <ForwardRef(SwitchBase)
                          checked={false}
                          checkedIcon={
                            <CheckboxCheck
                              className="HvCheckBox-icon"
                              fontSize="default"
                            />
                          }
                          className="HvCheckBox-checkBox"
                          classes={
                            Object {
                              "checked": "PrivateSwitchBase-checked-2 Mui-checked",
                              "disabled": "PrivateSwitchBase-disabled-3 Mui-disabled",
                              "input": "PrivateSwitchBase-input-4",
                              "root": "PrivateSwitchBase-root-1 MuiCheckbox-root",
                            }
                          }
                          color="default"
                          disableRipple={true}
                          disabled={false}
                          icon={
                            <Checkbox
                              className="HvCheckBox-icon"
                              fontSize="default"
                            />
                          }
                          inputProps={
                            Object {
                              "data-indeterminate": false,
                            }
                          }
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="checkbox"
                          value=""
                        >
                          <WithStyles(ForwardRef(IconButton))
                            className="PrivateSwitchBase-root-1 MuiCheckbox-root HvCheckBox-checkBox"
                            color="default"
                            component="span"
                            disableRipple={true}
                            disabled={false}
                            onBlur={[Function]}
                            onFocus={[Function]}
                            tabIndex={null}
                          >
                            <ForwardRef(IconButton)
                              className="PrivateSwitchBase-root-1 MuiCheckbox-root HvCheckBox-checkBox"
                              classes={
                                Object {
                                  "colorInherit": "MuiIconButton-colorInherit",
                                  "colorPrimary": "MuiIconButton-colorPrimary",
                                  "colorSecondary": "MuiIconButton-colorSecondary",
                                  "disabled": "Mui-disabled",
                                  "edgeEnd": "MuiIconButton-edgeEnd",
                                  "edgeStart": "MuiIconButton-edgeStart",
                                  "label": "MuiIconButton-label",
                                  "root": "MuiIconButton-root",
                                  "sizeSmall": "MuiIconButton-sizeSmall",
                                }
                              }
                              color="default"
                              component="span"
                              disableRipple={true}
                              disabled={false}
                              onBlur={[Function]}
                              onFocus={[Function]}
                              tabIndex={null}
                            >
                              <WithStyles(ForwardRef(ButtonBase))
                                centerRipple={true}
                                className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root HvCheckBox-checkBox"
                                component="span"
                                disableRipple={true}
                                disabled={false}
                                focusRipple={true}
                                onBlur={[Function]}
                                onFocus={[Function]}
                                tabIndex={null}
                              >
                                <ForwardRef(ButtonBase)
                                  centerRipple={true}
                                  className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root HvCheckBox-checkBox"
                                  classes={
                                    Object {
                                      "disabled": "Mui-disabled",
                                      "focusVisible": "Mui-focusVisible",
                                      "root": "MuiButtonBase-root",
                                    }
                                  }
                                  component="span"
                                  disableRipple={true}
                                  disabled={false}
                                  focusRipple={true}
                                  onBlur={[Function]}
                                  onFocus={[Function]}
                                  tabIndex={null}
                                >
                                  <span
                                    aria-disabled={false}
                                    className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root HvCheckBox-checkBox"
                                    onBlur={[Function]}
                                    onDragLeave={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchMove={[Function]}
                                    onTouchStart={[Function]}
                                    tabIndex={null}
                                  >
                                    <span
                                      className="MuiIconButton-label"
                                    >
                                      <input
                                        checked={false}
                                        className="PrivateSwitchBase-input-4"
                                        data-indeterminate={false}
                                        disabled={false}
                                        onChange={[Function]}
                                        type="checkbox"
                                        value=""
                                      />
                                      <Checkbox
                                        className="HvCheckBox-icon"
                                        fontSize="default"
                                      >
                                        <WithStyles(HvIconBase)
                                          className="HvCheckBox-icon"
                                          fontSize="default"
                                          iconSize="S"
                                          name="Checkbox"
                                        >
                                          <HvIconBase
                                            className="HvCheckBox-icon"
                                            classes={
                                              Object {
                                                "l": "HvIconBase-l",
                                                "m": "HvIconBase-m",
                                                "root": "HvIconBase-root",
                                                "s": "HvIconBase-s",
                                                "xs": "HvIconBase-xs",
                                              }
                                            }
                                            fontSize="default"
                                            iconSize="S"
                                            name="Checkbox"
                                          >
                                            <div
                                              className="HvCheckBox-icon HvIconBase-root HvIconBase-s"
                                              fontSize="default"
                                              name="Checkbox"
                                            >
                                              <svg
                                                focusable={false}
                                                height={16}
                                                viewBox="0 0 16 16"
                                                width={16}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <path
                                                  className="color0"
                                                  d="M0 0h16v16H0z"
                                                  fill="#FBFCFC"
                                                />
                                                <path
                                                  className="color1"
                                                  d="M16 16H0V0h16zM1 15h14V1H1z"
                                                  fill="#414141"
                                                />
                                              </svg>
                                            </div>
                                          </HvIconBase>
                                        </WithStyles(HvIconBase)>
                                      </Checkbox>
                                    </span>
                                  </span>
                                </ForwardRef(ButtonBase)>
                              </WithStyles(ForwardRef(ButtonBase))>
                            </ForwardRef(IconButton)>
                          </WithStyles(ForwardRef(IconButton))>
                        </ForwardRef(SwitchBase)>
                      </WithStyles(ForwardRef(SwitchBase))>
                    </ForwardRef(Checkbox)>
                  </WithStyles(ForwardRef(Checkbox))>
                  <WithStyles(ForwardRef(Typography))
                    className="MuiFormControlLabel-label HvCheckBox-labelTypography"
                    component="span"
                  >
                    <ForwardRef(Typography)
                      className="MuiFormControlLabel-label HvCheckBox-labelTypography"
                      classes={
                        Object {
                          "alignCenter": "MuiTypography-alignCenter",
                          "alignJustify": "MuiTypography-alignJustify",
                          "alignLeft": "MuiTypography-alignLeft",
                          "alignRight": "MuiTypography-alignRight",
                          "body1": "MuiTypography-body1",
                          "body2": "MuiTypography-body2",
                          "button": "MuiTypography-button",
                          "caption": "MuiTypography-caption",
                          "colorError": "MuiTypography-colorError",
                          "colorInherit": "MuiTypography-colorInherit",
                          "colorPrimary": "MuiTypography-colorPrimary",
                          "colorSecondary": "MuiTypography-colorSecondary",
                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                          "displayBlock": "MuiTypography-displayBlock",
                          "displayInline": "MuiTypography-displayInline",
                          "gutterBottom": "MuiTypography-gutterBottom",
                          "h1": "MuiTypography-h1",
                          "h2": "MuiTypography-h2",
                          "h3": "MuiTypography-h3",
                          "h4": "MuiTypography-h4",
                          "h5": "MuiTypography-h5",
                          "h6": "MuiTypography-h6",
                          "noWrap": "MuiTypography-noWrap",
                          "overline": "MuiTypography-overline",
                          "paragraph": "MuiTypography-paragraph",
                          "root": "MuiTypography-root",
                          "srOnly": "MuiTypography-srOnly",
                          "subtitle1": "MuiTypography-subtitle1",
                          "subtitle2": "MuiTypography-subtitle2",
                        }
                      }
                      component="span"
                    >
                      <span
                        className="MuiTypography-root MuiFormControlLabel-label HvCheckBox-labelTypography MuiTypography-body1"
                      >
                        <WithStyles(ForwardRef)
                          component="span"
                        >
                          <ForwardRef
                            classes={
                              Object {
                                "3xlTitle": "HvTypography-3xlTitle",
                                "4xlTitle": "HvTypography-4xlTitle",
                                "5xlTitle": "HvTypography-5xlTitle",
                                "disabledText": "HvTypography-disabledText",
                                "highlightText": "HvTypography-highlightText",
                                "lTitle": "HvTypography-lTitle",
                                "link": "HvTypography-link",
                                "mTitle": "HvTypography-mTitle",
                                "noWrap": "HvTypography-noWrap",
                                "normalText": "HvTypography-normalText",
                                "placeholderText": "HvTypography-placeholderText",
                                "root": "HvTypography-root",
                                "sTitle": "HvTypography-sTitle",
                                "sectionTitle": "HvTypography-sectionTitle",
                                "selectedNavText": "HvTypography-selectedNavText",
                                "vizText": "HvTypography-vizText",
                                "vizTextDisabled": "HvTypography-vizTextDisabled",
                                "xlTitle": "HvTypography-xlTitle",
                                "xsInlineLink": "HvTypography-xsInlineLink",
                                "xsTitle": "HvTypography-xsTitle",
                                "xxlTitle": "HvTypography-xxlTitle",
                                "xxsTitle": "HvTypography-xxsTitle",
                              }
                            }
                            component="span"
                          >
                            <span
                              className="HvTypography-root HvTypography-normalText"
                            >
                              <b>
                                All
                              </b>
                            </span>
                          </ForwardRef>
                        </WithStyles(ForwardRef)>
                      </span>
                    </ForwardRef(Typography)>
                  </WithStyles(ForwardRef(Typography))>
                </label>
              </ForwardRef(FormControlLabel)>
            </WithStyles(ForwardRef(FormControlLabel))>
          </HvCheckbox>
        </WithStyles(HvCheckbox)>
      </div>
      <WithStyles(ActionsGeneric)
        actions={
          Array [
            Object {
              "iconCallback": [Function],
              "id": "get",
              "label": "Upload",
            },
            Object {
              "iconCallback": [Function],
              "id": "lock",
              "label": "Lock",
            },
            Object {
              "iconCallback": [Function],
              "id": "delete",
              "label": "Delete",
            },
            Object {
              "iconCallback": [Function],
              "id": "post",
              "label": "Add",
            },
            Object {
              "iconCallback": [Function],
              "id": "put",
              "label": "Preview",
            },
          ]
        }
        actionsCallback={[Function]}
        category="ghost"
        classes={
          Object {
            "root": "HvBulkActions-actions",
          }
        }
        disabled={true}
        maxVisibleActions={3}
      >
        <ActionsGeneric
          actions={
            Array [
              Object {
                "iconCallback": [Function],
                "id": "get",
                "label": "Upload",
              },
              Object {
                "iconCallback": [Function],
                "id": "lock",
                "label": "Lock",
              },
              Object {
                "iconCallback": [Function],
                "id": "delete",
                "label": "Delete",
              },
              Object {
                "iconCallback": [Function],
                "id": "post",
                "label": "Add",
              },
              Object {
                "iconCallback": [Function],
                "id": "put",
                "label": "Preview",
              },
            ]
          }
          actionsCallback={[Function]}
          category="ghost"
          classes={
            Object {
              "actionContainer": "HvActionsGeneric-actionContainer",
              "button": "HvActionsGeneric-button",
              "dropDownMenu": "HvActionsGeneric-dropDownMenu",
              "dropDownMenuButton": "HvActionsGeneric-dropDownMenuButton",
              "dropDownMenuButtonSelected": "HvActionsGeneric-dropDownMenuButtonSelected",
              "root": "HvActionsGeneric-root HvBulkActions-actions",
            }
          }
          disabled={true}
          maxVisibleActions={3}
        >
          <div
            className="HvActionsGeneric-root HvBulkActions-actions HvActionsGeneric-actionContainer"
          >
            <WithStyles(HvButton)
              category="ghost"
              className="HvActionsGeneric-button"
              disabled={true}
              id="get"
              key="0"
              onClick={[Function]}
              startIcon={<Upload />}
            >
              <HvButton
                category="ghost"
                className="HvActionsGeneric-button"
                classes={
                  Object {
                    "focusVisible": "HvButton-focusVisible",
                    "ghost": "HvButton-ghost",
                    "ghostDisabled": "HvButton-ghostDisabled",
                    "ghostSVG": "HvButton-ghostSVG",
                    "icon": "HvButton-icon",
                    "iconSVG": "HvButton-iconSVG",
                    "primary": "HvButton-primary",
                    "primaryDisabled": "HvButton-primaryDisabled",
                    "primarySVG": "HvButton-primarySVG",
                    "root": "HvButton-root",
                    "secondary": "HvButton-secondary",
                    "secondaryDisabled": "HvButton-secondaryDisabled",
                    "secondarySVG": "HvButton-secondarySVG",
                    "semantic": "HvButton-semantic",
                    "semanticDisabled": "HvButton-semanticDisabled",
                    "semanticSVG": "HvButton-semanticSVG",
                    "startIcon": "HvButton-startIcon",
                  }
                }
                disabled={true}
                id="get"
                onClick={[Function]}
                startIcon={<Upload />}
              >
                <WithStyles(ForwardRef(Button))
                  className="HvActionsGeneric-button HvButton-ghostSVG"
                  classes={
                    Object {
                      "containedPrimary": "HvButton-primary",
                      "disabled": "HvButton-ghostDisabled",
                      "outlinedPrimary": "HvButton-secondary",
                      "root": "HvButton-root",
                      "startIcon": "HvButton-startIcon",
                      "textPrimary": "HvButton-ghost",
                    }
                  }
                  color="primary"
                  disableRipple={true}
                  disabled={true}
                  focusVisibleClassName="HvButton-focusVisible"
                  id="get"
                  onClick={[Function]}
                  startIcon={<Upload />}
                  variant="text"
                >
                  <ForwardRef(Button)
                    className="HvActionsGeneric-button HvButton-ghostSVG"
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled HvButton-ghostDisabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root HvButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon HvButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="primary"
                    disableRipple={true}
                    disabled={true}
                    focusVisibleClassName="HvButton-focusVisible"
                    id="get"
                    onClick={[Function]}
                    startIcon={<Upload />}
                    variant="text"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                      component="button"
                      disableRipple={true}
                      disabled={true}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                      id="get"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={true}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                        id="get"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled Mui-disabled"
                          disabled={true}
                          id="get"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={-1}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            <span
                              className="MuiButton-startIcon HvButton-startIcon MuiButton-iconSizeMedium"
                            >
                              <Upload>
                                <WithStyles(HvIconBase)
                                  iconSize="S"
                                  name="Upload"
                                >
                                  <HvIconBase
                                    classes={
                                      Object {
                                        "l": "HvIconBase-l",
                                        "m": "HvIconBase-m",
                                        "root": "HvIconBase-root",
                                        "s": "HvIconBase-s",
                                        "xs": "HvIconBase-xs",
                                      }
                                    }
                                    iconSize="S"
                                    name="Upload"
                                  >
                                    <div
                                      className="HvIconBase-root HvIconBase-s"
                                      name="Upload"
                                    >
                                      <svg
                                        focusable={false}
                                        height={16}
                                        viewBox="0 0 16 16"
                                        width={16}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          className="color0"
                                          d="M16 11v5H0v-5h1v4h14v-4zM7.5 1.90015V13h1V1.90015l4.1 4.2.8-.80005-5.4-5.3-5.4 5.30005.8.80005z"
                                          fill="#414141"
                                        />
                                      </svg>
                                    </div>
                                  </HvIconBase>
                                </WithStyles(HvIconBase)>
                              </Upload>
                            </span>
                            Upload
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </HvButton>
            </WithStyles(HvButton)>
            <WithStyles(HvButton)
              category="ghost"
              className="HvActionsGeneric-button"
              disabled={true}
              id="lock"
              key="1"
              onClick={[Function]}
              startIcon={<Lock />}
            >
              <HvButton
                category="ghost"
                className="HvActionsGeneric-button"
                classes={
                  Object {
                    "focusVisible": "HvButton-focusVisible",
                    "ghost": "HvButton-ghost",
                    "ghostDisabled": "HvButton-ghostDisabled",
                    "ghostSVG": "HvButton-ghostSVG",
                    "icon": "HvButton-icon",
                    "iconSVG": "HvButton-iconSVG",
                    "primary": "HvButton-primary",
                    "primaryDisabled": "HvButton-primaryDisabled",
                    "primarySVG": "HvButton-primarySVG",
                    "root": "HvButton-root",
                    "secondary": "HvButton-secondary",
                    "secondaryDisabled": "HvButton-secondaryDisabled",
                    "secondarySVG": "HvButton-secondarySVG",
                    "semantic": "HvButton-semantic",
                    "semanticDisabled": "HvButton-semanticDisabled",
                    "semanticSVG": "HvButton-semanticSVG",
                    "startIcon": "HvButton-startIcon",
                  }
                }
                disabled={true}
                id="lock"
                onClick={[Function]}
                startIcon={<Lock />}
              >
                <WithStyles(ForwardRef(Button))
                  className="HvActionsGeneric-button HvButton-ghostSVG"
                  classes={
                    Object {
                      "containedPrimary": "HvButton-primary",
                      "disabled": "HvButton-ghostDisabled",
                      "outlinedPrimary": "HvButton-secondary",
                      "root": "HvButton-root",
                      "startIcon": "HvButton-startIcon",
                      "textPrimary": "HvButton-ghost",
                    }
                  }
                  color="primary"
                  disableRipple={true}
                  disabled={true}
                  focusVisibleClassName="HvButton-focusVisible"
                  id="lock"
                  onClick={[Function]}
                  startIcon={<Lock />}
                  variant="text"
                >
                  <ForwardRef(Button)
                    className="HvActionsGeneric-button HvButton-ghostSVG"
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled HvButton-ghostDisabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root HvButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon HvButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="primary"
                    disableRipple={true}
                    disabled={true}
                    focusVisibleClassName="HvButton-focusVisible"
                    id="lock"
                    onClick={[Function]}
                    startIcon={<Lock />}
                    variant="text"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                      component="button"
                      disableRipple={true}
                      disabled={true}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                      id="lock"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={true}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                        id="lock"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled Mui-disabled"
                          disabled={true}
                          id="lock"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={-1}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            <span
                              className="MuiButton-startIcon HvButton-startIcon MuiButton-iconSizeMedium"
                            >
                              <Lock>
                                <WithStyles(HvIconBase)
                                  iconSize="S"
                                  name="Lock"
                                >
                                  <HvIconBase
                                    classes={
                                      Object {
                                        "l": "HvIconBase-l",
                                        "m": "HvIconBase-m",
                                        "root": "HvIconBase-root",
                                        "s": "HvIconBase-s",
                                        "xs": "HvIconBase-xs",
                                      }
                                    }
                                    iconSize="S"
                                    name="Lock"
                                  >
                                    <div
                                      className="HvIconBase-root HvIconBase-s"
                                      name="Lock"
                                    >
                                      <svg
                                        focusable={false}
                                        height={16}
                                        viewBox="0 0 16 16"
                                        width={16}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          className="color0"
                                          d="M12 4V0H4v4H2v12h12V4zM5 1h6v3H5zm8 14H3V5h10zM7.5 8h1v4h-1z"
                                          fill="#414141"
                                        />
                                      </svg>
                                    </div>
                                  </HvIconBase>
                                </WithStyles(HvIconBase)>
                              </Lock>
                            </span>
                            Lock
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </HvButton>
            </WithStyles(HvButton)>
            <WithStyles(HvButton)
              category="ghost"
              className="HvActionsGeneric-button"
              disabled={true}
              id="delete"
              key="2"
              onClick={[Function]}
              startIcon={<Delete />}
            >
              <HvButton
                category="ghost"
                className="HvActionsGeneric-button"
                classes={
                  Object {
                    "focusVisible": "HvButton-focusVisible",
                    "ghost": "HvButton-ghost",
                    "ghostDisabled": "HvButton-ghostDisabled",
                    "ghostSVG": "HvButton-ghostSVG",
                    "icon": "HvButton-icon",
                    "iconSVG": "HvButton-iconSVG",
                    "primary": "HvButton-primary",
                    "primaryDisabled": "HvButton-primaryDisabled",
                    "primarySVG": "HvButton-primarySVG",
                    "root": "HvButton-root",
                    "secondary": "HvButton-secondary",
                    "secondaryDisabled": "HvButton-secondaryDisabled",
                    "secondarySVG": "HvButton-secondarySVG",
                    "semantic": "HvButton-semantic",
                    "semanticDisabled": "HvButton-semanticDisabled",
                    "semanticSVG": "HvButton-semanticSVG",
                    "startIcon": "HvButton-startIcon",
                  }
                }
                disabled={true}
                id="delete"
                onClick={[Function]}
                startIcon={<Delete />}
              >
                <WithStyles(ForwardRef(Button))
                  className="HvActionsGeneric-button HvButton-ghostSVG"
                  classes={
                    Object {
                      "containedPrimary": "HvButton-primary",
                      "disabled": "HvButton-ghostDisabled",
                      "outlinedPrimary": "HvButton-secondary",
                      "root": "HvButton-root",
                      "startIcon": "HvButton-startIcon",
                      "textPrimary": "HvButton-ghost",
                    }
                  }
                  color="primary"
                  disableRipple={true}
                  disabled={true}
                  focusVisibleClassName="HvButton-focusVisible"
                  id="delete"
                  onClick={[Function]}
                  startIcon={<Delete />}
                  variant="text"
                >
                  <ForwardRef(Button)
                    className="HvActionsGeneric-button HvButton-ghostSVG"
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled HvButton-ghostDisabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root HvButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon HvButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="primary"
                    disableRipple={true}
                    disabled={true}
                    focusVisibleClassName="HvButton-focusVisible"
                    id="delete"
                    onClick={[Function]}
                    startIcon={<Delete />}
                    variant="text"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                      component="button"
                      disableRipple={true}
                      disabled={true}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                      id="delete"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={true}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                        id="delete"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvActionsGeneric-button HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled Mui-disabled"
                          disabled={true}
                          id="delete"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={-1}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            <span
                              className="MuiButton-startIcon HvButton-startIcon MuiButton-iconSizeMedium"
                            >
                              <Delete>
                                <WithStyles(HvIconBase)
                                  iconSize="S"
                                  name="Delete"
                                >
                                  <HvIconBase
                                    classes={
                                      Object {
                                        "l": "HvIconBase-l",
                                        "m": "HvIconBase-m",
                                        "root": "HvIconBase-root",
                                        "s": "HvIconBase-s",
                                        "xs": "HvIconBase-xs",
                                      }
                                    }
                                    iconSize="S"
                                    name="Delete"
                                  >
                                    <div
                                      className="HvIconBase-root HvIconBase-s"
                                      name="Delete"
                                    >
                                      <svg
                                        focusable={false}
                                        height={16}
                                        viewBox="0 0 16 16"
                                        width={16}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          className="color0"
                                          d="M12 1H4V0h8zm4 1v1h-2.1L13 16H3L2.1 3H0V2zm-3 1H3.1L4 15h8.1z"
                                          fill="#414141"
                                        />
                                      </svg>
                                    </div>
                                  </HvIconBase>
                                </WithStyles(HvIconBase)>
                              </Delete>
                            </span>
                            Delete
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </HvButton>
            </WithStyles(HvButton)>
            <WithStyles(WithId)
              category="ghost"
              classes={
                Object {
                  "icon": "HvActionsGeneric-dropDownMenuButton",
                  "iconSelected": "HvActionsGeneric-dropDownMenuButtonSelected",
                  "root": "HvActionsGeneric-dropDownMenu",
                }
              }
              dataList={
                Array [
                  Object {
                    "iconCallback": [Function],
                    "id": "post",
                    "label": "Add",
                  },
                  Object {
                    "iconCallback": [Function],
                    "id": "put",
                    "label": "Preview",
                  },
                ]
              }
              disablePortal={false}
              disabled={true}
              icon={
                <MoreOptionsVertical
                  color="atmo5"
                />
              }
              keepOpened={false}
              onClick={[Function]}
              placement="left"
            >
              <WithId
                category="ghost"
                classes={
                  Object {
                    "icon": "HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton",
                    "iconSelected": "HvDropDownMenu-iconSelected HvActionsGeneric-dropDownMenuButtonSelected",
                    "root": "HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                  }
                }
                dataList={
                  Array [
                    Object {
                      "iconCallback": [Function],
                      "id": "post",
                      "label": "Add",
                    },
                    Object {
                      "iconCallback": [Function],
                      "id": "put",
                      "label": "Preview",
                    },
                  ]
                }
                disablePortal={false}
                disabled={true}
                icon={
                  <MoreOptionsVertical
                    color="atmo5"
                  />
                }
                keepOpened={false}
                onClick={[Function]}
                placement="left"
              >
                <DropDownMenu
                  category="ghost"
                  classes={
                    Object {
                      "icon": "HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton",
                      "iconSelected": "HvDropDownMenu-iconSelected HvActionsGeneric-dropDownMenuButtonSelected",
                      "root": "HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                    }
                  }
                  dataList={
                    Array [
                      Object {
                        "iconCallback": [Function],
                        "id": "post",
                        "label": "Add",
                      },
                      Object {
                        "iconCallback": [Function],
                        "id": "put",
                        "label": "Preview",
                      },
                    ]
                  }
                  disablePortal={false}
                  disabled={true}
                  icon={
                    <MoreOptionsVertical
                      color="atmo5"
                    />
                  }
                  id="drop-down-menu-1"
                  keepOpened={false}
                  onClick={[Function]}
                  placement="left"
                >
                  <WithStyles(WithId)
                    classes={
                      Object {
                        "root": "HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                      }
                    }
                    component={
                      <ForwardRef(WithStyles)
                        aria-label="Dropdown menu"
                        category="ghost"
                        className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                        disabled={true}
                        icon={true}
                        id="drop-down-menu-1-icon-button"
                      >
                        <MoreOptionsVertical
                          color="atmo5"
                        />
                      </ForwardRef(WithStyles)>
                    }
                    disablePortal={false}
                    disabled={true}
                    expanded={false}
                    id="drop-down-menu-1"
                    onToggle={[Function]}
                    placement="left"
                  >
                    <WithId
                      classes={
                        Object {
                          "arrow": "HvBaseDropdown-arrow",
                          "header": "HvBaseDropdown-header",
                          "headerDisabled": "HvBaseDropdown-headerDisabled",
                          "headerOpen": "HvBaseDropdown-headerOpen",
                          "headerOpenDown": "HvBaseDropdown-headerOpenDown",
                          "headerOpenUp": "HvBaseDropdown-headerOpenUp",
                          "inputExtensionFloatLeft": "HvBaseDropdown-inputExtensionFloatLeft",
                          "inputExtensionFloatRight": "HvBaseDropdown-inputExtensionFloatRight",
                          "inputExtensionLeftPosition": "HvBaseDropdown-inputExtensionLeftPosition",
                          "inputExtensionOpen": "HvBaseDropdown-inputExtensionOpen",
                          "inputExtensionOpenShadow": "HvBaseDropdown-inputExtensionOpenShadow",
                          "panel": "HvBaseDropdown-panel",
                          "root": "HvBaseDropdown-root HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                          "selection": "HvBaseDropdown-selection",
                          "selectionDisabled": "HvBaseDropdown-selectionDisabled",
                          "truncate": "HvBaseDropdown-truncate",
                        }
                      }
                      component={
                        <ForwardRef(WithStyles)
                          aria-label="Dropdown menu"
                          category="ghost"
                          className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                          disabled={true}
                          icon={true}
                          id="drop-down-menu-1-icon-button"
                        >
                          <MoreOptionsVertical
                            color="atmo5"
                          />
                        </ForwardRef(WithStyles)>
                      }
                      disablePortal={false}
                      disabled={true}
                      expanded={false}
                      id="drop-down-menu-1"
                      onToggle={[Function]}
                      placement="left"
                    >
                      <HvBaseDropdown
                        classes={
                          Object {
                            "arrow": "HvBaseDropdown-arrow",
                            "header": "HvBaseDropdown-header",
                            "headerDisabled": "HvBaseDropdown-headerDisabled",
                            "headerOpen": "HvBaseDropdown-headerOpen",
                            "headerOpenDown": "HvBaseDropdown-headerOpenDown",
                            "headerOpenUp": "HvBaseDropdown-headerOpenUp",
                            "inputExtensionFloatLeft": "HvBaseDropdown-inputExtensionFloatLeft",
                            "inputExtensionFloatRight": "HvBaseDropdown-inputExtensionFloatRight",
                            "inputExtensionLeftPosition": "HvBaseDropdown-inputExtensionLeftPosition",
                            "inputExtensionOpen": "HvBaseDropdown-inputExtensionOpen",
                            "inputExtensionOpenShadow": "HvBaseDropdown-inputExtensionOpenShadow",
                            "panel": "HvBaseDropdown-panel",
                            "root": "HvBaseDropdown-root HvDropDownMenu-root HvActionsGeneric-dropDownMenu",
                            "selection": "HvBaseDropdown-selection",
                            "selectionDisabled": "HvBaseDropdown-selectionDisabled",
                            "truncate": "HvBaseDropdown-truncate",
                          }
                        }
                        component={
                          <ForwardRef(WithStyles)
                            aria-label="Dropdown menu"
                            category="ghost"
                            className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                            disabled={true}
                            icon={true}
                            id="drop-down-menu-1-icon-button"
                          >
                            <MoreOptionsVertical
                              color="atmo5"
                            />
                          </ForwardRef(WithStyles)>
                        }
                        disablePortal={false}
                        disabled={true}
                        expanded={false}
                        id="drop-down-menu-1"
                        onToggle={[Function]}
                        placement="left"
                      >
                        <div
                          aria-expanded={false}
                          aria-haspopup="listbox"
                          className="HvBaseDropdown-root HvDropDownMenu-root HvActionsGeneric-dropDownMenu"
                          id="drop-down-menu-1"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          tabIndex={-1}
                        >
                          <WithStyles(HvButton)
                            aria-label="Dropdown menu"
                            category="ghost"
                            className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                            disabled={true}
                            icon={true}
                            id="drop-down-menu-1-icon-button"
                          >
                            <HvButton
                              aria-label="Dropdown menu"
                              category="ghost"
                              className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton"
                              classes={
                                Object {
                                  "focusVisible": "HvButton-focusVisible",
                                  "ghost": "HvButton-ghost",
                                  "ghostDisabled": "HvButton-ghostDisabled",
                                  "ghostSVG": "HvButton-ghostSVG",
                                  "icon": "HvButton-icon",
                                  "iconSVG": "HvButton-iconSVG",
                                  "primary": "HvButton-primary",
                                  "primaryDisabled": "HvButton-primaryDisabled",
                                  "primarySVG": "HvButton-primarySVG",
                                  "root": "HvButton-root",
                                  "secondary": "HvButton-secondary",
                                  "secondaryDisabled": "HvButton-secondaryDisabled",
                                  "secondarySVG": "HvButton-secondarySVG",
                                  "semantic": "HvButton-semantic",
                                  "semanticDisabled": "HvButton-semanticDisabled",
                                  "semanticSVG": "HvButton-semanticSVG",
                                  "startIcon": "HvButton-startIcon",
                                }
                              }
                              disabled={true}
                              icon={true}
                              id="drop-down-menu-1-icon-button"
                            >
                              <WithStyles(ForwardRef(Button))
                                aria-label="Dropdown menu"
                                className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG"
                                classes={
                                  Object {
                                    "containedPrimary": "HvButton-primary",
                                    "disabled": "HvButton-ghostDisabled",
                                    "outlinedPrimary": "HvButton-secondary",
                                    "root": "HvButton-root",
                                    "startIcon": "HvButton-startIcon",
                                    "textPrimary": "HvButton-ghost",
                                  }
                                }
                                color="primary"
                                disableRipple={true}
                                disabled={true}
                                focusVisibleClassName="HvButton-focusVisible"
                                id="drop-down-menu-1-icon-button"
                                variant="text"
                              >
                                <ForwardRef(Button)
                                  aria-label="Dropdown menu"
                                  className="HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG"
                                  classes={
                                    Object {
                                      "colorInherit": "MuiButton-colorInherit",
                                      "contained": "MuiButton-contained",
                                      "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                                      "containedSecondary": "MuiButton-containedSecondary",
                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                      "disableElevation": "MuiButton-disableElevation",
                                      "disabled": "Mui-disabled HvButton-ghostDisabled",
                                      "endIcon": "MuiButton-endIcon",
                                      "focusVisible": "Mui-focusVisible",
                                      "fullWidth": "MuiButton-fullWidth",
                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                      "label": "MuiButton-label",
                                      "outlined": "MuiButton-outlined",
                                      "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                      "root": "MuiButton-root HvButton-root",
                                      "sizeLarge": "MuiButton-sizeLarge",
                                      "sizeSmall": "MuiButton-sizeSmall",
                                      "startIcon": "MuiButton-startIcon HvButton-startIcon",
                                      "text": "MuiButton-text",
                                      "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                                      "textSecondary": "MuiButton-textSecondary",
                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                    }
                                  }
                                  color="primary"
                                  disableRipple={true}
                                  disabled={true}
                                  focusVisibleClassName="HvButton-focusVisible"
                                  id="drop-down-menu-1-icon-button"
                                  variant="text"
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    aria-label="Dropdown menu"
                                    className="MuiButton-root HvButton-root MuiButton-text HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                                    component="button"
                                    disableRipple={true}
                                    disabled={true}
                                    focusRipple={true}
                                    focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                                    id="drop-down-menu-1-icon-button"
                                    type="button"
                                  >
                                    <ForwardRef(ButtonBase)
                                      aria-label="Dropdown menu"
                                      className="MuiButton-root HvButton-root MuiButton-text HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      component="button"
                                      disableRipple={true}
                                      disabled={true}
                                      focusRipple={true}
                                      focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                                      id="drop-down-menu-1-icon-button"
                                      type="button"
                                    >
                                      <button
                                        aria-label="Dropdown menu"
                                        className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvDropDownMenu-icon HvActionsGeneric-dropDownMenuButton HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost Mui-disabled HvButton-ghostDisabled Mui-disabled"
                                        disabled={true}
                                        id="drop-down-menu-1-icon-button"
                                        onBlur={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={-1}
                                        type="button"
                                      >
                                        <span
                                          className="MuiButton-label"
                                        >
                                          <MoreOptionsVertical
                                            color="atmo5"
                                          >
                                            <WithStyles(HvIconBase)
                                              iconSize="S"
                                              name="MoreOptionsVertical"
                                            >
                                              <HvIconBase
                                                classes={
                                                  Object {
                                                    "l": "HvIconBase-l",
                                                    "m": "HvIconBase-m",
                                                    "root": "HvIconBase-root",
                                                    "s": "HvIconBase-s",
                                                    "xs": "HvIconBase-xs",
                                                  }
                                                }
                                                iconSize="S"
                                                name="MoreOptionsVertical"
                                              >
                                                <div
                                                  className="HvIconBase-root HvIconBase-s"
                                                  name="MoreOptionsVertical"
                                                >
                                                  <svg
                                                    focusable={false}
                                                    height={16}
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <path
                                                      className="color0"
                                                      d="M7 6.9h2v2H7zM7 4h2V2H7zm0 10h2v-2H7z"
                                                      fill="#999999"
                                                    />
                                                  </svg>
                                                </div>
                                              </HvIconBase>
                                            </WithStyles(HvIconBase)>
                                          </MoreOptionsVertical>
                                        </span>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(Button)>
                              </WithStyles(ForwardRef(Button))>
                            </HvButton>
                          </WithStyles(HvButton)>
                        </div>
                        <ForwardRef(Popper)
                          anchorEl={null}
                          disablePortal={false}
                          open={false}
                          placement="bottom-end"
                          popperOptions={
                            Object {
                              "onCreate": [Function],
                              "onUpdate": [Function],
                            }
                          }
                          style={
                            Object {
                              "zIndex": 1500,
                            }
                          }
                        />
                      </HvBaseDropdown>
                    </WithId>
                  </WithStyles(WithId)>
                </DropDownMenu>
              </WithId>
            </WithStyles(WithId)>
          </div>
        </ActionsGeneric>
      </WithStyles(ActionsGeneric)>
    </div>
  </HvBulkActions>
</WithStyles(HvBulkActions)>
`;

exports[`[v3] BulkActions with custom label should render correctly 1`] = `
<WithStyles(HvBulkActions)
  numSelected={2}
  numTotal={5}
  selectAllLabel="MockLabel"
>
  <HvBulkActions
    classes={
      Object {
        "actions": "HvBulkActions-actions",
        "editMode": "HvBulkActions-editMode",
        "root": "HvBulkActions-root",
        "selectAll": "HvBulkActions-selectAll",
        "selectAllContainer": "HvBulkActions-selectAllContainer",
        "selectAllPages": "HvBulkActions-selectAllPages",
      }
    }
    numSelected={2}
    numTotal={5}
    selectAllLabel="MockLabel"
  >
    <div
      className="HvBulkActions-root HvBulkActions-editMode"
    >
      <div
        className="HvBulkActions-selectAllContainer"
      >
        <WithStyles(HvCheckbox)
          checked={true}
          className="HvBulkActions-selectAll"
          indeterminate={true}
          label="MockLabel"
          onChange={[Function]}
          semantic={true}
        >
          <HvCheckbox
            checked={true}
            className="HvBulkActions-selectAll"
            classes={
              Object {
                "checkBox": "HvCheckBox-checkBox",
                "container": "HvCheckBox-container",
                "disableFocus": "HvCheckBox-disableFocus",
                "disabledBorder": "HvCheckBox-disabledBorder",
                "icon": "HvCheckBox-icon",
                "labelDisabled": "HvCheckBox-labelDisabled",
                "labelEnd": "HvCheckBox-labelEnd",
                "labelStart": "HvCheckBox-labelStart",
                "labelTypography": "HvCheckBox-labelTypography",
              }
            }
            indeterminate={true}
            label="MockLabel"
            onChange={[Function]}
            semantic={true}
          >
            <WithStyles(ForwardRef(FormControlLabel))
              className="HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
              classes={
                Object {
                  "disabled": "HvCheckBox-labelDisabled",
                  "label": "HvCheckBox-labelTypography",
                }
              }
              control={
                <ForwardRef(WithStyles)
                  checked={true}
                  checkedIcon={
                    <CheckboxCheck
                      className="HvCheckBox-icon"
                      color={
                        Array [
                          "base2",
                          "base1",
                        ]
                      }
                    />
                  }
                  className="HvCheckBox-checkBox"
                  color="default"
                  disableRipple={true}
                  disabled={false}
                  icon={
                    <Checkbox
                      className="HvCheckBox-icon"
                      color={
                        Array [
                          "base1",
                          "base2",
                        ]
                      }
                    />
                  }
                  indeterminate={true}
                  indeterminateIcon={
                    <CheckboxPartial
                      className="HvCheckBox-icon"
                      color={
                        Array [
                          "base1",
                          "base2",
                        ]
                      }
                    />
                  }
                  onBlur={[Function]}
                  onChange={[Function]}
                  value=""
                />
              }
              disabled={false}
              label="MockLabel"
              labelPlacement="end"
            >
              <ForwardRef(FormControlLabel)
                className="HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                classes={
                  Object {
                    "disabled": "Mui-disabled HvCheckBox-labelDisabled",
                    "label": "MuiFormControlLabel-label HvCheckBox-labelTypography",
                    "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                    "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                    "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                    "root": "MuiFormControlLabel-root",
                  }
                }
                control={
                  <ForwardRef(WithStyles)
                    checked={true}
                    checkedIcon={
                      <CheckboxCheck
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base2",
                            "base1",
                          ]
                        }
                      />
                    }
                    className="HvCheckBox-checkBox"
                    color="default"
                    disableRipple={true}
                    disabled={false}
                    icon={
                      <Checkbox
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base1",
                            "base2",
                          ]
                        }
                      />
                    }
                    indeterminate={true}
                    indeterminateIcon={
                      <CheckboxPartial
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base1",
                            "base2",
                          ]
                        }
                      />
                    }
                    onBlur={[Function]}
                    onChange={[Function]}
                    value=""
                  />
                }
                disabled={false}
                label="MockLabel"
                labelPlacement="end"
              >
                <label
                  className="MuiFormControlLabel-root HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                >
                  <WithStyles(ForwardRef(Checkbox))
                    checked={true}
                    checkedIcon={
                      <CheckboxCheck
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base2",
                            "base1",
                          ]
                        }
                      />
                    }
                    className="HvCheckBox-checkBox"
                    color="default"
                    disableRipple={true}
                    disabled={false}
                    icon={
                      <Checkbox
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base1",
                            "base2",
                          ]
                        }
                      />
                    }
                    indeterminate={true}
                    indeterminateIcon={
                      <CheckboxPartial
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base1",
                            "base2",
                          ]
                        }
                      />
                    }
                    onBlur={[Function]}
                    onChange={[Function]}
                    value=""
                  >
                    <ForwardRef(Checkbox)
                      checked={true}
                      checkedIcon={
                        <CheckboxCheck
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base2",
                              "base1",
                            ]
                          }
                        />
                      }
                      className="HvCheckBox-checkBox"
                      classes={
                        Object {
                          "checked": "Mui-checked",
                          "colorPrimary": "MuiCheckbox-colorPrimary",
                          "colorSecondary": "MuiCheckbox-colorSecondary",
                          "disabled": "Mui-disabled",
                          "indeterminate": "MuiCheckbox-indeterminate",
                          "root": "MuiCheckbox-root",
                        }
                      }
                      color="default"
                      disableRipple={true}
                      disabled={false}
                      icon={
                        <Checkbox
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base1",
                              "base2",
                            ]
                          }
                        />
                      }
                      indeterminate={true}
                      indeterminateIcon={
                        <CheckboxPartial
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base1",
                              "base2",
                            ]
                          }
                        />
                      }
                      onBlur={[Function]}
                      onChange={[Function]}
                      value=""
                    >
                      <WithStyles(ForwardRef(SwitchBase))
                        checked={true}
                        checkedIcon={
                          <CheckboxPartial
                            className="HvCheckBox-icon"
                            color={
                              Array [
                                "base1",
                                "base2",
                              ]
                            }
                            fontSize="default"
                          />
                        }
                        className="HvCheckBox-checkBox"
                        classes={
                          Object {
                            "checked": "Mui-checked",
                            "disabled": "Mui-disabled",
                            "root": "MuiCheckbox-root MuiCheckbox-indeterminate",
                          }
                        }
                        color="default"
                        disableRipple={true}
                        disabled={false}
                        icon={
                          <CheckboxPartial
                            className="HvCheckBox-icon"
                            color={
                              Array [
                                "base1",
                                "base2",
                              ]
                            }
                            fontSize="default"
                          />
                        }
                        inputProps={
                          Object {
                            "data-indeterminate": true,
                          }
                        }
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="checkbox"
                        value=""
                      >
                        <ForwardRef(SwitchBase)
                          checked={true}
                          checkedIcon={
                            <CheckboxPartial
                              className="HvCheckBox-icon"
                              color={
                                Array [
                                  "base1",
                                  "base2",
                                ]
                              }
                              fontSize="default"
                            />
                          }
                          className="HvCheckBox-checkBox"
                          classes={
                            Object {
                              "checked": "PrivateSwitchBase-checked-15 Mui-checked",
                              "disabled": "PrivateSwitchBase-disabled-16 Mui-disabled",
                              "input": "PrivateSwitchBase-input-17",
                              "root": "PrivateSwitchBase-root-14 MuiCheckbox-root MuiCheckbox-indeterminate",
                            }
                          }
                          color="default"
                          disableRipple={true}
                          disabled={false}
                          icon={
                            <CheckboxPartial
                              className="HvCheckBox-icon"
                              color={
                                Array [
                                  "base1",
                                  "base2",
                                ]
                              }
                              fontSize="default"
                            />
                          }
                          inputProps={
                            Object {
                              "data-indeterminate": true,
                            }
                          }
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="checkbox"
                          value=""
                        >
                          <WithStyles(ForwardRef(IconButton))
                            className="PrivateSwitchBase-root-14 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-15 Mui-checked"
                            color="default"
                            component="span"
                            disableRipple={true}
                            disabled={false}
                            onBlur={[Function]}
                            onFocus={[Function]}
                            tabIndex={null}
                          >
                            <ForwardRef(IconButton)
                              className="PrivateSwitchBase-root-14 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-15 Mui-checked"
                              classes={
                                Object {
                                  "colorInherit": "MuiIconButton-colorInherit",
                                  "colorPrimary": "MuiIconButton-colorPrimary",
                                  "colorSecondary": "MuiIconButton-colorSecondary",
                                  "disabled": "Mui-disabled",
                                  "edgeEnd": "MuiIconButton-edgeEnd",
                                  "edgeStart": "MuiIconButton-edgeStart",
                                  "label": "MuiIconButton-label",
                                  "root": "MuiIconButton-root",
                                  "sizeSmall": "MuiIconButton-sizeSmall",
                                }
                              }
                              color="default"
                              component="span"
                              disableRipple={true}
                              disabled={false}
                              onBlur={[Function]}
                              onFocus={[Function]}
                              tabIndex={null}
                            >
                              <WithStyles(ForwardRef(ButtonBase))
                                centerRipple={true}
                                className="MuiIconButton-root PrivateSwitchBase-root-14 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-15 Mui-checked"
                                component="span"
                                disableRipple={true}
                                disabled={false}
                                focusRipple={true}
                                onBlur={[Function]}
                                onFocus={[Function]}
                                tabIndex={null}
                              >
                                <ForwardRef(ButtonBase)
                                  centerRipple={true}
                                  className="MuiIconButton-root PrivateSwitchBase-root-14 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-15 Mui-checked"
                                  classes={
                                    Object {
                                      "disabled": "Mui-disabled",
                                      "focusVisible": "Mui-focusVisible",
                                      "root": "MuiButtonBase-root",
                                    }
                                  }
                                  component="span"
                                  disableRipple={true}
                                  disabled={false}
                                  focusRipple={true}
                                  onBlur={[Function]}
                                  onFocus={[Function]}
                                  tabIndex={null}
                                >
                                  <span
                                    aria-disabled={false}
                                    className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-14 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-15 Mui-checked"
                                    onBlur={[Function]}
                                    onDragLeave={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchMove={[Function]}
                                    onTouchStart={[Function]}
                                    tabIndex={null}
                                  >
                                    <span
                                      className="MuiIconButton-label"
                                    >
                                      <input
                                        checked={true}
                                        className="PrivateSwitchBase-input-17"
                                        data-indeterminate={true}
                                        disabled={false}
                                        onChange={[Function]}
                                        type="checkbox"
                                        value=""
                                      />
                                      <CheckboxPartial
                                        className="HvCheckBox-icon"
                                        color={
                                          Array [
                                            "base1",
                                            "base2",
                                          ]
                                        }
                                        fontSize="default"
                                      >
                                        <WithStyles(HvIconBase)
                                          className="HvCheckBox-icon"
                                          fontSize="default"
                                          iconSize="S"
                                          name="CheckboxPartial"
                                        >
                                          <HvIconBase
                                            className="HvCheckBox-icon"
                                            classes={
                                              Object {
                                                "l": "HvIconBase-l",
                                                "m": "HvIconBase-m",
                                                "root": "HvIconBase-root",
                                                "s": "HvIconBase-s",
                                                "xs": "HvIconBase-xs",
                                              }
                                            }
                                            fontSize="default"
                                            iconSize="S"
                                            name="CheckboxPartial"
                                          >
                                            <div
                                              className="HvCheckBox-icon HvIconBase-root HvIconBase-s"
                                              fontSize="default"
                                              name="CheckboxPartial"
                                            >
                                              <svg
                                                focusable={false}
                                                height={16}
                                                viewBox="0 0 16 16"
                                                width={16}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <path
                                                  className="color0"
                                                  d="M0 0h16v16H0z"
                                                  fill="#FBFCFC"
                                                />
                                                <path
                                                  className="color1"
                                                  d="M16 16H0V0h16zM1 15h14V1H1zm3-6h8V7H4z"
                                                  fill="#414141"
                                                />
                                              </svg>
                                            </div>
                                          </HvIconBase>
                                        </WithStyles(HvIconBase)>
                                      </CheckboxPartial>
                                    </span>
                                  </span>
                                </ForwardRef(ButtonBase)>
                              </WithStyles(ForwardRef(ButtonBase))>
                            </ForwardRef(IconButton)>
                          </WithStyles(ForwardRef(IconButton))>
                        </ForwardRef(SwitchBase)>
                      </WithStyles(ForwardRef(SwitchBase))>
                    </ForwardRef(Checkbox)>
                  </WithStyles(ForwardRef(Checkbox))>
                  <WithStyles(ForwardRef(Typography))
                    className="MuiFormControlLabel-label HvCheckBox-labelTypography"
                    component="span"
                  >
                    <ForwardRef(Typography)
                      className="MuiFormControlLabel-label HvCheckBox-labelTypography"
                      classes={
                        Object {
                          "alignCenter": "MuiTypography-alignCenter",
                          "alignJustify": "MuiTypography-alignJustify",
                          "alignLeft": "MuiTypography-alignLeft",
                          "alignRight": "MuiTypography-alignRight",
                          "body1": "MuiTypography-body1",
                          "body2": "MuiTypography-body2",
                          "button": "MuiTypography-button",
                          "caption": "MuiTypography-caption",
                          "colorError": "MuiTypography-colorError",
                          "colorInherit": "MuiTypography-colorInherit",
                          "colorPrimary": "MuiTypography-colorPrimary",
                          "colorSecondary": "MuiTypography-colorSecondary",
                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                          "displayBlock": "MuiTypography-displayBlock",
                          "displayInline": "MuiTypography-displayInline",
                          "gutterBottom": "MuiTypography-gutterBottom",
                          "h1": "MuiTypography-h1",
                          "h2": "MuiTypography-h2",
                          "h3": "MuiTypography-h3",
                          "h4": "MuiTypography-h4",
                          "h5": "MuiTypography-h5",
                          "h6": "MuiTypography-h6",
                          "noWrap": "MuiTypography-noWrap",
                          "overline": "MuiTypography-overline",
                          "paragraph": "MuiTypography-paragraph",
                          "root": "MuiTypography-root",
                          "srOnly": "MuiTypography-srOnly",
                          "subtitle1": "MuiTypography-subtitle1",
                          "subtitle2": "MuiTypography-subtitle2",
                        }
                      }
                      component="span"
                    >
                      <span
                        className="MuiTypography-root MuiFormControlLabel-label HvCheckBox-labelTypography MuiTypography-body1"
                      >
                        MockLabel
                      </span>
                    </ForwardRef(Typography)>
                  </WithStyles(ForwardRef(Typography))>
                </label>
              </ForwardRef(FormControlLabel)>
            </WithStyles(ForwardRef(FormControlLabel))>
          </HvCheckbox>
        </WithStyles(HvCheckbox)>
      </div>
      <WithStyles(ActionsGeneric)
        category="semantic"
        classes={
          Object {
            "root": "HvBulkActions-actions",
          }
        }
        disabled={false}
      >
        <ActionsGeneric
          category="semantic"
          classes={
            Object {
              "actionContainer": "HvActionsGeneric-actionContainer",
              "button": "HvActionsGeneric-button",
              "dropDownMenu": "HvActionsGeneric-dropDownMenu",
              "dropDownMenuButton": "HvActionsGeneric-dropDownMenuButton",
              "dropDownMenuButtonSelected": "HvActionsGeneric-dropDownMenuButtonSelected",
              "root": "HvActionsGeneric-root HvBulkActions-actions",
            }
          }
          disabled={false}
        >
          <div
            className="HvActionsGeneric-root HvBulkActions-actions"
          />
        </ActionsGeneric>
      </WithStyles(ActionsGeneric)>
    </div>
  </HvBulkActions>
</WithStyles(HvBulkActions)>
`;

exports[`[v3] BulkActions with selection should render correctly 1`] = `
<WithStyles(HvBulkActions)
  labels={
    Object {
      "selectAll": "All mock",
      "selectAllPages": "All Pages mock",
    }
  }
  numSelected={3}
  numTotal={5}
  onSelectAll={[MockFunction]}
  onSelectAllPages={[MockFunction]}
>
  <HvBulkActions
    classes={
      Object {
        "actions": "HvBulkActions-actions",
        "editMode": "HvBulkActions-editMode",
        "root": "HvBulkActions-root",
        "selectAll": "HvBulkActions-selectAll",
        "selectAllContainer": "HvBulkActions-selectAllContainer",
        "selectAllPages": "HvBulkActions-selectAllPages",
      }
    }
    labels={
      Object {
        "selectAll": "All mock",
        "selectAllPages": "All Pages mock",
      }
    }
    numSelected={3}
    numTotal={5}
    onSelectAll={[MockFunction]}
    onSelectAllPages={[MockFunction]}
  >
    <div
      className="HvBulkActions-root HvBulkActions-editMode"
      labels={
        Object {
          "selectAll": "All mock",
          "selectAllPages": "All Pages mock",
        }
      }
    >
      <div
        className="HvBulkActions-selectAllContainer"
      >
        <WithStyles(HvCheckbox)
          checked={true}
          className="HvBulkActions-selectAll"
          indeterminate={true}
          label={
            <ForwardRef(WithStyles)
              component="span"
            >
              <React.Fragment>
                <b>
                  3
                </b>
                 / 5
              </React.Fragment>
            </ForwardRef(WithStyles)>
          }
          onChange={[Function]}
          semantic={true}
        >
          <HvCheckbox
            checked={true}
            className="HvBulkActions-selectAll"
            classes={
              Object {
                "checkBox": "HvCheckBox-checkBox",
                "container": "HvCheckBox-container",
                "disableFocus": "HvCheckBox-disableFocus",
                "disabledBorder": "HvCheckBox-disabledBorder",
                "icon": "HvCheckBox-icon",
                "labelDisabled": "HvCheckBox-labelDisabled",
                "labelEnd": "HvCheckBox-labelEnd",
                "labelStart": "HvCheckBox-labelStart",
                "labelTypography": "HvCheckBox-labelTypography",
              }
            }
            indeterminate={true}
            label={
              <ForwardRef(WithStyles)
                component="span"
              >
                <React.Fragment>
                  <b>
                    3
                  </b>
                   / 5
                </React.Fragment>
              </ForwardRef(WithStyles)>
            }
            onChange={[Function]}
            semantic={true}
          >
            <WithStyles(ForwardRef(FormControlLabel))
              className="HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
              classes={
                Object {
                  "disabled": "HvCheckBox-labelDisabled",
                  "label": "HvCheckBox-labelTypography",
                }
              }
              control={
                <ForwardRef(WithStyles)
                  checked={true}
                  checkedIcon={
                    <CheckboxCheck
                      className="HvCheckBox-icon"
                      color={
                        Array [
                          "base2",
                          "base1",
                        ]
                      }
                    />
                  }
                  className="HvCheckBox-checkBox"
                  color="default"
                  disableRipple={true}
                  disabled={false}
                  icon={
                    <Checkbox
                      className="HvCheckBox-icon"
                      color={
                        Array [
                          "base1",
                          "base2",
                        ]
                      }
                    />
                  }
                  indeterminate={true}
                  indeterminateIcon={
                    <CheckboxPartial
                      className="HvCheckBox-icon"
                      color={
                        Array [
                          "base1",
                          "base2",
                        ]
                      }
                    />
                  }
                  onBlur={[Function]}
                  onChange={[Function]}
                  value=""
                />
              }
              disabled={false}
              label={
                <ForwardRef(WithStyles)
                  component="span"
                >
                  <React.Fragment>
                    <b>
                      3
                    </b>
                     / 5
                  </React.Fragment>
                </ForwardRef(WithStyles)>
              }
              labelPlacement="end"
            >
              <ForwardRef(FormControlLabel)
                className="HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                classes={
                  Object {
                    "disabled": "Mui-disabled HvCheckBox-labelDisabled",
                    "label": "MuiFormControlLabel-label HvCheckBox-labelTypography",
                    "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                    "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                    "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                    "root": "MuiFormControlLabel-root",
                  }
                }
                control={
                  <ForwardRef(WithStyles)
                    checked={true}
                    checkedIcon={
                      <CheckboxCheck
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base2",
                            "base1",
                          ]
                        }
                      />
                    }
                    className="HvCheckBox-checkBox"
                    color="default"
                    disableRipple={true}
                    disabled={false}
                    icon={
                      <Checkbox
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base1",
                            "base2",
                          ]
                        }
                      />
                    }
                    indeterminate={true}
                    indeterminateIcon={
                      <CheckboxPartial
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base1",
                            "base2",
                          ]
                        }
                      />
                    }
                    onBlur={[Function]}
                    onChange={[Function]}
                    value=""
                  />
                }
                disabled={false}
                label={
                  <ForwardRef(WithStyles)
                    component="span"
                  >
                    <React.Fragment>
                      <b>
                        3
                      </b>
                       / 5
                    </React.Fragment>
                  </ForwardRef(WithStyles)>
                }
                labelPlacement="end"
              >
                <label
                  className="MuiFormControlLabel-root HvCheckBox-container HvCheckBox-labelEnd HvBulkActions-selectAll"
                >
                  <WithStyles(ForwardRef(Checkbox))
                    checked={true}
                    checkedIcon={
                      <CheckboxCheck
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base2",
                            "base1",
                          ]
                        }
                      />
                    }
                    className="HvCheckBox-checkBox"
                    color="default"
                    disableRipple={true}
                    disabled={false}
                    icon={
                      <Checkbox
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base1",
                            "base2",
                          ]
                        }
                      />
                    }
                    indeterminate={true}
                    indeterminateIcon={
                      <CheckboxPartial
                        className="HvCheckBox-icon"
                        color={
                          Array [
                            "base1",
                            "base2",
                          ]
                        }
                      />
                    }
                    onBlur={[Function]}
                    onChange={[Function]}
                    value=""
                  >
                    <ForwardRef(Checkbox)
                      checked={true}
                      checkedIcon={
                        <CheckboxCheck
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base2",
                              "base1",
                            ]
                          }
                        />
                      }
                      className="HvCheckBox-checkBox"
                      classes={
                        Object {
                          "checked": "Mui-checked",
                          "colorPrimary": "MuiCheckbox-colorPrimary",
                          "colorSecondary": "MuiCheckbox-colorSecondary",
                          "disabled": "Mui-disabled",
                          "indeterminate": "MuiCheckbox-indeterminate",
                          "root": "MuiCheckbox-root",
                        }
                      }
                      color="default"
                      disableRipple={true}
                      disabled={false}
                      icon={
                        <Checkbox
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base1",
                              "base2",
                            ]
                          }
                        />
                      }
                      indeterminate={true}
                      indeterminateIcon={
                        <CheckboxPartial
                          className="HvCheckBox-icon"
                          color={
                            Array [
                              "base1",
                              "base2",
                            ]
                          }
                        />
                      }
                      onBlur={[Function]}
                      onChange={[Function]}
                      value=""
                    >
                      <WithStyles(ForwardRef(SwitchBase))
                        checked={true}
                        checkedIcon={
                          <CheckboxPartial
                            className="HvCheckBox-icon"
                            color={
                              Array [
                                "base1",
                                "base2",
                              ]
                            }
                            fontSize="default"
                          />
                        }
                        className="HvCheckBox-checkBox"
                        classes={
                          Object {
                            "checked": "Mui-checked",
                            "disabled": "Mui-disabled",
                            "root": "MuiCheckbox-root MuiCheckbox-indeterminate",
                          }
                        }
                        color="default"
                        disableRipple={true}
                        disabled={false}
                        icon={
                          <CheckboxPartial
                            className="HvCheckBox-icon"
                            color={
                              Array [
                                "base1",
                                "base2",
                              ]
                            }
                            fontSize="default"
                          />
                        }
                        inputProps={
                          Object {
                            "data-indeterminate": true,
                          }
                        }
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="checkbox"
                        value=""
                      >
                        <ForwardRef(SwitchBase)
                          checked={true}
                          checkedIcon={
                            <CheckboxPartial
                              className="HvCheckBox-icon"
                              color={
                                Array [
                                  "base1",
                                  "base2",
                                ]
                              }
                              fontSize="default"
                            />
                          }
                          className="HvCheckBox-checkBox"
                          classes={
                            Object {
                              "checked": "PrivateSwitchBase-checked-11 Mui-checked",
                              "disabled": "PrivateSwitchBase-disabled-12 Mui-disabled",
                              "input": "PrivateSwitchBase-input-13",
                              "root": "PrivateSwitchBase-root-10 MuiCheckbox-root MuiCheckbox-indeterminate",
                            }
                          }
                          color="default"
                          disableRipple={true}
                          disabled={false}
                          icon={
                            <CheckboxPartial
                              className="HvCheckBox-icon"
                              color={
                                Array [
                                  "base1",
                                  "base2",
                                ]
                              }
                              fontSize="default"
                            />
                          }
                          inputProps={
                            Object {
                              "data-indeterminate": true,
                            }
                          }
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="checkbox"
                          value=""
                        >
                          <WithStyles(ForwardRef(IconButton))
                            className="PrivateSwitchBase-root-10 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-11 Mui-checked"
                            color="default"
                            component="span"
                            disableRipple={true}
                            disabled={false}
                            onBlur={[Function]}
                            onFocus={[Function]}
                            tabIndex={null}
                          >
                            <ForwardRef(IconButton)
                              className="PrivateSwitchBase-root-10 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-11 Mui-checked"
                              classes={
                                Object {
                                  "colorInherit": "MuiIconButton-colorInherit",
                                  "colorPrimary": "MuiIconButton-colorPrimary",
                                  "colorSecondary": "MuiIconButton-colorSecondary",
                                  "disabled": "Mui-disabled",
                                  "edgeEnd": "MuiIconButton-edgeEnd",
                                  "edgeStart": "MuiIconButton-edgeStart",
                                  "label": "MuiIconButton-label",
                                  "root": "MuiIconButton-root",
                                  "sizeSmall": "MuiIconButton-sizeSmall",
                                }
                              }
                              color="default"
                              component="span"
                              disableRipple={true}
                              disabled={false}
                              onBlur={[Function]}
                              onFocus={[Function]}
                              tabIndex={null}
                            >
                              <WithStyles(ForwardRef(ButtonBase))
                                centerRipple={true}
                                className="MuiIconButton-root PrivateSwitchBase-root-10 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-11 Mui-checked"
                                component="span"
                                disableRipple={true}
                                disabled={false}
                                focusRipple={true}
                                onBlur={[Function]}
                                onFocus={[Function]}
                                tabIndex={null}
                              >
                                <ForwardRef(ButtonBase)
                                  centerRipple={true}
                                  className="MuiIconButton-root PrivateSwitchBase-root-10 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-11 Mui-checked"
                                  classes={
                                    Object {
                                      "disabled": "Mui-disabled",
                                      "focusVisible": "Mui-focusVisible",
                                      "root": "MuiButtonBase-root",
                                    }
                                  }
                                  component="span"
                                  disableRipple={true}
                                  disabled={false}
                                  focusRipple={true}
                                  onBlur={[Function]}
                                  onFocus={[Function]}
                                  tabIndex={null}
                                >
                                  <span
                                    aria-disabled={false}
                                    className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-10 MuiCheckbox-root MuiCheckbox-indeterminate HvCheckBox-checkBox PrivateSwitchBase-checked-11 Mui-checked"
                                    onBlur={[Function]}
                                    onDragLeave={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchMove={[Function]}
                                    onTouchStart={[Function]}
                                    tabIndex={null}
                                  >
                                    <span
                                      className="MuiIconButton-label"
                                    >
                                      <input
                                        checked={true}
                                        className="PrivateSwitchBase-input-13"
                                        data-indeterminate={true}
                                        disabled={false}
                                        onChange={[Function]}
                                        type="checkbox"
                                        value=""
                                      />
                                      <CheckboxPartial
                                        className="HvCheckBox-icon"
                                        color={
                                          Array [
                                            "base1",
                                            "base2",
                                          ]
                                        }
                                        fontSize="default"
                                      >
                                        <WithStyles(HvIconBase)
                                          className="HvCheckBox-icon"
                                          fontSize="default"
                                          iconSize="S"
                                          name="CheckboxPartial"
                                        >
                                          <HvIconBase
                                            className="HvCheckBox-icon"
                                            classes={
                                              Object {
                                                "l": "HvIconBase-l",
                                                "m": "HvIconBase-m",
                                                "root": "HvIconBase-root",
                                                "s": "HvIconBase-s",
                                                "xs": "HvIconBase-xs",
                                              }
                                            }
                                            fontSize="default"
                                            iconSize="S"
                                            name="CheckboxPartial"
                                          >
                                            <div
                                              className="HvCheckBox-icon HvIconBase-root HvIconBase-s"
                                              fontSize="default"
                                              name="CheckboxPartial"
                                            >
                                              <svg
                                                focusable={false}
                                                height={16}
                                                viewBox="0 0 16 16"
                                                width={16}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <path
                                                  className="color0"
                                                  d="M0 0h16v16H0z"
                                                  fill="#FBFCFC"
                                                />
                                                <path
                                                  className="color1"
                                                  d="M16 16H0V0h16zM1 15h14V1H1zm3-6h8V7H4z"
                                                  fill="#414141"
                                                />
                                              </svg>
                                            </div>
                                          </HvIconBase>
                                        </WithStyles(HvIconBase)>
                                      </CheckboxPartial>
                                    </span>
                                  </span>
                                </ForwardRef(ButtonBase)>
                              </WithStyles(ForwardRef(ButtonBase))>
                            </ForwardRef(IconButton)>
                          </WithStyles(ForwardRef(IconButton))>
                        </ForwardRef(SwitchBase)>
                      </WithStyles(ForwardRef(SwitchBase))>
                    </ForwardRef(Checkbox)>
                  </WithStyles(ForwardRef(Checkbox))>
                  <WithStyles(ForwardRef(Typography))
                    className="MuiFormControlLabel-label HvCheckBox-labelTypography"
                    component="span"
                  >
                    <ForwardRef(Typography)
                      className="MuiFormControlLabel-label HvCheckBox-labelTypography"
                      classes={
                        Object {
                          "alignCenter": "MuiTypography-alignCenter",
                          "alignJustify": "MuiTypography-alignJustify",
                          "alignLeft": "MuiTypography-alignLeft",
                          "alignRight": "MuiTypography-alignRight",
                          "body1": "MuiTypography-body1",
                          "body2": "MuiTypography-body2",
                          "button": "MuiTypography-button",
                          "caption": "MuiTypography-caption",
                          "colorError": "MuiTypography-colorError",
                          "colorInherit": "MuiTypography-colorInherit",
                          "colorPrimary": "MuiTypography-colorPrimary",
                          "colorSecondary": "MuiTypography-colorSecondary",
                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                          "displayBlock": "MuiTypography-displayBlock",
                          "displayInline": "MuiTypography-displayInline",
                          "gutterBottom": "MuiTypography-gutterBottom",
                          "h1": "MuiTypography-h1",
                          "h2": "MuiTypography-h2",
                          "h3": "MuiTypography-h3",
                          "h4": "MuiTypography-h4",
                          "h5": "MuiTypography-h5",
                          "h6": "MuiTypography-h6",
                          "noWrap": "MuiTypography-noWrap",
                          "overline": "MuiTypography-overline",
                          "paragraph": "MuiTypography-paragraph",
                          "root": "MuiTypography-root",
                          "srOnly": "MuiTypography-srOnly",
                          "subtitle1": "MuiTypography-subtitle1",
                          "subtitle2": "MuiTypography-subtitle2",
                        }
                      }
                      component="span"
                    >
                      <span
                        className="MuiTypography-root MuiFormControlLabel-label HvCheckBox-labelTypography MuiTypography-body1"
                      >
                        <WithStyles(ForwardRef)
                          component="span"
                        >
                          <ForwardRef
                            classes={
                              Object {
                                "3xlTitle": "HvTypography-3xlTitle",
                                "4xlTitle": "HvTypography-4xlTitle",
                                "5xlTitle": "HvTypography-5xlTitle",
                                "disabledText": "HvTypography-disabledText",
                                "highlightText": "HvTypography-highlightText",
                                "lTitle": "HvTypography-lTitle",
                                "link": "HvTypography-link",
                                "mTitle": "HvTypography-mTitle",
                                "noWrap": "HvTypography-noWrap",
                                "normalText": "HvTypography-normalText",
                                "placeholderText": "HvTypography-placeholderText",
                                "root": "HvTypography-root",
                                "sTitle": "HvTypography-sTitle",
                                "sectionTitle": "HvTypography-sectionTitle",
                                "selectedNavText": "HvTypography-selectedNavText",
                                "vizText": "HvTypography-vizText",
                                "vizTextDisabled": "HvTypography-vizTextDisabled",
                                "xlTitle": "HvTypography-xlTitle",
                                "xsInlineLink": "HvTypography-xsInlineLink",
                                "xsTitle": "HvTypography-xsTitle",
                                "xxlTitle": "HvTypography-xxlTitle",
                                "xxsTitle": "HvTypography-xxsTitle",
                              }
                            }
                            component="span"
                          >
                            <span
                              className="HvTypography-root HvTypography-normalText"
                            >
                              <b>
                                3
                              </b>
                               / 5
                            </span>
                          </ForwardRef>
                        </WithStyles(ForwardRef)>
                      </span>
                    </ForwardRef(Typography)>
                  </WithStyles(ForwardRef(Typography))>
                </label>
              </ForwardRef(FormControlLabel)>
            </WithStyles(ForwardRef(FormControlLabel))>
          </HvCheckbox>
        </WithStyles(HvCheckbox)>
      </div>
      <WithStyles(ActionsGeneric)
        category="semantic"
        classes={
          Object {
            "root": "HvBulkActions-actions",
          }
        }
        disabled={false}
      >
        <ActionsGeneric
          category="semantic"
          classes={
            Object {
              "actionContainer": "HvActionsGeneric-actionContainer",
              "button": "HvActionsGeneric-button",
              "dropDownMenu": "HvActionsGeneric-dropDownMenu",
              "dropDownMenuButton": "HvActionsGeneric-dropDownMenuButton",
              "dropDownMenuButtonSelected": "HvActionsGeneric-dropDownMenuButtonSelected",
              "root": "HvActionsGeneric-root HvBulkActions-actions",
            }
          }
          disabled={false}
        >
          <div
            className="HvActionsGeneric-root HvBulkActions-actions"
          />
        </ActionsGeneric>
      </WithStyles(ActionsGeneric)>
    </div>
  </HvBulkActions>
</WithStyles(HvBulkActions)>
`;
