// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input should not have the validation section 1`] = `
<WithStyles(WithLabels)
  showInfo={false}
>
  <WithLabels
    classes={
      Object {
        "adornmentButton": "HvInput-adornmentButton",
        "adornmentsBox": "HvInput-adornmentsBox",
        "icon": "HvInput-icon",
        "iconClear": "HvInput-iconClear",
        "infoIconContainer": "HvInput-infoIconContainer",
        "infoText": "HvInput-infoText",
        "input": "HvInput-input",
        "inputDisabled": "HvInput-inputDisabled",
        "inputRoot": "HvInput-inputRoot",
        "inputRootDisabled": "HvInput-inputRootDisabled",
        "inputRootFocused": "HvInput-inputRootFocused",
        "inputRootInvalid": "HvInput-inputRootInvalid",
        "label": "HvInput-label",
        "labelContainer": "HvInput-labelContainer",
        "labelDisabled": "HvInput-labelDisabled",
        "multiLine": "HvInput-multiLine",
        "root": "HvInput-root",
        "showText": "HvInput-showText",
        "suggestionList": "HvInput-suggestionList",
        "suggestionsContainer": "HvInput-suggestionsContainer",
        "textWarning": "HvInput-textWarning",
      }
    }
    showInfo={false}
  >
    <WithId
      classes={
        Object {
          "adornmentButton": "HvInput-adornmentButton",
          "adornmentsBox": "HvInput-adornmentsBox",
          "icon": "HvInput-icon",
          "iconClear": "HvInput-iconClear",
          "infoIconContainer": "HvInput-infoIconContainer",
          "infoText": "HvInput-infoText",
          "input": "HvInput-input",
          "inputDisabled": "HvInput-inputDisabled",
          "inputRoot": "HvInput-inputRoot",
          "inputRootDisabled": "HvInput-inputRootDisabled",
          "inputRootFocused": "HvInput-inputRootFocused",
          "inputRootInvalid": "HvInput-inputRootInvalid",
          "label": "HvInput-label",
          "labelContainer": "HvInput-labelContainer",
          "labelDisabled": "HvInput-labelDisabled",
          "multiLine": "HvInput-multiLine",
          "root": "HvInput-root",
          "showText": "HvInput-showText",
          "suggestionList": "HvInput-suggestionList",
          "suggestionsContainer": "HvInput-suggestionsContainer",
          "textWarning": "HvInput-textWarning",
        }
      }
      labels={
        Object {
          "clearButtonLabel": "Clear the text",
          "infoText": "",
          "inputLabel": "",
          "maxCharQuantityWarningText": "The value is too big",
          "minCharQuantityWarningText": "The value is too short",
          "placeholder": "",
          "requiredWarningText": "The value is required",
          "warningText": "something wrong",
        }
      }
      showInfo={false}
    >
      <HvInput
        autoFocus={false}
        className=""
        classes={
          Object {
            "adornmentButton": "HvInput-adornmentButton",
            "adornmentsBox": "HvInput-adornmentsBox",
            "icon": "HvInput-icon",
            "iconClear": "HvInput-iconClear",
            "infoIconContainer": "HvInput-infoIconContainer",
            "infoText": "HvInput-infoText",
            "input": "HvInput-input",
            "inputDisabled": "HvInput-inputDisabled",
            "inputRoot": "HvInput-inputRoot",
            "inputRootDisabled": "HvInput-inputRootDisabled",
            "inputRootFocused": "HvInput-inputRootFocused",
            "inputRootInvalid": "HvInput-inputRootInvalid",
            "label": "HvInput-label",
            "labelContainer": "HvInput-labelContainer",
            "labelDisabled": "HvInput-labelDisabled",
            "multiLine": "HvInput-multiLine",
            "root": "HvInput-root",
            "showText": "HvInput-showText",
            "suggestionList": "HvInput-suggestionList",
            "suggestionsContainer": "HvInput-suggestionsContainer",
            "textWarning": "HvInput-textWarning",
          }
        }
        customFixedIcon={null}
        disableClear={false}
        disabled={false}
        externalWarningTextOverride={null}
        id="hv-input-7"
        infoIcon={false}
        inputProps={Object {}}
        inputRef={null}
        isRequired={false}
        labels={
          Object {
            "clearButtonLabel": "Clear the text",
            "infoText": "",
            "inputLabel": "",
            "maxCharQuantityWarningText": "The value is too big",
            "minCharQuantityWarningText": "The value is too short",
            "placeholder": "",
            "requiredWarningText": "The value is required",
            "warningText": "something wrong",
          }
        }
        maxCharQuantity={null}
        minCharQuantity={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        password={false}
        showInfo={false}
        suggestionListCallback={[Function]}
        suggestionSelectedCallback={[Function]}
        validation={null}
        validationIconPosition="right"
        validationIconVisible={true}
        validationState="empty"
        validationType="none"
      >
        <div
          className="HvInput-root"
          id="hv-input-7"
          onBlur={[Function]}
        >
          <div
            className="HvInput-labelContainer"
          />
          <WithStyles(WithLabels)
            id="hv-input-7-input"
          >
            <WithLabels
              classes={
                Object {
                  "adornmentButton": "HvBaseInput-adornmentButton",
                  "adornmentsBox": "HvBaseInput-adornmentsBox",
                  "icon": "HvBaseInput-icon",
                  "iconClear": "HvBaseInput-iconClear",
                  "infoIconContainer": "HvBaseInput-infoIconContainer",
                  "infoText": "HvBaseInput-infoText",
                  "input": "HvBaseInput-input",
                  "inputDisabled": "HvBaseInput-inputDisabled",
                  "inputRoot": "HvBaseInput-inputRoot",
                  "inputRootDisabled": "HvBaseInput-inputRootDisabled",
                  "inputRootFocused": "HvBaseInput-inputRootFocused",
                  "inputRootInvalid": "HvBaseInput-inputRootInvalid",
                  "label": "HvBaseInput-label",
                  "labelContainer": "HvBaseInput-labelContainer",
                  "labelDisabled": "HvBaseInput-labelDisabled",
                  "multiLine": "HvBaseInput-multiLine",
                  "root": "HvBaseInput-root",
                  "showText": "HvBaseInput-showText",
                  "suggestionList": "HvBaseInput-suggestionList",
                  "suggestionsContainer": "HvBaseInput-suggestionsContainer",
                  "textWarning": "HvBaseInput-textWarning",
                }
              }
              id="hv-input-7-input"
            >
              <WithId
                classes={
                  Object {
                    "adornmentButton": "HvBaseInput-adornmentButton",
                    "adornmentsBox": "HvBaseInput-adornmentsBox",
                    "icon": "HvBaseInput-icon",
                    "iconClear": "HvBaseInput-iconClear",
                    "infoIconContainer": "HvBaseInput-infoIconContainer",
                    "infoText": "HvBaseInput-infoText",
                    "input": "HvBaseInput-input",
                    "inputDisabled": "HvBaseInput-inputDisabled",
                    "inputRoot": "HvBaseInput-inputRoot",
                    "inputRootDisabled": "HvBaseInput-inputRootDisabled",
                    "inputRootFocused": "HvBaseInput-inputRootFocused",
                    "inputRootInvalid": "HvBaseInput-inputRootInvalid",
                    "label": "HvBaseInput-label",
                    "labelContainer": "HvBaseInput-labelContainer",
                    "labelDisabled": "HvBaseInput-labelDisabled",
                    "multiLine": "HvBaseInput-multiLine",
                    "root": "HvBaseInput-root",
                    "showText": "HvBaseInput-showText",
                    "suggestionList": "HvBaseInput-suggestionList",
                    "suggestionsContainer": "HvBaseInput-suggestionsContainer",
                    "textWarning": "HvBaseInput-textWarning",
                  }
                }
                id="hv-input-7-input"
                labels={
                  Object {
                    "clearButtonLabel": "Clear the text",
                    "infoText": "",
                    "inputLabel": "",
                    "maxCharQuantityWarningText": "The value is too big",
                    "minCharQuantityWarningText": "The value is too short",
                    "placeholder": "",
                    "requiredWarningText": "The value is required",
                    "warningText": "something wrong",
                  }
                }
              >
                <HvBaseInput
                  autoFocus={false}
                  className=""
                  classes={
                    Object {
                      "adornmentButton": "HvBaseInput-adornmentButton",
                      "adornmentsBox": "HvBaseInput-adornmentsBox",
                      "icon": "HvBaseInput-icon",
                      "iconClear": "HvBaseInput-iconClear",
                      "infoIconContainer": "HvBaseInput-infoIconContainer",
                      "infoText": "HvBaseInput-infoText",
                      "input": "HvBaseInput-input",
                      "inputDisabled": "HvBaseInput-inputDisabled",
                      "inputRoot": "HvBaseInput-inputRoot",
                      "inputRootDisabled": "HvBaseInput-inputRootDisabled",
                      "inputRootFocused": "HvBaseInput-inputRootFocused",
                      "inputRootInvalid": "HvBaseInput-inputRootInvalid",
                      "label": "HvBaseInput-label",
                      "labelContainer": "HvBaseInput-labelContainer",
                      "labelDisabled": "HvBaseInput-labelDisabled",
                      "multiLine": "HvBaseInput-multiLine",
                      "root": "HvBaseInput-root",
                      "showText": "HvBaseInput-showText",
                      "suggestionList": "HvBaseInput-suggestionList",
                      "suggestionsContainer": "HvBaseInput-suggestionsContainer",
                      "textWarning": "HvBaseInput-textWarning",
                    }
                  }
                  customFixedIcon={null}
                  disableClear={false}
                  disabled={false}
                  externalWarningTextOverride={null}
                  id="hv-input-7-input"
                  infoIcon={false}
                  inputProps={Object {}}
                  inputRef={null}
                  isRequired={false}
                  labels={
                    Object {
                      "clearButtonLabel": "Clear the text",
                      "infoText": "",
                      "inputLabel": "",
                      "maxCharQuantityWarningText": "The value is too big",
                      "minCharQuantityWarningText": "The value is too short",
                      "placeholder": "",
                      "requiredWarningText": "The value is required",
                      "warningText": "something wrong",
                    }
                  }
                  maxCharQuantity={null}
                  minCharQuantity={null}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  password={false}
                  showInfo={true}
                  suggestionListCallback={[Function]}
                  suggestionSelectedCallback={[Function]}
                  validation={null}
                  validationIconPosition="right"
                  validationIconVisible={true}
                  validationType="none"
                >
                  <WithStyles(ForwardRef(Input))
                    className="HvBaseInput-inputRoot"
                    classes={
                      Object {
                        "disabled": "HvBaseInput-inputDisabled",
                        "focused": "HvBaseInput-inputRootFocused",
                        "input": "HvBaseInput-input",
                        "multiline": "HvBaseInput-multiLine",
                      }
                    }
                    id="hv-input-7-input-input"
                  >
                    <ForwardRef(Input)
                      className="HvBaseInput-inputRoot"
                      classes={
                        Object {
                          "colorSecondary": "MuiInput-colorSecondary",
                          "disabled": "Mui-disabled HvBaseInput-inputDisabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused HvBaseInput-inputRootFocused",
                          "formControl": "MuiInput-formControl",
                          "fullWidth": "MuiInput-fullWidth",
                          "input": "MuiInput-input HvBaseInput-input",
                          "inputMarginDense": "MuiInput-inputMarginDense",
                          "inputMultiline": "MuiInput-inputMultiline",
                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                          "marginDense": "MuiInput-marginDense",
                          "multiline": "MuiInput-multiline HvBaseInput-multiLine",
                          "root": "MuiInput-root",
                          "underline": "MuiInput-underline",
                        }
                      }
                      disableUnderline={true}
                      id="hv-input-7-input-input"
                    >
                      <WithStyles(ForwardRef(InputBase))
                        className="HvBaseInput-inputRoot"
                        classes={
                          Object {
                            "colorSecondary": "MuiInput-colorSecondary",
                            "disabled": "Mui-disabled HvBaseInput-inputDisabled",
                            "error": "Mui-error",
                            "focused": "Mui-focused HvBaseInput-inputRootFocused",
                            "formControl": "MuiInput-formControl",
                            "fullWidth": "MuiInput-fullWidth",
                            "input": "MuiInput-input HvBaseInput-input",
                            "inputMarginDense": "MuiInput-inputMarginDense",
                            "inputMultiline": "MuiInput-inputMultiline",
                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                            "marginDense": "MuiInput-marginDense",
                            "multiline": "MuiInput-multiline HvBaseInput-multiLine",
                            "root": "MuiInput-root",
                            "underline": null,
                          }
                        }
                        fullWidth={false}
                        id="hv-input-7-input-input"
                        inputComponent="input"
                        multiline={false}
                        type="text"
                      >
                        <ForwardRef(InputBase)
                          className="HvBaseInput-inputRoot"
                          classes={
                            Object {
                              "adornedEnd": "MuiInputBase-adornedEnd",
                              "adornedStart": "MuiInputBase-adornedStart",
                              "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                              "disabled": "Mui-disabled Mui-disabled HvBaseInput-inputDisabled",
                              "error": "Mui-error Mui-error",
                              "focused": "Mui-focused Mui-focused HvBaseInput-inputRootFocused",
                              "formControl": "MuiInputBase-formControl MuiInput-formControl",
                              "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                              "input": "MuiInputBase-input MuiInput-input HvBaseInput-input",
                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                              "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                              "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                              "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                              "multiline": "MuiInputBase-multiline MuiInput-multiline HvBaseInput-multiLine",
                              "root": "MuiInputBase-root MuiInput-root",
                            }
                          }
                          fullWidth={false}
                          id="hv-input-7-input-input"
                          inputComponent="input"
                          multiline={false}
                          type="text"
                        >
                          <div
                            className="MuiInputBase-root MuiInput-root HvBaseInput-inputRoot"
                            onClick={[Function]}
                          >
                            <input
                              className="MuiInputBase-input MuiInput-input HvBaseInput-input"
                              id="hv-input-7-input-input"
                              onAnimationStart={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              type="text"
                            />
                          </div>
                        </ForwardRef(InputBase)>
                      </WithStyles(ForwardRef(InputBase))>
                    </ForwardRef(Input)>
                  </WithStyles(ForwardRef(Input))>
                </HvBaseInput>
              </WithId>
            </WithLabels>
          </WithStyles(WithLabels)>
          <WithStyles(WithId)
            externalWarningTextOverride={null}
            hasIcon={false}
            id="hv-input-7-description"
            labels={
              Object {
                "clearButtonLabel": "Clear the text",
                "infoText": "",
                "inputLabel": "",
                "maxCharQuantityWarningText": "The value is too big",
                "minCharQuantityWarningText": "The value is too short",
                "placeholder": "",
                "requiredWarningText": "The value is required",
                "warningText": "something wrong",
              }
            }
            stateValidation="empty"
            variant="helper"
          >
            <WithId
              classes={
                Object {
                  "adornmentButton": "HvHelperText-adornmentButton",
                  "adornmentsBox": "HvHelperText-adornmentsBox",
                  "icon": "HvHelperText-icon",
                  "iconClear": "HvHelperText-iconClear",
                  "infoIconContainer": "HvHelperText-infoIconContainer",
                  "infoText": "HvHelperText-infoText",
                  "input": "HvHelperText-input",
                  "inputDisabled": "HvHelperText-inputDisabled",
                  "inputRoot": "HvHelperText-inputRoot",
                  "inputRootDisabled": "HvHelperText-inputRootDisabled",
                  "inputRootFocused": "HvHelperText-inputRootFocused",
                  "inputRootInvalid": "HvHelperText-inputRootInvalid",
                  "label": "HvHelperText-label",
                  "labelContainer": "HvHelperText-labelContainer",
                  "labelDisabled": "HvHelperText-labelDisabled",
                  "multiLine": "HvHelperText-multiLine",
                  "root": "HvHelperText-root",
                  "showText": "HvHelperText-showText",
                  "suggestionList": "HvHelperText-suggestionList",
                  "suggestionsContainer": "HvHelperText-suggestionsContainer",
                  "textWarning": "HvHelperText-textWarning",
                }
              }
              externalWarningTextOverride={null}
              hasIcon={false}
              id="hv-input-7-description"
              labels={
                Object {
                  "clearButtonLabel": "Clear the text",
                  "infoText": "",
                  "inputLabel": "",
                  "maxCharQuantityWarningText": "The value is too big",
                  "minCharQuantityWarningText": "The value is too short",
                  "placeholder": "",
                  "requiredWarningText": "The value is required",
                  "warningText": "something wrong",
                }
              }
              stateValidation="empty"
              variant="helper"
            >
              <HvHelperText
                classes={
                  Object {
                    "adornmentButton": "HvHelperText-adornmentButton",
                    "adornmentsBox": "HvHelperText-adornmentsBox",
                    "icon": "HvHelperText-icon",
                    "iconClear": "HvHelperText-iconClear",
                    "infoIconContainer": "HvHelperText-infoIconContainer",
                    "infoText": "HvHelperText-infoText",
                    "input": "HvHelperText-input",
                    "inputDisabled": "HvHelperText-inputDisabled",
                    "inputRoot": "HvHelperText-inputRoot",
                    "inputRootDisabled": "HvHelperText-inputRootDisabled",
                    "inputRootFocused": "HvHelperText-inputRootFocused",
                    "inputRootInvalid": "HvHelperText-inputRootInvalid",
                    "label": "HvHelperText-label",
                    "labelContainer": "HvHelperText-labelContainer",
                    "labelDisabled": "HvHelperText-labelDisabled",
                    "multiLine": "HvHelperText-multiLine",
                    "root": "HvHelperText-root",
                    "showText": "HvHelperText-showText",
                    "suggestionList": "HvHelperText-suggestionList",
                    "suggestionsContainer": "HvHelperText-suggestionsContainer",
                    "textWarning": "HvHelperText-textWarning",
                  }
                }
                externalWarningTextOverride={null}
                hasIcon={false}
                id="hv-input-7-description"
                labels={
                  Object {
                    "clearButtonLabel": "Clear the text",
                    "infoText": "",
                    "inputLabel": "",
                    "maxCharQuantityWarningText": "The value is too big",
                    "minCharQuantityWarningText": "The value is too short",
                    "placeholder": "",
                    "requiredWarningText": "The value is required",
                    "warningText": "something wrong",
                  }
                }
                stateValidation="empty"
                variant="helper"
              >
                <WithStyles(ForwardRef)
                  className="HvHelperText-infoText"
                  id="hv-input-7-description-description"
                  variant="infoText"
                >
                  <ForwardRef
                    className="HvHelperText-infoText"
                    classes={
                      Object {
                        "3xlTitle": "HvTypography-3xlTitle",
                        "4xlTitle": "HvTypography-4xlTitle",
                        "5xlTitle": "HvTypography-5xlTitle",
                        "disabledButtonText": "HvTypography-disabledButtonText",
                        "highlightText": "HvTypography-highlightText",
                        "infoText": "HvTypography-infoText",
                        "inlineLink": "HvTypography-inlineLink",
                        "lTitle": "HvTypography-lTitle",
                        "labelText": "HvTypography-labelText",
                        "mTitle": "HvTypography-mTitle",
                        "normalText": "HvTypography-normalText",
                        "placeholderText": "HvTypography-placeholderText",
                        "root": "HvTypography-root",
                        "sLink": "HvTypography-sLink",
                        "sText": "HvTypography-sText",
                        "sTitle": "HvTypography-sTitle",
                        "selectedNavText": "HvTypography-selectedNavText",
                        "selectedText": "HvTypography-selectedText",
                        "vizText": "HvTypography-vizText",
                        "xlTitle": "HvTypography-xlTitle",
                        "xsTitle": "HvTypography-xsTitle",
                        "xxlTitle": "HvTypography-xxlTitle",
                        "xxsTitle": "HvTypography-xxsTitle",
                      }
                    }
                    id="hv-input-7-description-description"
                    variant="infoText"
                  >
                    <p
                      className="HvHelperText-infoText HvTypography-root HvTypography-infoText"
                      id="hv-input-7-description-description"
                    />
                  </ForwardRef>
                </WithStyles(ForwardRef)>
              </HvHelperText>
            </WithId>
          </WithStyles(WithId)>
        </div>
      </HvInput>
    </WithId>
  </WithLabels>
</WithStyles(WithLabels)>
`;

exports[`Input should pass other props to the child input component 1`] = `
<WithStyles(WithLabels)
  inputProps={
    Object {
      "maxLength": 250,
    }
  }
>
  <WithLabels
    classes={
      Object {
        "adornmentButton": "HvInput-adornmentButton",
        "adornmentsBox": "HvInput-adornmentsBox",
        "icon": "HvInput-icon",
        "iconClear": "HvInput-iconClear",
        "infoIconContainer": "HvInput-infoIconContainer",
        "infoText": "HvInput-infoText",
        "input": "HvInput-input",
        "inputDisabled": "HvInput-inputDisabled",
        "inputRoot": "HvInput-inputRoot",
        "inputRootDisabled": "HvInput-inputRootDisabled",
        "inputRootFocused": "HvInput-inputRootFocused",
        "inputRootInvalid": "HvInput-inputRootInvalid",
        "label": "HvInput-label",
        "labelContainer": "HvInput-labelContainer",
        "labelDisabled": "HvInput-labelDisabled",
        "multiLine": "HvInput-multiLine",
        "root": "HvInput-root",
        "showText": "HvInput-showText",
        "suggestionList": "HvInput-suggestionList",
        "suggestionsContainer": "HvInput-suggestionsContainer",
        "textWarning": "HvInput-textWarning",
      }
    }
    inputProps={
      Object {
        "maxLength": 250,
      }
    }
  >
    <WithId
      classes={
        Object {
          "adornmentButton": "HvInput-adornmentButton",
          "adornmentsBox": "HvInput-adornmentsBox",
          "icon": "HvInput-icon",
          "iconClear": "HvInput-iconClear",
          "infoIconContainer": "HvInput-infoIconContainer",
          "infoText": "HvInput-infoText",
          "input": "HvInput-input",
          "inputDisabled": "HvInput-inputDisabled",
          "inputRoot": "HvInput-inputRoot",
          "inputRootDisabled": "HvInput-inputRootDisabled",
          "inputRootFocused": "HvInput-inputRootFocused",
          "inputRootInvalid": "HvInput-inputRootInvalid",
          "label": "HvInput-label",
          "labelContainer": "HvInput-labelContainer",
          "labelDisabled": "HvInput-labelDisabled",
          "multiLine": "HvInput-multiLine",
          "root": "HvInput-root",
          "showText": "HvInput-showText",
          "suggestionList": "HvInput-suggestionList",
          "suggestionsContainer": "HvInput-suggestionsContainer",
          "textWarning": "HvInput-textWarning",
        }
      }
      inputProps={
        Object {
          "maxLength": 250,
        }
      }
      labels={
        Object {
          "clearButtonLabel": "Clear the text",
          "infoText": "",
          "inputLabel": "",
          "maxCharQuantityWarningText": "The value is too big",
          "minCharQuantityWarningText": "The value is too short",
          "placeholder": "",
          "requiredWarningText": "The value is required",
          "warningText": "something wrong",
        }
      }
    >
      <HvInput
        autoFocus={false}
        className=""
        classes={
          Object {
            "adornmentButton": "HvInput-adornmentButton",
            "adornmentsBox": "HvInput-adornmentsBox",
            "icon": "HvInput-icon",
            "iconClear": "HvInput-iconClear",
            "infoIconContainer": "HvInput-infoIconContainer",
            "infoText": "HvInput-infoText",
            "input": "HvInput-input",
            "inputDisabled": "HvInput-inputDisabled",
            "inputRoot": "HvInput-inputRoot",
            "inputRootDisabled": "HvInput-inputRootDisabled",
            "inputRootFocused": "HvInput-inputRootFocused",
            "inputRootInvalid": "HvInput-inputRootInvalid",
            "label": "HvInput-label",
            "labelContainer": "HvInput-labelContainer",
            "labelDisabled": "HvInput-labelDisabled",
            "multiLine": "HvInput-multiLine",
            "root": "HvInput-root",
            "showText": "HvInput-showText",
            "suggestionList": "HvInput-suggestionList",
            "suggestionsContainer": "HvInput-suggestionsContainer",
            "textWarning": "HvInput-textWarning",
          }
        }
        customFixedIcon={null}
        disableClear={false}
        disabled={false}
        externalWarningTextOverride={null}
        id="hv-input-9"
        infoIcon={false}
        inputProps={
          Object {
            "maxLength": 250,
          }
        }
        inputRef={null}
        isRequired={false}
        labels={
          Object {
            "clearButtonLabel": "Clear the text",
            "infoText": "",
            "inputLabel": "",
            "maxCharQuantityWarningText": "The value is too big",
            "minCharQuantityWarningText": "The value is too short",
            "placeholder": "",
            "requiredWarningText": "The value is required",
            "warningText": "something wrong",
          }
        }
        maxCharQuantity={null}
        minCharQuantity={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        password={false}
        showInfo={true}
        suggestionListCallback={[Function]}
        suggestionSelectedCallback={[Function]}
        validation={null}
        validationIconPosition="right"
        validationIconVisible={true}
        validationState="empty"
        validationType="none"
      >
        <div
          className="HvInput-root"
          id="hv-input-9"
          onBlur={[Function]}
        >
          <div
            className="HvInput-labelContainer"
          />
          <WithStyles(WithLabels)
            id="hv-input-9-input"
          >
            <WithLabels
              classes={
                Object {
                  "adornmentButton": "HvBaseInput-adornmentButton",
                  "adornmentsBox": "HvBaseInput-adornmentsBox",
                  "icon": "HvBaseInput-icon",
                  "iconClear": "HvBaseInput-iconClear",
                  "infoIconContainer": "HvBaseInput-infoIconContainer",
                  "infoText": "HvBaseInput-infoText",
                  "input": "HvBaseInput-input",
                  "inputDisabled": "HvBaseInput-inputDisabled",
                  "inputRoot": "HvBaseInput-inputRoot",
                  "inputRootDisabled": "HvBaseInput-inputRootDisabled",
                  "inputRootFocused": "HvBaseInput-inputRootFocused",
                  "inputRootInvalid": "HvBaseInput-inputRootInvalid",
                  "label": "HvBaseInput-label",
                  "labelContainer": "HvBaseInput-labelContainer",
                  "labelDisabled": "HvBaseInput-labelDisabled",
                  "multiLine": "HvBaseInput-multiLine",
                  "root": "HvBaseInput-root",
                  "showText": "HvBaseInput-showText",
                  "suggestionList": "HvBaseInput-suggestionList",
                  "suggestionsContainer": "HvBaseInput-suggestionsContainer",
                  "textWarning": "HvBaseInput-textWarning",
                }
              }
              id="hv-input-9-input"
            >
              <WithId
                classes={
                  Object {
                    "adornmentButton": "HvBaseInput-adornmentButton",
                    "adornmentsBox": "HvBaseInput-adornmentsBox",
                    "icon": "HvBaseInput-icon",
                    "iconClear": "HvBaseInput-iconClear",
                    "infoIconContainer": "HvBaseInput-infoIconContainer",
                    "infoText": "HvBaseInput-infoText",
                    "input": "HvBaseInput-input",
                    "inputDisabled": "HvBaseInput-inputDisabled",
                    "inputRoot": "HvBaseInput-inputRoot",
                    "inputRootDisabled": "HvBaseInput-inputRootDisabled",
                    "inputRootFocused": "HvBaseInput-inputRootFocused",
                    "inputRootInvalid": "HvBaseInput-inputRootInvalid",
                    "label": "HvBaseInput-label",
                    "labelContainer": "HvBaseInput-labelContainer",
                    "labelDisabled": "HvBaseInput-labelDisabled",
                    "multiLine": "HvBaseInput-multiLine",
                    "root": "HvBaseInput-root",
                    "showText": "HvBaseInput-showText",
                    "suggestionList": "HvBaseInput-suggestionList",
                    "suggestionsContainer": "HvBaseInput-suggestionsContainer",
                    "textWarning": "HvBaseInput-textWarning",
                  }
                }
                id="hv-input-9-input"
                labels={
                  Object {
                    "clearButtonLabel": "Clear the text",
                    "infoText": "",
                    "inputLabel": "",
                    "maxCharQuantityWarningText": "The value is too big",
                    "minCharQuantityWarningText": "The value is too short",
                    "placeholder": "",
                    "requiredWarningText": "The value is required",
                    "warningText": "something wrong",
                  }
                }
              >
                <HvBaseInput
                  autoFocus={false}
                  className=""
                  classes={
                    Object {
                      "adornmentButton": "HvBaseInput-adornmentButton",
                      "adornmentsBox": "HvBaseInput-adornmentsBox",
                      "icon": "HvBaseInput-icon",
                      "iconClear": "HvBaseInput-iconClear",
                      "infoIconContainer": "HvBaseInput-infoIconContainer",
                      "infoText": "HvBaseInput-infoText",
                      "input": "HvBaseInput-input",
                      "inputDisabled": "HvBaseInput-inputDisabled",
                      "inputRoot": "HvBaseInput-inputRoot",
                      "inputRootDisabled": "HvBaseInput-inputRootDisabled",
                      "inputRootFocused": "HvBaseInput-inputRootFocused",
                      "inputRootInvalid": "HvBaseInput-inputRootInvalid",
                      "label": "HvBaseInput-label",
                      "labelContainer": "HvBaseInput-labelContainer",
                      "labelDisabled": "HvBaseInput-labelDisabled",
                      "multiLine": "HvBaseInput-multiLine",
                      "root": "HvBaseInput-root",
                      "showText": "HvBaseInput-showText",
                      "suggestionList": "HvBaseInput-suggestionList",
                      "suggestionsContainer": "HvBaseInput-suggestionsContainer",
                      "textWarning": "HvBaseInput-textWarning",
                    }
                  }
                  customFixedIcon={null}
                  disableClear={false}
                  disabled={false}
                  externalWarningTextOverride={null}
                  id="hv-input-9-input"
                  infoIcon={false}
                  inputProps={Object {}}
                  inputRef={null}
                  isRequired={false}
                  labels={
                    Object {
                      "clearButtonLabel": "Clear the text",
                      "infoText": "",
                      "inputLabel": "",
                      "maxCharQuantityWarningText": "The value is too big",
                      "minCharQuantityWarningText": "The value is too short",
                      "placeholder": "",
                      "requiredWarningText": "The value is required",
                      "warningText": "something wrong",
                    }
                  }
                  maxCharQuantity={null}
                  minCharQuantity={null}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  password={false}
                  showInfo={true}
                  suggestionListCallback={[Function]}
                  suggestionSelectedCallback={[Function]}
                  validation={null}
                  validationIconPosition="right"
                  validationIconVisible={true}
                  validationType="none"
                >
                  <WithStyles(ForwardRef(Input))
                    className="HvBaseInput-inputRoot"
                    classes={
                      Object {
                        "disabled": "HvBaseInput-inputDisabled",
                        "focused": "HvBaseInput-inputRootFocused",
                        "input": "HvBaseInput-input",
                        "multiline": "HvBaseInput-multiLine",
                      }
                    }
                    id="hv-input-9-input-input"
                  >
                    <ForwardRef(Input)
                      className="HvBaseInput-inputRoot"
                      classes={
                        Object {
                          "colorSecondary": "MuiInput-colorSecondary",
                          "disabled": "Mui-disabled HvBaseInput-inputDisabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused HvBaseInput-inputRootFocused",
                          "formControl": "MuiInput-formControl",
                          "fullWidth": "MuiInput-fullWidth",
                          "input": "MuiInput-input HvBaseInput-input",
                          "inputMarginDense": "MuiInput-inputMarginDense",
                          "inputMultiline": "MuiInput-inputMultiline",
                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                          "marginDense": "MuiInput-marginDense",
                          "multiline": "MuiInput-multiline HvBaseInput-multiLine",
                          "root": "MuiInput-root",
                          "underline": "MuiInput-underline",
                        }
                      }
                      disableUnderline={true}
                      id="hv-input-9-input-input"
                    >
                      <WithStyles(ForwardRef(InputBase))
                        className="HvBaseInput-inputRoot"
                        classes={
                          Object {
                            "colorSecondary": "MuiInput-colorSecondary",
                            "disabled": "Mui-disabled HvBaseInput-inputDisabled",
                            "error": "Mui-error",
                            "focused": "Mui-focused HvBaseInput-inputRootFocused",
                            "formControl": "MuiInput-formControl",
                            "fullWidth": "MuiInput-fullWidth",
                            "input": "MuiInput-input HvBaseInput-input",
                            "inputMarginDense": "MuiInput-inputMarginDense",
                            "inputMultiline": "MuiInput-inputMultiline",
                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                            "marginDense": "MuiInput-marginDense",
                            "multiline": "MuiInput-multiline HvBaseInput-multiLine",
                            "root": "MuiInput-root",
                            "underline": null,
                          }
                        }
                        fullWidth={false}
                        id="hv-input-9-input-input"
                        inputComponent="input"
                        multiline={false}
                        type="text"
                      >
                        <ForwardRef(InputBase)
                          className="HvBaseInput-inputRoot"
                          classes={
                            Object {
                              "adornedEnd": "MuiInputBase-adornedEnd",
                              "adornedStart": "MuiInputBase-adornedStart",
                              "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                              "disabled": "Mui-disabled Mui-disabled HvBaseInput-inputDisabled",
                              "error": "Mui-error Mui-error",
                              "focused": "Mui-focused Mui-focused HvBaseInput-inputRootFocused",
                              "formControl": "MuiInputBase-formControl MuiInput-formControl",
                              "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                              "input": "MuiInputBase-input MuiInput-input HvBaseInput-input",
                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                              "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                              "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                              "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                              "multiline": "MuiInputBase-multiline MuiInput-multiline HvBaseInput-multiLine",
                              "root": "MuiInputBase-root MuiInput-root",
                            }
                          }
                          fullWidth={false}
                          id="hv-input-9-input-input"
                          inputComponent="input"
                          multiline={false}
                          type="text"
                        >
                          <div
                            className="MuiInputBase-root MuiInput-root HvBaseInput-inputRoot"
                            onClick={[Function]}
                          >
                            <input
                              className="MuiInputBase-input MuiInput-input HvBaseInput-input"
                              id="hv-input-9-input-input"
                              onAnimationStart={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              type="text"
                            />
                          </div>
                        </ForwardRef(InputBase)>
                      </WithStyles(ForwardRef(InputBase))>
                    </ForwardRef(Input)>
                  </WithStyles(ForwardRef(Input))>
                </HvBaseInput>
              </WithId>
            </WithLabels>
          </WithStyles(WithLabels)>
          <WithStyles(WithId)
            externalWarningTextOverride={null}
            hasIcon={false}
            id="hv-input-9-description"
            labels={
              Object {
                "clearButtonLabel": "Clear the text",
                "infoText": "",
                "inputLabel": "",
                "maxCharQuantityWarningText": "The value is too big",
                "minCharQuantityWarningText": "The value is too short",
                "placeholder": "",
                "requiredWarningText": "The value is required",
                "warningText": "something wrong",
              }
            }
            stateValidation="empty"
            variant="helper"
          >
            <WithId
              classes={
                Object {
                  "adornmentButton": "HvHelperText-adornmentButton",
                  "adornmentsBox": "HvHelperText-adornmentsBox",
                  "icon": "HvHelperText-icon",
                  "iconClear": "HvHelperText-iconClear",
                  "infoIconContainer": "HvHelperText-infoIconContainer",
                  "infoText": "HvHelperText-infoText",
                  "input": "HvHelperText-input",
                  "inputDisabled": "HvHelperText-inputDisabled",
                  "inputRoot": "HvHelperText-inputRoot",
                  "inputRootDisabled": "HvHelperText-inputRootDisabled",
                  "inputRootFocused": "HvHelperText-inputRootFocused",
                  "inputRootInvalid": "HvHelperText-inputRootInvalid",
                  "label": "HvHelperText-label",
                  "labelContainer": "HvHelperText-labelContainer",
                  "labelDisabled": "HvHelperText-labelDisabled",
                  "multiLine": "HvHelperText-multiLine",
                  "root": "HvHelperText-root",
                  "showText": "HvHelperText-showText",
                  "suggestionList": "HvHelperText-suggestionList",
                  "suggestionsContainer": "HvHelperText-suggestionsContainer",
                  "textWarning": "HvHelperText-textWarning",
                }
              }
              externalWarningTextOverride={null}
              hasIcon={false}
              id="hv-input-9-description"
              labels={
                Object {
                  "clearButtonLabel": "Clear the text",
                  "infoText": "",
                  "inputLabel": "",
                  "maxCharQuantityWarningText": "The value is too big",
                  "minCharQuantityWarningText": "The value is too short",
                  "placeholder": "",
                  "requiredWarningText": "The value is required",
                  "warningText": "something wrong",
                }
              }
              stateValidation="empty"
              variant="helper"
            >
              <HvHelperText
                classes={
                  Object {
                    "adornmentButton": "HvHelperText-adornmentButton",
                    "adornmentsBox": "HvHelperText-adornmentsBox",
                    "icon": "HvHelperText-icon",
                    "iconClear": "HvHelperText-iconClear",
                    "infoIconContainer": "HvHelperText-infoIconContainer",
                    "infoText": "HvHelperText-infoText",
                    "input": "HvHelperText-input",
                    "inputDisabled": "HvHelperText-inputDisabled",
                    "inputRoot": "HvHelperText-inputRoot",
                    "inputRootDisabled": "HvHelperText-inputRootDisabled",
                    "inputRootFocused": "HvHelperText-inputRootFocused",
                    "inputRootInvalid": "HvHelperText-inputRootInvalid",
                    "label": "HvHelperText-label",
                    "labelContainer": "HvHelperText-labelContainer",
                    "labelDisabled": "HvHelperText-labelDisabled",
                    "multiLine": "HvHelperText-multiLine",
                    "root": "HvHelperText-root",
                    "showText": "HvHelperText-showText",
                    "suggestionList": "HvHelperText-suggestionList",
                    "suggestionsContainer": "HvHelperText-suggestionsContainer",
                    "textWarning": "HvHelperText-textWarning",
                  }
                }
                externalWarningTextOverride={null}
                hasIcon={false}
                id="hv-input-9-description"
                labels={
                  Object {
                    "clearButtonLabel": "Clear the text",
                    "infoText": "",
                    "inputLabel": "",
                    "maxCharQuantityWarningText": "The value is too big",
                    "minCharQuantityWarningText": "The value is too short",
                    "placeholder": "",
                    "requiredWarningText": "The value is required",
                    "warningText": "something wrong",
                  }
                }
                stateValidation="empty"
                variant="helper"
              >
                <WithStyles(ForwardRef)
                  className="HvHelperText-infoText"
                  id="hv-input-9-description-description"
                  variant="infoText"
                >
                  <ForwardRef
                    className="HvHelperText-infoText"
                    classes={
                      Object {
                        "3xlTitle": "HvTypography-3xlTitle",
                        "4xlTitle": "HvTypography-4xlTitle",
                        "5xlTitle": "HvTypography-5xlTitle",
                        "disabledButtonText": "HvTypography-disabledButtonText",
                        "highlightText": "HvTypography-highlightText",
                        "infoText": "HvTypography-infoText",
                        "inlineLink": "HvTypography-inlineLink",
                        "lTitle": "HvTypography-lTitle",
                        "labelText": "HvTypography-labelText",
                        "mTitle": "HvTypography-mTitle",
                        "normalText": "HvTypography-normalText",
                        "placeholderText": "HvTypography-placeholderText",
                        "root": "HvTypography-root",
                        "sLink": "HvTypography-sLink",
                        "sText": "HvTypography-sText",
                        "sTitle": "HvTypography-sTitle",
                        "selectedNavText": "HvTypography-selectedNavText",
                        "selectedText": "HvTypography-selectedText",
                        "vizText": "HvTypography-vizText",
                        "xlTitle": "HvTypography-xlTitle",
                        "xsTitle": "HvTypography-xsTitle",
                        "xxlTitle": "HvTypography-xxlTitle",
                        "xxsTitle": "HvTypography-xxsTitle",
                      }
                    }
                    id="hv-input-9-description-description"
                    variant="infoText"
                  >
                    <p
                      className="HvHelperText-infoText HvTypography-root HvTypography-infoText"
                      id="hv-input-9-description-description"
                    />
                  </ForwardRef>
                </WithStyles(ForwardRef)>
              </HvHelperText>
            </WithId>
          </WithStyles(WithId)>
        </div>
      </HvInput>
    </WithId>
  </WithLabels>
</WithStyles(WithLabels)>
`;

exports[`Input should render correctly 1`] = `
<WithStyles(WithLabels)>
  <WithLabels
    classes={
      Object {
        "adornmentButton": "HvInput-adornmentButton",
        "adornmentsBox": "HvInput-adornmentsBox",
        "icon": "HvInput-icon",
        "iconClear": "HvInput-iconClear",
        "infoIconContainer": "HvInput-infoIconContainer",
        "infoText": "HvInput-infoText",
        "input": "HvInput-input",
        "inputDisabled": "HvInput-inputDisabled",
        "inputRoot": "HvInput-inputRoot",
        "inputRootDisabled": "HvInput-inputRootDisabled",
        "inputRootFocused": "HvInput-inputRootFocused",
        "inputRootInvalid": "HvInput-inputRootInvalid",
        "label": "HvInput-label",
        "labelContainer": "HvInput-labelContainer",
        "labelDisabled": "HvInput-labelDisabled",
        "multiLine": "HvInput-multiLine",
        "root": "HvInput-root",
        "showText": "HvInput-showText",
        "suggestionList": "HvInput-suggestionList",
        "suggestionsContainer": "HvInput-suggestionsContainer",
        "textWarning": "HvInput-textWarning",
      }
    }
  >
    <WithId
      classes={
        Object {
          "adornmentButton": "HvInput-adornmentButton",
          "adornmentsBox": "HvInput-adornmentsBox",
          "icon": "HvInput-icon",
          "iconClear": "HvInput-iconClear",
          "infoIconContainer": "HvInput-infoIconContainer",
          "infoText": "HvInput-infoText",
          "input": "HvInput-input",
          "inputDisabled": "HvInput-inputDisabled",
          "inputRoot": "HvInput-inputRoot",
          "inputRootDisabled": "HvInput-inputRootDisabled",
          "inputRootFocused": "HvInput-inputRootFocused",
          "inputRootInvalid": "HvInput-inputRootInvalid",
          "label": "HvInput-label",
          "labelContainer": "HvInput-labelContainer",
          "labelDisabled": "HvInput-labelDisabled",
          "multiLine": "HvInput-multiLine",
          "root": "HvInput-root",
          "showText": "HvInput-showText",
          "suggestionList": "HvInput-suggestionList",
          "suggestionsContainer": "HvInput-suggestionsContainer",
          "textWarning": "HvInput-textWarning",
        }
      }
      labels={
        Object {
          "clearButtonLabel": "Clear the text",
          "infoText": "",
          "inputLabel": "",
          "maxCharQuantityWarningText": "The value is too big",
          "minCharQuantityWarningText": "The value is too short",
          "placeholder": "",
          "requiredWarningText": "The value is required",
          "warningText": "something wrong",
        }
      }
    >
      <HvInput
        autoFocus={false}
        className=""
        classes={
          Object {
            "adornmentButton": "HvInput-adornmentButton",
            "adornmentsBox": "HvInput-adornmentsBox",
            "icon": "HvInput-icon",
            "iconClear": "HvInput-iconClear",
            "infoIconContainer": "HvInput-infoIconContainer",
            "infoText": "HvInput-infoText",
            "input": "HvInput-input",
            "inputDisabled": "HvInput-inputDisabled",
            "inputRoot": "HvInput-inputRoot",
            "inputRootDisabled": "HvInput-inputRootDisabled",
            "inputRootFocused": "HvInput-inputRootFocused",
            "inputRootInvalid": "HvInput-inputRootInvalid",
            "label": "HvInput-label",
            "labelContainer": "HvInput-labelContainer",
            "labelDisabled": "HvInput-labelDisabled",
            "multiLine": "HvInput-multiLine",
            "root": "HvInput-root",
            "showText": "HvInput-showText",
            "suggestionList": "HvInput-suggestionList",
            "suggestionsContainer": "HvInput-suggestionsContainer",
            "textWarning": "HvInput-textWarning",
          }
        }
        customFixedIcon={null}
        disableClear={false}
        disabled={false}
        externalWarningTextOverride={null}
        id="hv-input-2"
        infoIcon={false}
        inputProps={Object {}}
        inputRef={null}
        isRequired={false}
        labels={
          Object {
            "clearButtonLabel": "Clear the text",
            "infoText": "",
            "inputLabel": "",
            "maxCharQuantityWarningText": "The value is too big",
            "minCharQuantityWarningText": "The value is too short",
            "placeholder": "",
            "requiredWarningText": "The value is required",
            "warningText": "something wrong",
          }
        }
        maxCharQuantity={null}
        minCharQuantity={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        password={false}
        showInfo={true}
        suggestionListCallback={[Function]}
        suggestionSelectedCallback={[Function]}
        validation={null}
        validationIconPosition="right"
        validationIconVisible={true}
        validationState="empty"
        validationType="none"
      >
        <div
          className="HvInput-root"
          id="hv-input-2"
          onBlur={[Function]}
        >
          <div
            className="HvInput-labelContainer"
          />
          <WithStyles(WithLabels)
            id="hv-input-2-input"
          >
            <WithLabels
              classes={
                Object {
                  "adornmentButton": "HvBaseInput-adornmentButton",
                  "adornmentsBox": "HvBaseInput-adornmentsBox",
                  "icon": "HvBaseInput-icon",
                  "iconClear": "HvBaseInput-iconClear",
                  "infoIconContainer": "HvBaseInput-infoIconContainer",
                  "infoText": "HvBaseInput-infoText",
                  "input": "HvBaseInput-input",
                  "inputDisabled": "HvBaseInput-inputDisabled",
                  "inputRoot": "HvBaseInput-inputRoot",
                  "inputRootDisabled": "HvBaseInput-inputRootDisabled",
                  "inputRootFocused": "HvBaseInput-inputRootFocused",
                  "inputRootInvalid": "HvBaseInput-inputRootInvalid",
                  "label": "HvBaseInput-label",
                  "labelContainer": "HvBaseInput-labelContainer",
                  "labelDisabled": "HvBaseInput-labelDisabled",
                  "multiLine": "HvBaseInput-multiLine",
                  "root": "HvBaseInput-root",
                  "showText": "HvBaseInput-showText",
                  "suggestionList": "HvBaseInput-suggestionList",
                  "suggestionsContainer": "HvBaseInput-suggestionsContainer",
                  "textWarning": "HvBaseInput-textWarning",
                }
              }
              id="hv-input-2-input"
            >
              <WithId
                classes={
                  Object {
                    "adornmentButton": "HvBaseInput-adornmentButton",
                    "adornmentsBox": "HvBaseInput-adornmentsBox",
                    "icon": "HvBaseInput-icon",
                    "iconClear": "HvBaseInput-iconClear",
                    "infoIconContainer": "HvBaseInput-infoIconContainer",
                    "infoText": "HvBaseInput-infoText",
                    "input": "HvBaseInput-input",
                    "inputDisabled": "HvBaseInput-inputDisabled",
                    "inputRoot": "HvBaseInput-inputRoot",
                    "inputRootDisabled": "HvBaseInput-inputRootDisabled",
                    "inputRootFocused": "HvBaseInput-inputRootFocused",
                    "inputRootInvalid": "HvBaseInput-inputRootInvalid",
                    "label": "HvBaseInput-label",
                    "labelContainer": "HvBaseInput-labelContainer",
                    "labelDisabled": "HvBaseInput-labelDisabled",
                    "multiLine": "HvBaseInput-multiLine",
                    "root": "HvBaseInput-root",
                    "showText": "HvBaseInput-showText",
                    "suggestionList": "HvBaseInput-suggestionList",
                    "suggestionsContainer": "HvBaseInput-suggestionsContainer",
                    "textWarning": "HvBaseInput-textWarning",
                  }
                }
                id="hv-input-2-input"
                labels={
                  Object {
                    "clearButtonLabel": "Clear the text",
                    "infoText": "",
                    "inputLabel": "",
                    "maxCharQuantityWarningText": "The value is too big",
                    "minCharQuantityWarningText": "The value is too short",
                    "placeholder": "",
                    "requiredWarningText": "The value is required",
                    "warningText": "something wrong",
                  }
                }
              >
                <HvBaseInput
                  autoFocus={false}
                  className=""
                  classes={
                    Object {
                      "adornmentButton": "HvBaseInput-adornmentButton",
                      "adornmentsBox": "HvBaseInput-adornmentsBox",
                      "icon": "HvBaseInput-icon",
                      "iconClear": "HvBaseInput-iconClear",
                      "infoIconContainer": "HvBaseInput-infoIconContainer",
                      "infoText": "HvBaseInput-infoText",
                      "input": "HvBaseInput-input",
                      "inputDisabled": "HvBaseInput-inputDisabled",
                      "inputRoot": "HvBaseInput-inputRoot",
                      "inputRootDisabled": "HvBaseInput-inputRootDisabled",
                      "inputRootFocused": "HvBaseInput-inputRootFocused",
                      "inputRootInvalid": "HvBaseInput-inputRootInvalid",
                      "label": "HvBaseInput-label",
                      "labelContainer": "HvBaseInput-labelContainer",
                      "labelDisabled": "HvBaseInput-labelDisabled",
                      "multiLine": "HvBaseInput-multiLine",
                      "root": "HvBaseInput-root",
                      "showText": "HvBaseInput-showText",
                      "suggestionList": "HvBaseInput-suggestionList",
                      "suggestionsContainer": "HvBaseInput-suggestionsContainer",
                      "textWarning": "HvBaseInput-textWarning",
                    }
                  }
                  customFixedIcon={null}
                  disableClear={false}
                  disabled={false}
                  externalWarningTextOverride={null}
                  id="hv-input-2-input"
                  infoIcon={false}
                  inputProps={Object {}}
                  inputRef={null}
                  isRequired={false}
                  labels={
                    Object {
                      "clearButtonLabel": "Clear the text",
                      "infoText": "",
                      "inputLabel": "",
                      "maxCharQuantityWarningText": "The value is too big",
                      "minCharQuantityWarningText": "The value is too short",
                      "placeholder": "",
                      "requiredWarningText": "The value is required",
                      "warningText": "something wrong",
                    }
                  }
                  maxCharQuantity={null}
                  minCharQuantity={null}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  password={false}
                  showInfo={true}
                  suggestionListCallback={[Function]}
                  suggestionSelectedCallback={[Function]}
                  validation={null}
                  validationIconPosition="right"
                  validationIconVisible={true}
                  validationType="none"
                >
                  <WithStyles(ForwardRef(Input))
                    className="HvBaseInput-inputRoot"
                    classes={
                      Object {
                        "disabled": "HvBaseInput-inputDisabled",
                        "focused": "HvBaseInput-inputRootFocused",
                        "input": "HvBaseInput-input",
                        "multiline": "HvBaseInput-multiLine",
                      }
                    }
                    id="hv-input-2-input-input"
                  >
                    <ForwardRef(Input)
                      className="HvBaseInput-inputRoot"
                      classes={
                        Object {
                          "colorSecondary": "MuiInput-colorSecondary",
                          "disabled": "Mui-disabled HvBaseInput-inputDisabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused HvBaseInput-inputRootFocused",
                          "formControl": "MuiInput-formControl",
                          "fullWidth": "MuiInput-fullWidth",
                          "input": "MuiInput-input HvBaseInput-input",
                          "inputMarginDense": "MuiInput-inputMarginDense",
                          "inputMultiline": "MuiInput-inputMultiline",
                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                          "marginDense": "MuiInput-marginDense",
                          "multiline": "MuiInput-multiline HvBaseInput-multiLine",
                          "root": "MuiInput-root",
                          "underline": "MuiInput-underline",
                        }
                      }
                      disableUnderline={true}
                      id="hv-input-2-input-input"
                    >
                      <WithStyles(ForwardRef(InputBase))
                        className="HvBaseInput-inputRoot"
                        classes={
                          Object {
                            "colorSecondary": "MuiInput-colorSecondary",
                            "disabled": "Mui-disabled HvBaseInput-inputDisabled",
                            "error": "Mui-error",
                            "focused": "Mui-focused HvBaseInput-inputRootFocused",
                            "formControl": "MuiInput-formControl",
                            "fullWidth": "MuiInput-fullWidth",
                            "input": "MuiInput-input HvBaseInput-input",
                            "inputMarginDense": "MuiInput-inputMarginDense",
                            "inputMultiline": "MuiInput-inputMultiline",
                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                            "marginDense": "MuiInput-marginDense",
                            "multiline": "MuiInput-multiline HvBaseInput-multiLine",
                            "root": "MuiInput-root",
                            "underline": null,
                          }
                        }
                        fullWidth={false}
                        id="hv-input-2-input-input"
                        inputComponent="input"
                        multiline={false}
                        type="text"
                      >
                        <ForwardRef(InputBase)
                          className="HvBaseInput-inputRoot"
                          classes={
                            Object {
                              "adornedEnd": "MuiInputBase-adornedEnd",
                              "adornedStart": "MuiInputBase-adornedStart",
                              "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                              "disabled": "Mui-disabled Mui-disabled HvBaseInput-inputDisabled",
                              "error": "Mui-error Mui-error",
                              "focused": "Mui-focused Mui-focused HvBaseInput-inputRootFocused",
                              "formControl": "MuiInputBase-formControl MuiInput-formControl",
                              "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                              "input": "MuiInputBase-input MuiInput-input HvBaseInput-input",
                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                              "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                              "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                              "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                              "multiline": "MuiInputBase-multiline MuiInput-multiline HvBaseInput-multiLine",
                              "root": "MuiInputBase-root MuiInput-root",
                            }
                          }
                          fullWidth={false}
                          id="hv-input-2-input-input"
                          inputComponent="input"
                          multiline={false}
                          type="text"
                        >
                          <div
                            className="MuiInputBase-root MuiInput-root HvBaseInput-inputRoot"
                            onClick={[Function]}
                          >
                            <input
                              className="MuiInputBase-input MuiInput-input HvBaseInput-input"
                              id="hv-input-2-input-input"
                              onAnimationStart={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              type="text"
                            />
                          </div>
                        </ForwardRef(InputBase)>
                      </WithStyles(ForwardRef(InputBase))>
                    </ForwardRef(Input)>
                  </WithStyles(ForwardRef(Input))>
                </HvBaseInput>
              </WithId>
            </WithLabels>
          </WithStyles(WithLabels)>
          <WithStyles(WithId)
            externalWarningTextOverride={null}
            hasIcon={false}
            id="hv-input-2-description"
            labels={
              Object {
                "clearButtonLabel": "Clear the text",
                "infoText": "",
                "inputLabel": "",
                "maxCharQuantityWarningText": "The value is too big",
                "minCharQuantityWarningText": "The value is too short",
                "placeholder": "",
                "requiredWarningText": "The value is required",
                "warningText": "something wrong",
              }
            }
            stateValidation="empty"
            variant="helper"
          >
            <WithId
              classes={
                Object {
                  "adornmentButton": "HvHelperText-adornmentButton",
                  "adornmentsBox": "HvHelperText-adornmentsBox",
                  "icon": "HvHelperText-icon",
                  "iconClear": "HvHelperText-iconClear",
                  "infoIconContainer": "HvHelperText-infoIconContainer",
                  "infoText": "HvHelperText-infoText",
                  "input": "HvHelperText-input",
                  "inputDisabled": "HvHelperText-inputDisabled",
                  "inputRoot": "HvHelperText-inputRoot",
                  "inputRootDisabled": "HvHelperText-inputRootDisabled",
                  "inputRootFocused": "HvHelperText-inputRootFocused",
                  "inputRootInvalid": "HvHelperText-inputRootInvalid",
                  "label": "HvHelperText-label",
                  "labelContainer": "HvHelperText-labelContainer",
                  "labelDisabled": "HvHelperText-labelDisabled",
                  "multiLine": "HvHelperText-multiLine",
                  "root": "HvHelperText-root",
                  "showText": "HvHelperText-showText",
                  "suggestionList": "HvHelperText-suggestionList",
                  "suggestionsContainer": "HvHelperText-suggestionsContainer",
                  "textWarning": "HvHelperText-textWarning",
                }
              }
              externalWarningTextOverride={null}
              hasIcon={false}
              id="hv-input-2-description"
              labels={
                Object {
                  "clearButtonLabel": "Clear the text",
                  "infoText": "",
                  "inputLabel": "",
                  "maxCharQuantityWarningText": "The value is too big",
                  "minCharQuantityWarningText": "The value is too short",
                  "placeholder": "",
                  "requiredWarningText": "The value is required",
                  "warningText": "something wrong",
                }
              }
              stateValidation="empty"
              variant="helper"
            >
              <HvHelperText
                classes={
                  Object {
                    "adornmentButton": "HvHelperText-adornmentButton",
                    "adornmentsBox": "HvHelperText-adornmentsBox",
                    "icon": "HvHelperText-icon",
                    "iconClear": "HvHelperText-iconClear",
                    "infoIconContainer": "HvHelperText-infoIconContainer",
                    "infoText": "HvHelperText-infoText",
                    "input": "HvHelperText-input",
                    "inputDisabled": "HvHelperText-inputDisabled",
                    "inputRoot": "HvHelperText-inputRoot",
                    "inputRootDisabled": "HvHelperText-inputRootDisabled",
                    "inputRootFocused": "HvHelperText-inputRootFocused",
                    "inputRootInvalid": "HvHelperText-inputRootInvalid",
                    "label": "HvHelperText-label",
                    "labelContainer": "HvHelperText-labelContainer",
                    "labelDisabled": "HvHelperText-labelDisabled",
                    "multiLine": "HvHelperText-multiLine",
                    "root": "HvHelperText-root",
                    "showText": "HvHelperText-showText",
                    "suggestionList": "HvHelperText-suggestionList",
                    "suggestionsContainer": "HvHelperText-suggestionsContainer",
                    "textWarning": "HvHelperText-textWarning",
                  }
                }
                externalWarningTextOverride={null}
                hasIcon={false}
                id="hv-input-2-description"
                labels={
                  Object {
                    "clearButtonLabel": "Clear the text",
                    "infoText": "",
                    "inputLabel": "",
                    "maxCharQuantityWarningText": "The value is too big",
                    "minCharQuantityWarningText": "The value is too short",
                    "placeholder": "",
                    "requiredWarningText": "The value is required",
                    "warningText": "something wrong",
                  }
                }
                stateValidation="empty"
                variant="helper"
              >
                <WithStyles(ForwardRef)
                  className="HvHelperText-infoText"
                  id="hv-input-2-description-description"
                  variant="infoText"
                >
                  <ForwardRef
                    className="HvHelperText-infoText"
                    classes={
                      Object {
                        "3xlTitle": "HvTypography-3xlTitle",
                        "4xlTitle": "HvTypography-4xlTitle",
                        "5xlTitle": "HvTypography-5xlTitle",
                        "disabledButtonText": "HvTypography-disabledButtonText",
                        "highlightText": "HvTypography-highlightText",
                        "infoText": "HvTypography-infoText",
                        "inlineLink": "HvTypography-inlineLink",
                        "lTitle": "HvTypography-lTitle",
                        "labelText": "HvTypography-labelText",
                        "mTitle": "HvTypography-mTitle",
                        "normalText": "HvTypography-normalText",
                        "placeholderText": "HvTypography-placeholderText",
                        "root": "HvTypography-root",
                        "sLink": "HvTypography-sLink",
                        "sText": "HvTypography-sText",
                        "sTitle": "HvTypography-sTitle",
                        "selectedNavText": "HvTypography-selectedNavText",
                        "selectedText": "HvTypography-selectedText",
                        "vizText": "HvTypography-vizText",
                        "xlTitle": "HvTypography-xlTitle",
                        "xsTitle": "HvTypography-xsTitle",
                        "xxlTitle": "HvTypography-xxlTitle",
                        "xxsTitle": "HvTypography-xxsTitle",
                      }
                    }
                    id="hv-input-2-description-description"
                    variant="infoText"
                  >
                    <p
                      className="HvHelperText-infoText HvTypography-root HvTypography-infoText"
                      id="hv-input-2-description-description"
                    />
                  </ForwardRef>
                </WithStyles(ForwardRef)>
              </HvHelperText>
            </WithId>
          </WithStyles(WithId)>
        </div>
      </HvInput>
    </WithId>
  </WithLabels>
</WithStyles(WithLabels)>
`;
