// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TimePicker should render correctly 1`] = `
<WithStyles(HvTimePicker)
  hours={10}
  labels={
    Object {
      "title": "mockTitle",
    }
  }
  minutes={20}
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          "mockGetTimeWithFormat24",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  period="PM"
  seconds={30}
>
  <HvTimePicker
    classes={
      Object {
        "icon": "HvTimePicker-icon",
        "input": "HvTimePicker-input",
        "inputContainer": "HvTimePicker-inputContainer",
        "inputPopperClosed": "HvTimePicker-inputPopperClosed",
        "inputPopperOpenedAbove": "HvTimePicker-inputPopperOpenedAbove",
        "inputPopperOpenedBelow": "HvTimePicker-inputPopperOpenedBelow",
        "label": "HvTimePicker-label",
        "periodContainer": "HvTimePicker-periodContainer",
        "popper": "HvTimePicker-popper",
        "popperAbove": "HvTimePicker-popperAbove",
        "popperBelow": "HvTimePicker-popperBelow",
        "separator": "HvTimePicker-separator",
        "timePickerContainer": "HvTimePicker-timePickerContainer",
        "timePopperContainer": "HvTimePicker-timePopperContainer",
      }
    }
    hours={10}
    labels={
      Object {
        "title": "mockTitle",
      }
    }
    locale="en"
    minutes={20}
    onChange={
      [MockFunction] {
        "calls": Array [
          Array [
            "mockGetTimeWithFormat24",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    period="PM"
    seconds={30}
  >
    <ClickAwayListener
      onClickAway={[Function]}
    >
      <div
        className="HvTimePicker-timePickerContainer"
        onClick={[Function]}
        onTouchEnd={[Function]}
      >
        <WithStyles(ForwardRef)
          className="HvTimePicker-label"
          variant="labelText"
        >
          <ForwardRef
            className="HvTimePicker-label"
            classes={
              Object {
                "3xlTitle": "HvTypography-3xlTitle",
                "4xlTitle": "HvTypography-4xlTitle",
                "5xlTitle": "HvTypography-5xlTitle",
                "disabledButtonText": "HvTypography-disabledButtonText",
                "highlightText": "HvTypography-highlightText",
                "infoText": "HvTypography-infoText",
                "inlineLink": "HvTypography-inlineLink",
                "lTitle": "HvTypography-lTitle",
                "labelText": "HvTypography-labelText",
                "mTitle": "HvTypography-mTitle",
                "normalText": "HvTypography-normalText",
                "placeholderText": "HvTypography-placeholderText",
                "root": "HvTypography-root",
                "sLink": "HvTypography-sLink",
                "sText": "HvTypography-sText",
                "sTitle": "HvTypography-sTitle",
                "selectedNavText": "HvTypography-selectedNavText",
                "selectedText": "HvTypography-selectedText",
                "vizText": "HvTypography-vizText",
                "xlTitle": "HvTypography-xlTitle",
                "xsTitle": "HvTypography-xsTitle",
                "xxlTitle": "HvTypography-xxlTitle",
                "xxsTitle": "HvTypography-xxsTitle",
              }
            }
            variant="labelText"
          >
            <p
              className="HvTimePicker-label HvTypography-root HvTypography-labelText"
            >
              mockTitle
            </p>
          </ForwardRef>
        </WithStyles(ForwardRef)>
        <div
          className="HvTimePicker-inputContainer HvTimePicker-inputPopperClosed"
        >
          <input
            className="HvTimePicker-input"
            readOnly={true}
            type="text"
            value="mockGetFormattedTime"
          />
          <Time
            className="HvTimePicker-icon"
            onClick={[Function]}
          >
            <WithStyles(HvIconBase)
              className="HvTimePicker-icon"
              iconSize="S"
              name="Time"
              onClick={[Function]}
            >
              <HvIconBase
                className="HvTimePicker-icon"
                classes={
                  Object {
                    "l": "HvIconBase-l",
                    "m": "HvIconBase-m",
                    "root": "HvIconBase-root",
                    "s": "HvIconBase-s",
                    "xs": "HvIconBase-xs",
                  }
                }
                iconSize="S"
                name="Time"
                onClick={[Function]}
              >
                <div
                  className="HvTimePicker-icon HvIconBase-root HvIconBase-s"
                  name="Time"
                  onClick={[Function]}
                >
                  <svg
                    focusable={false}
                    height={16}
                    viewBox="0 0 16 16"
                    width={16}
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      className="color0"
                      d="M8 15a7.023 7.023 0 10-4.943-2.057A6.953 6.953 0 008 15m0 1a8 8 0 118-8 8 8 0 01-8 8zm2.646-4.646L7.5 8.207V3h1v4.793l2.854 2.854z"
                      fill="#414141"
                    />
                  </svg>
                </div>
              </HvIconBase>
            </WithStyles(HvIconBase)>
          </Time>
        </div>
        <ForwardRef(Popper)
          anchorEl={null}
          className="HvTimePicker-popper HvTimePicker-popperBelow"
          disablePortal={true}
          open={false}
          placement="bottom-start"
          popperOptions={
            Object {
              "onCreate": [Function],
              "onUpdate": [Function],
            }
          }
        />
      </div>
    </ClickAwayListener>
  </HvTimePicker>
</WithStyles(HvTimePicker)>
`;
